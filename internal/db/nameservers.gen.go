// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ice-bergtech/dnh/src/internal/models"
)

func newNameserver(db *gorm.DB, opts ...gen.DOOption) nameserver {
	_nameserver := nameserver{}

	_nameserver.nameserverDo.UseDB(db, opts...)
	_nameserver.nameserverDo.UseModel(&models.Nameserver{})

	tableName := _nameserver.nameserverDo.TableName()
	_nameserver.ALL = field.NewAsterisk(tableName)
	_nameserver.ID = field.NewUint(tableName, "id")
	_nameserver.CreatedAt = field.NewTime(tableName, "created_at")
	_nameserver.UpdatedAt = field.NewTime(tableName, "updated_at")
	_nameserver.DeletedAt = field.NewField(tableName, "deleted_at")
	_nameserver.Name = field.NewString(tableName, "name")
	_nameserver.TimeFist = field.NewTime(tableName, "time_fist")
	_nameserver.TimeLast = field.NewTime(tableName, "time_last")
	_nameserver.Tags = field.NewField(tableName, "tags")
	_nameserver.IP = nameserverManyToManyIP{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("IP", "models.IPAddress"),
		Advertisers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IP.Advertisers", "models.ASNInfo"),
		},
	}

	_nameserver.fillFieldMap()

	return _nameserver
}

type nameserver struct {
	nameserverDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	TimeFist  field.Time
	TimeLast  field.Time
	Tags      field.Field
	IP        nameserverManyToManyIP

	fieldMap map[string]field.Expr
}

func (n nameserver) Table(newTableName string) *nameserver {
	n.nameserverDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nameserver) As(alias string) *nameserver {
	n.nameserverDo.DO = *(n.nameserverDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nameserver) updateTableName(table string) *nameserver {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint(table, "id")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.DeletedAt = field.NewField(table, "deleted_at")
	n.Name = field.NewString(table, "name")
	n.TimeFist = field.NewTime(table, "time_fist")
	n.TimeLast = field.NewTime(table, "time_last")
	n.Tags = field.NewField(table, "tags")

	n.fillFieldMap()

	return n
}

func (n *nameserver) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nameserver) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["id"] = n.ID
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["deleted_at"] = n.DeletedAt
	n.fieldMap["name"] = n.Name
	n.fieldMap["time_fist"] = n.TimeFist
	n.fieldMap["time_last"] = n.TimeLast
	n.fieldMap["tags"] = n.Tags

}

func (n nameserver) clone(db *gorm.DB) nameserver {
	n.nameserverDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nameserver) replaceDB(db *gorm.DB) nameserver {
	n.nameserverDo.ReplaceDB(db)
	return n
}

type nameserverManyToManyIP struct {
	db *gorm.DB

	field.RelationField

	Advertisers struct {
		field.RelationField
	}
}

func (a nameserverManyToManyIP) Where(conds ...field.Expr) *nameserverManyToManyIP {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a nameserverManyToManyIP) WithContext(ctx context.Context) *nameserverManyToManyIP {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a nameserverManyToManyIP) Session(session *gorm.Session) *nameserverManyToManyIP {
	a.db = a.db.Session(session)
	return &a
}

func (a nameserverManyToManyIP) Model(m *models.Nameserver) *nameserverManyToManyIPTx {
	return &nameserverManyToManyIPTx{a.db.Model(m).Association(a.Name())}
}

type nameserverManyToManyIPTx struct{ tx *gorm.Association }

func (a nameserverManyToManyIPTx) Find() (result []*models.IPAddress, err error) {
	return result, a.tx.Find(&result)
}

func (a nameserverManyToManyIPTx) Append(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a nameserverManyToManyIPTx) Replace(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a nameserverManyToManyIPTx) Delete(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a nameserverManyToManyIPTx) Clear() error {
	return a.tx.Clear()
}

func (a nameserverManyToManyIPTx) Count() int64 {
	return a.tx.Count()
}

type nameserverDo struct{ gen.DO }

type INameserverDo interface {
	gen.SubQuery
	Debug() INameserverDo
	WithContext(ctx context.Context) INameserverDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INameserverDo
	WriteDB() INameserverDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INameserverDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INameserverDo
	Not(conds ...gen.Condition) INameserverDo
	Or(conds ...gen.Condition) INameserverDo
	Select(conds ...field.Expr) INameserverDo
	Where(conds ...gen.Condition) INameserverDo
	Order(conds ...field.Expr) INameserverDo
	Distinct(cols ...field.Expr) INameserverDo
	Omit(cols ...field.Expr) INameserverDo
	Join(table schema.Tabler, on ...field.Expr) INameserverDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INameserverDo
	RightJoin(table schema.Tabler, on ...field.Expr) INameserverDo
	Group(cols ...field.Expr) INameserverDo
	Having(conds ...gen.Condition) INameserverDo
	Limit(limit int) INameserverDo
	Offset(offset int) INameserverDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INameserverDo
	Unscoped() INameserverDo
	Create(values ...*models.Nameserver) error
	CreateInBatches(values []*models.Nameserver, batchSize int) error
	Save(values ...*models.Nameserver) error
	First() (*models.Nameserver, error)
	Take() (*models.Nameserver, error)
	Last() (*models.Nameserver, error)
	Find() ([]*models.Nameserver, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Nameserver, err error)
	FindInBatches(result *[]*models.Nameserver, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Nameserver) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INameserverDo
	Assign(attrs ...field.AssignExpr) INameserverDo
	Joins(fields ...field.RelationField) INameserverDo
	Preload(fields ...field.RelationField) INameserverDo
	FirstOrInit() (*models.Nameserver, error)
	FirstOrCreate() (*models.Nameserver, error)
	FindByPage(offset int, limit int) (result []*models.Nameserver, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INameserverDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.Nameserver, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (n nameserverDo) FilterWithNameAndRole(name string, role string) (result []models.Nameserver, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM nameservers WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = n.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (n nameserverDo) Debug() INameserverDo {
	return n.withDO(n.DO.Debug())
}

func (n nameserverDo) WithContext(ctx context.Context) INameserverDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nameserverDo) ReadDB() INameserverDo {
	return n.Clauses(dbresolver.Read)
}

func (n nameserverDo) WriteDB() INameserverDo {
	return n.Clauses(dbresolver.Write)
}

func (n nameserverDo) Session(config *gorm.Session) INameserverDo {
	return n.withDO(n.DO.Session(config))
}

func (n nameserverDo) Clauses(conds ...clause.Expression) INameserverDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nameserverDo) Returning(value interface{}, columns ...string) INameserverDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nameserverDo) Not(conds ...gen.Condition) INameserverDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nameserverDo) Or(conds ...gen.Condition) INameserverDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nameserverDo) Select(conds ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nameserverDo) Where(conds ...gen.Condition) INameserverDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nameserverDo) Order(conds ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nameserverDo) Distinct(cols ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nameserverDo) Omit(cols ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nameserverDo) Join(table schema.Tabler, on ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nameserverDo) LeftJoin(table schema.Tabler, on ...field.Expr) INameserverDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nameserverDo) RightJoin(table schema.Tabler, on ...field.Expr) INameserverDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nameserverDo) Group(cols ...field.Expr) INameserverDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nameserverDo) Having(conds ...gen.Condition) INameserverDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nameserverDo) Limit(limit int) INameserverDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nameserverDo) Offset(offset int) INameserverDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nameserverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INameserverDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nameserverDo) Unscoped() INameserverDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nameserverDo) Create(values ...*models.Nameserver) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nameserverDo) CreateInBatches(values []*models.Nameserver, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nameserverDo) Save(values ...*models.Nameserver) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nameserverDo) First() (*models.Nameserver, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Nameserver), nil
	}
}

func (n nameserverDo) Take() (*models.Nameserver, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Nameserver), nil
	}
}

func (n nameserverDo) Last() (*models.Nameserver, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Nameserver), nil
	}
}

func (n nameserverDo) Find() ([]*models.Nameserver, error) {
	result, err := n.DO.Find()
	return result.([]*models.Nameserver), err
}

func (n nameserverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Nameserver, err error) {
	buf := make([]*models.Nameserver, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nameserverDo) FindInBatches(result *[]*models.Nameserver, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nameserverDo) Attrs(attrs ...field.AssignExpr) INameserverDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nameserverDo) Assign(attrs ...field.AssignExpr) INameserverDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nameserverDo) Joins(fields ...field.RelationField) INameserverDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nameserverDo) Preload(fields ...field.RelationField) INameserverDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nameserverDo) FirstOrInit() (*models.Nameserver, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Nameserver), nil
	}
}

func (n nameserverDo) FirstOrCreate() (*models.Nameserver, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Nameserver), nil
	}
}

func (n nameserverDo) FindByPage(offset int, limit int) (result []*models.Nameserver, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nameserverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nameserverDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nameserverDo) Delete(models ...*models.Nameserver) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nameserverDo) withDO(do gen.Dao) *nameserverDo {
	n.DO = *do.(*gen.DO)
	return n
}
