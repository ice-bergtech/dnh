// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	dnh "github.com/ice-bergtech/dnh/src/internal/lib"
)

func newWhois(db *gorm.DB, opts ...gen.DOOption) whois {
	_whois := whois{}

	_whois.whoisDo.UseDB(db, opts...)
	_whois.whoisDo.UseModel(&dnh.Whois{})

	tableName := _whois.whoisDo.TableName()
	_whois.ALL = field.NewAsterisk(tableName)
	_whois.ID = field.NewUint(tableName, "id")
	_whois.CreatedAt = field.NewTime(tableName, "created_at")
	_whois.UpdatedAt = field.NewTime(tableName, "updated_at")
	_whois.DeletedAt = field.NewField(tableName, "deleted_at")
	_whois.DomainName = field.NewString(tableName, "domain_name")
	_whois.ASN = field.NewUint32(tableName, "asn")
	_whois.Country = field.NewString(tableName, "country")
	_whois.Created = field.NewTime(tableName, "created")
	_whois.Updated = field.NewTime(tableName, "updated")
	_whois.Registrar = field.NewString(tableName, "registrar")
	_whois.Timestamp = field.NewTime(tableName, "timestamp")
	_whois.Tags = field.NewField(tableName, "tags")
	_whois.IPRange = whoisHasOneIPRange{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("IPRange", "dnh.IPAddress"),
		Advertisers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("IPRange.Advertisers", "dnh.ASNInfo"),
		},
	}

	_whois.Nameservers = whoisManyToManyNameservers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Nameservers", "dnh.Nameserver"),
		IP: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Nameservers.IP", "dnh.IPAddress"),
		},
	}

	_whois.fillFieldMap()

	return _whois
}

type whois struct {
	whoisDo whoisDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	DomainName field.String
	ASN        field.Uint32
	Country    field.String
	Created    field.Time
	Updated    field.Time
	Registrar  field.String
	Timestamp  field.Time
	Tags       field.Field
	IPRange    whoisHasOneIPRange

	Nameservers whoisManyToManyNameservers

	fieldMap map[string]field.Expr
}

func (w whois) Table(newTableName string) *whois {
	w.whoisDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w whois) As(alias string) *whois {
	w.whoisDo.DO = *(w.whoisDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *whois) updateTableName(table string) *whois {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.DomainName = field.NewString(table, "domain_name")
	w.ASN = field.NewUint32(table, "asn")
	w.Country = field.NewString(table, "country")
	w.Created = field.NewTime(table, "created")
	w.Updated = field.NewTime(table, "updated")
	w.Registrar = field.NewString(table, "registrar")
	w.Timestamp = field.NewTime(table, "timestamp")
	w.Tags = field.NewField(table, "tags")

	w.fillFieldMap()

	return w
}

func (w *whois) WithContext(ctx context.Context) IWhoisDo { return w.whoisDo.WithContext(ctx) }

func (w whois) TableName() string { return w.whoisDo.TableName() }

func (w whois) Alias() string { return w.whoisDo.Alias() }

func (w whois) Columns(cols ...field.Expr) gen.Columns { return w.whoisDo.Columns(cols...) }

func (w *whois) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *whois) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 14)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["domain_name"] = w.DomainName
	w.fieldMap["asn"] = w.ASN
	w.fieldMap["country"] = w.Country
	w.fieldMap["created"] = w.Created
	w.fieldMap["updated"] = w.Updated
	w.fieldMap["registrar"] = w.Registrar
	w.fieldMap["timestamp"] = w.Timestamp
	w.fieldMap["tags"] = w.Tags

}

func (w whois) clone(db *gorm.DB) whois {
	w.whoisDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w whois) replaceDB(db *gorm.DB) whois {
	w.whoisDo.ReplaceDB(db)
	return w
}

type whoisHasOneIPRange struct {
	db *gorm.DB

	field.RelationField

	Advertisers struct {
		field.RelationField
	}
}

func (a whoisHasOneIPRange) Where(conds ...field.Expr) *whoisHasOneIPRange {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a whoisHasOneIPRange) WithContext(ctx context.Context) *whoisHasOneIPRange {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a whoisHasOneIPRange) Session(session *gorm.Session) *whoisHasOneIPRange {
	a.db = a.db.Session(session)
	return &a
}

func (a whoisHasOneIPRange) Model(m *dnh.Whois) *whoisHasOneIPRangeTx {
	return &whoisHasOneIPRangeTx{a.db.Model(m).Association(a.Name())}
}

type whoisHasOneIPRangeTx struct{ tx *gorm.Association }

func (a whoisHasOneIPRangeTx) Find() (result *dnh.IPAddress, err error) {
	return result, a.tx.Find(&result)
}

func (a whoisHasOneIPRangeTx) Append(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a whoisHasOneIPRangeTx) Replace(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a whoisHasOneIPRangeTx) Delete(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a whoisHasOneIPRangeTx) Clear() error {
	return a.tx.Clear()
}

func (a whoisHasOneIPRangeTx) Count() int64 {
	return a.tx.Count()
}

type whoisManyToManyNameservers struct {
	db *gorm.DB

	field.RelationField

	IP struct {
		field.RelationField
	}
}

func (a whoisManyToManyNameservers) Where(conds ...field.Expr) *whoisManyToManyNameservers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a whoisManyToManyNameservers) WithContext(ctx context.Context) *whoisManyToManyNameservers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a whoisManyToManyNameservers) Session(session *gorm.Session) *whoisManyToManyNameservers {
	a.db = a.db.Session(session)
	return &a
}

func (a whoisManyToManyNameservers) Model(m *dnh.Whois) *whoisManyToManyNameserversTx {
	return &whoisManyToManyNameserversTx{a.db.Model(m).Association(a.Name())}
}

type whoisManyToManyNameserversTx struct{ tx *gorm.Association }

func (a whoisManyToManyNameserversTx) Find() (result []*dnh.Nameserver, err error) {
	return result, a.tx.Find(&result)
}

func (a whoisManyToManyNameserversTx) Append(values ...*dnh.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a whoisManyToManyNameserversTx) Replace(values ...*dnh.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a whoisManyToManyNameserversTx) Delete(values ...*dnh.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a whoisManyToManyNameserversTx) Clear() error {
	return a.tx.Clear()
}

func (a whoisManyToManyNameserversTx) Count() int64 {
	return a.tx.Count()
}

type whoisDo struct{ gen.DO }

type IWhoisDo interface {
	gen.SubQuery
	Debug() IWhoisDo
	WithContext(ctx context.Context) IWhoisDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWhoisDo
	WriteDB() IWhoisDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWhoisDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWhoisDo
	Not(conds ...gen.Condition) IWhoisDo
	Or(conds ...gen.Condition) IWhoisDo
	Select(conds ...field.Expr) IWhoisDo
	Where(conds ...gen.Condition) IWhoisDo
	Order(conds ...field.Expr) IWhoisDo
	Distinct(cols ...field.Expr) IWhoisDo
	Omit(cols ...field.Expr) IWhoisDo
	Join(table schema.Tabler, on ...field.Expr) IWhoisDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWhoisDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWhoisDo
	Group(cols ...field.Expr) IWhoisDo
	Having(conds ...gen.Condition) IWhoisDo
	Limit(limit int) IWhoisDo
	Offset(offset int) IWhoisDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWhoisDo
	Unscoped() IWhoisDo
	Create(values ...*dnh.Whois) error
	CreateInBatches(values []*dnh.Whois, batchSize int) error
	Save(values ...*dnh.Whois) error
	First() (*dnh.Whois, error)
	Take() (*dnh.Whois, error)
	Last() (*dnh.Whois, error)
	Find() ([]*dnh.Whois, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dnh.Whois, err error)
	FindInBatches(result *[]*dnh.Whois, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dnh.Whois) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWhoisDo
	Assign(attrs ...field.AssignExpr) IWhoisDo
	Joins(fields ...field.RelationField) IWhoisDo
	Preload(fields ...field.RelationField) IWhoisDo
	FirstOrInit() (*dnh.Whois, error)
	FirstOrCreate() (*dnh.Whois, error)
	FindByPage(offset int, limit int) (result []*dnh.Whois, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWhoisDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w whoisDo) Debug() IWhoisDo {
	return w.withDO(w.DO.Debug())
}

func (w whoisDo) WithContext(ctx context.Context) IWhoisDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w whoisDo) ReadDB() IWhoisDo {
	return w.Clauses(dbresolver.Read)
}

func (w whoisDo) WriteDB() IWhoisDo {
	return w.Clauses(dbresolver.Write)
}

func (w whoisDo) Session(config *gorm.Session) IWhoisDo {
	return w.withDO(w.DO.Session(config))
}

func (w whoisDo) Clauses(conds ...clause.Expression) IWhoisDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w whoisDo) Returning(value interface{}, columns ...string) IWhoisDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w whoisDo) Not(conds ...gen.Condition) IWhoisDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w whoisDo) Or(conds ...gen.Condition) IWhoisDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w whoisDo) Select(conds ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w whoisDo) Where(conds ...gen.Condition) IWhoisDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w whoisDo) Order(conds ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w whoisDo) Distinct(cols ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w whoisDo) Omit(cols ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w whoisDo) Join(table schema.Tabler, on ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w whoisDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w whoisDo) RightJoin(table schema.Tabler, on ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w whoisDo) Group(cols ...field.Expr) IWhoisDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w whoisDo) Having(conds ...gen.Condition) IWhoisDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w whoisDo) Limit(limit int) IWhoisDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w whoisDo) Offset(offset int) IWhoisDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w whoisDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWhoisDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w whoisDo) Unscoped() IWhoisDo {
	return w.withDO(w.DO.Unscoped())
}

func (w whoisDo) Create(values ...*dnh.Whois) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w whoisDo) CreateInBatches(values []*dnh.Whois, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w whoisDo) Save(values ...*dnh.Whois) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w whoisDo) First() (*dnh.Whois, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Whois), nil
	}
}

func (w whoisDo) Take() (*dnh.Whois, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Whois), nil
	}
}

func (w whoisDo) Last() (*dnh.Whois, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Whois), nil
	}
}

func (w whoisDo) Find() ([]*dnh.Whois, error) {
	result, err := w.DO.Find()
	return result.([]*dnh.Whois), err
}

func (w whoisDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dnh.Whois, err error) {
	buf := make([]*dnh.Whois, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w whoisDo) FindInBatches(result *[]*dnh.Whois, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w whoisDo) Attrs(attrs ...field.AssignExpr) IWhoisDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w whoisDo) Assign(attrs ...field.AssignExpr) IWhoisDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w whoisDo) Joins(fields ...field.RelationField) IWhoisDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w whoisDo) Preload(fields ...field.RelationField) IWhoisDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w whoisDo) FirstOrInit() (*dnh.Whois, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Whois), nil
	}
}

func (w whoisDo) FirstOrCreate() (*dnh.Whois, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Whois), nil
	}
}

func (w whoisDo) FindByPage(offset int, limit int) (result []*dnh.Whois, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w whoisDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w whoisDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w whoisDo) Delete(models ...*dnh.Whois) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *whoisDo) withDO(do gen.Dao) *whoisDo {
	w.DO = *do.(*gen.DO)
	return w
}
