// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ice-bergtech/dnh/src/internal/models"
)

func newDNSEntry(db *gorm.DB, opts ...gen.DOOption) dNSEntry {
	_dNSEntry := dNSEntry{}

	_dNSEntry.dNSEntryDo.UseDB(db, opts...)
	_dNSEntry.dNSEntryDo.UseModel(&models.DNSEntry{})

	tableName := _dNSEntry.dNSEntryDo.TableName()
	_dNSEntry.ALL = field.NewAsterisk(tableName)
	_dNSEntry.ID = field.NewUint(tableName, "id")
	_dNSEntry.CreatedAt = field.NewTime(tableName, "created_at")
	_dNSEntry.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dNSEntry.DeletedAt = field.NewField(tableName, "deleted_at")
	_dNSEntry.Name = field.NewString(tableName, "name")
	_dNSEntry.Type = field.NewString(tableName, "type")
	_dNSEntry.Value = field.NewString(tableName, "value")
	_dNSEntry.TTL = field.NewInt(tableName, "ttl")
	_dNSEntry.TimeFist = field.NewTime(tableName, "time_fist")
	_dNSEntry.TimeLast = field.NewTime(tableName, "time_last")
	_dNSEntry.Tags = field.NewField(tableName, "tags")

	_dNSEntry.fillFieldMap()

	return _dNSEntry
}

type dNSEntry struct {
	dNSEntryDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Type      field.String
	Value     field.String
	TTL       field.Int
	TimeFist  field.Time
	TimeLast  field.Time
	Tags      field.Field

	fieldMap map[string]field.Expr
}

func (d dNSEntry) Table(newTableName string) *dNSEntry {
	d.dNSEntryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dNSEntry) As(alias string) *dNSEntry {
	d.dNSEntryDo.DO = *(d.dNSEntryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dNSEntry) updateTableName(table string) *dNSEntry {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Name = field.NewString(table, "name")
	d.Type = field.NewString(table, "type")
	d.Value = field.NewString(table, "value")
	d.TTL = field.NewInt(table, "ttl")
	d.TimeFist = field.NewTime(table, "time_fist")
	d.TimeLast = field.NewTime(table, "time_last")
	d.Tags = field.NewField(table, "tags")

	d.fillFieldMap()

	return d
}

func (d *dNSEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dNSEntry) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["name"] = d.Name
	d.fieldMap["type"] = d.Type
	d.fieldMap["value"] = d.Value
	d.fieldMap["ttl"] = d.TTL
	d.fieldMap["time_fist"] = d.TimeFist
	d.fieldMap["time_last"] = d.TimeLast
	d.fieldMap["tags"] = d.Tags
}

func (d dNSEntry) clone(db *gorm.DB) dNSEntry {
	d.dNSEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dNSEntry) replaceDB(db *gorm.DB) dNSEntry {
	d.dNSEntryDo.ReplaceDB(db)
	return d
}

type dNSEntryDo struct{ gen.DO }

type IDNSEntryDo interface {
	gen.SubQuery
	Debug() IDNSEntryDo
	WithContext(ctx context.Context) IDNSEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDNSEntryDo
	WriteDB() IDNSEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDNSEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDNSEntryDo
	Not(conds ...gen.Condition) IDNSEntryDo
	Or(conds ...gen.Condition) IDNSEntryDo
	Select(conds ...field.Expr) IDNSEntryDo
	Where(conds ...gen.Condition) IDNSEntryDo
	Order(conds ...field.Expr) IDNSEntryDo
	Distinct(cols ...field.Expr) IDNSEntryDo
	Omit(cols ...field.Expr) IDNSEntryDo
	Join(table schema.Tabler, on ...field.Expr) IDNSEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDNSEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDNSEntryDo
	Group(cols ...field.Expr) IDNSEntryDo
	Having(conds ...gen.Condition) IDNSEntryDo
	Limit(limit int) IDNSEntryDo
	Offset(offset int) IDNSEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDNSEntryDo
	Unscoped() IDNSEntryDo
	Create(values ...*models.DNSEntry) error
	CreateInBatches(values []*models.DNSEntry, batchSize int) error
	Save(values ...*models.DNSEntry) error
	First() (*models.DNSEntry, error)
	Take() (*models.DNSEntry, error)
	Last() (*models.DNSEntry, error)
	Find() ([]*models.DNSEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DNSEntry, err error)
	FindInBatches(result *[]*models.DNSEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DNSEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDNSEntryDo
	Assign(attrs ...field.AssignExpr) IDNSEntryDo
	Joins(fields ...field.RelationField) IDNSEntryDo
	Preload(fields ...field.RelationField) IDNSEntryDo
	FirstOrInit() (*models.DNSEntry, error)
	FirstOrCreate() (*models.DNSEntry, error)
	FindByPage(offset int, limit int) (result []*models.DNSEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDNSEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.DNSEntry, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (d dNSEntryDo) FilterWithNameAndRole(name string, role string) (result []models.DNSEntry, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM dns_entries WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d dNSEntryDo) Debug() IDNSEntryDo {
	return d.withDO(d.DO.Debug())
}

func (d dNSEntryDo) WithContext(ctx context.Context) IDNSEntryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dNSEntryDo) ReadDB() IDNSEntryDo {
	return d.Clauses(dbresolver.Read)
}

func (d dNSEntryDo) WriteDB() IDNSEntryDo {
	return d.Clauses(dbresolver.Write)
}

func (d dNSEntryDo) Session(config *gorm.Session) IDNSEntryDo {
	return d.withDO(d.DO.Session(config))
}

func (d dNSEntryDo) Clauses(conds ...clause.Expression) IDNSEntryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dNSEntryDo) Returning(value interface{}, columns ...string) IDNSEntryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dNSEntryDo) Not(conds ...gen.Condition) IDNSEntryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dNSEntryDo) Or(conds ...gen.Condition) IDNSEntryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dNSEntryDo) Select(conds ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dNSEntryDo) Where(conds ...gen.Condition) IDNSEntryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dNSEntryDo) Order(conds ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dNSEntryDo) Distinct(cols ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dNSEntryDo) Omit(cols ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dNSEntryDo) Join(table schema.Tabler, on ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dNSEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dNSEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dNSEntryDo) Group(cols ...field.Expr) IDNSEntryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dNSEntryDo) Having(conds ...gen.Condition) IDNSEntryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dNSEntryDo) Limit(limit int) IDNSEntryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dNSEntryDo) Offset(offset int) IDNSEntryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dNSEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDNSEntryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dNSEntryDo) Unscoped() IDNSEntryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dNSEntryDo) Create(values ...*models.DNSEntry) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dNSEntryDo) CreateInBatches(values []*models.DNSEntry, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dNSEntryDo) Save(values ...*models.DNSEntry) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dNSEntryDo) First() (*models.DNSEntry, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSEntry), nil
	}
}

func (d dNSEntryDo) Take() (*models.DNSEntry, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSEntry), nil
	}
}

func (d dNSEntryDo) Last() (*models.DNSEntry, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSEntry), nil
	}
}

func (d dNSEntryDo) Find() ([]*models.DNSEntry, error) {
	result, err := d.DO.Find()
	return result.([]*models.DNSEntry), err
}

func (d dNSEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DNSEntry, err error) {
	buf := make([]*models.DNSEntry, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dNSEntryDo) FindInBatches(result *[]*models.DNSEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dNSEntryDo) Attrs(attrs ...field.AssignExpr) IDNSEntryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dNSEntryDo) Assign(attrs ...field.AssignExpr) IDNSEntryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dNSEntryDo) Joins(fields ...field.RelationField) IDNSEntryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dNSEntryDo) Preload(fields ...field.RelationField) IDNSEntryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dNSEntryDo) FirstOrInit() (*models.DNSEntry, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSEntry), nil
	}
}

func (d dNSEntryDo) FirstOrCreate() (*models.DNSEntry, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSEntry), nil
	}
}

func (d dNSEntryDo) FindByPage(offset int, limit int) (result []*models.DNSEntry, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dNSEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dNSEntryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dNSEntryDo) Delete(models ...*models.DNSEntry) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dNSEntryDo) withDO(do gen.Dao) *dNSEntryDo {
	d.DO = *do.(*gen.DO)
	return d
}
