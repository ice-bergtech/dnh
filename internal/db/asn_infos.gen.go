// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ice-bergtech/dnh/src/internal/models"
)

func newASNInfo(db *gorm.DB, opts ...gen.DOOption) aSNInfo {
	_aSNInfo := aSNInfo{}

	_aSNInfo.aSNInfoDo.UseDB(db, opts...)
	_aSNInfo.aSNInfoDo.UseModel(&models.ASNInfo{})

	tableName := _aSNInfo.aSNInfoDo.TableName()
	_aSNInfo.ALL = field.NewAsterisk(tableName)
	_aSNInfo.ID = field.NewUint(tableName, "id")
	_aSNInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_aSNInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aSNInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_aSNInfo.ASN = field.NewInt(tableName, "asn")
	_aSNInfo.Country = field.NewString(tableName, "country")
	_aSNInfo.Registry = field.NewString(tableName, "registry")
	_aSNInfo.Tags = field.NewField(tableName, "tags")

	_aSNInfo.fillFieldMap()

	return _aSNInfo
}

type aSNInfo struct {
	aSNInfoDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ASN       field.Int
	Country   field.String
	Registry  field.String
	Tags      field.Field

	fieldMap map[string]field.Expr
}

func (a aSNInfo) Table(newTableName string) *aSNInfo {
	a.aSNInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aSNInfo) As(alias string) *aSNInfo {
	a.aSNInfoDo.DO = *(a.aSNInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aSNInfo) updateTableName(table string) *aSNInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.ASN = field.NewInt(table, "asn")
	a.Country = field.NewString(table, "country")
	a.Registry = field.NewString(table, "registry")
	a.Tags = field.NewField(table, "tags")

	a.fillFieldMap()

	return a
}

func (a *aSNInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aSNInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["asn"] = a.ASN
	a.fieldMap["country"] = a.Country
	a.fieldMap["registry"] = a.Registry
	a.fieldMap["tags"] = a.Tags
}

func (a aSNInfo) clone(db *gorm.DB) aSNInfo {
	a.aSNInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aSNInfo) replaceDB(db *gorm.DB) aSNInfo {
	a.aSNInfoDo.ReplaceDB(db)
	return a
}

type aSNInfoDo struct{ gen.DO }

type IASNInfoDo interface {
	gen.SubQuery
	Debug() IASNInfoDo
	WithContext(ctx context.Context) IASNInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IASNInfoDo
	WriteDB() IASNInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IASNInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IASNInfoDo
	Not(conds ...gen.Condition) IASNInfoDo
	Or(conds ...gen.Condition) IASNInfoDo
	Select(conds ...field.Expr) IASNInfoDo
	Where(conds ...gen.Condition) IASNInfoDo
	Order(conds ...field.Expr) IASNInfoDo
	Distinct(cols ...field.Expr) IASNInfoDo
	Omit(cols ...field.Expr) IASNInfoDo
	Join(table schema.Tabler, on ...field.Expr) IASNInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IASNInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IASNInfoDo
	Group(cols ...field.Expr) IASNInfoDo
	Having(conds ...gen.Condition) IASNInfoDo
	Limit(limit int) IASNInfoDo
	Offset(offset int) IASNInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IASNInfoDo
	Unscoped() IASNInfoDo
	Create(values ...*models.ASNInfo) error
	CreateInBatches(values []*models.ASNInfo, batchSize int) error
	Save(values ...*models.ASNInfo) error
	First() (*models.ASNInfo, error)
	Take() (*models.ASNInfo, error)
	Last() (*models.ASNInfo, error)
	Find() ([]*models.ASNInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ASNInfo, err error)
	FindInBatches(result *[]*models.ASNInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ASNInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IASNInfoDo
	Assign(attrs ...field.AssignExpr) IASNInfoDo
	Joins(fields ...field.RelationField) IASNInfoDo
	Preload(fields ...field.RelationField) IASNInfoDo
	FirstOrInit() (*models.ASNInfo, error)
	FirstOrCreate() (*models.ASNInfo, error)
	FindByPage(offset int, limit int) (result []*models.ASNInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IASNInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.ASNInfo, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (a aSNInfoDo) FilterWithNameAndRole(name string, role string) (result []models.ASNInfo, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM asn_infos WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a aSNInfoDo) Debug() IASNInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a aSNInfoDo) WithContext(ctx context.Context) IASNInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aSNInfoDo) ReadDB() IASNInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a aSNInfoDo) WriteDB() IASNInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a aSNInfoDo) Session(config *gorm.Session) IASNInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a aSNInfoDo) Clauses(conds ...clause.Expression) IASNInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aSNInfoDo) Returning(value interface{}, columns ...string) IASNInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aSNInfoDo) Not(conds ...gen.Condition) IASNInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aSNInfoDo) Or(conds ...gen.Condition) IASNInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aSNInfoDo) Select(conds ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aSNInfoDo) Where(conds ...gen.Condition) IASNInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aSNInfoDo) Order(conds ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aSNInfoDo) Distinct(cols ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aSNInfoDo) Omit(cols ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aSNInfoDo) Join(table schema.Tabler, on ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aSNInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aSNInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aSNInfoDo) Group(cols ...field.Expr) IASNInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aSNInfoDo) Having(conds ...gen.Condition) IASNInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aSNInfoDo) Limit(limit int) IASNInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aSNInfoDo) Offset(offset int) IASNInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aSNInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IASNInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aSNInfoDo) Unscoped() IASNInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aSNInfoDo) Create(values ...*models.ASNInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aSNInfoDo) CreateInBatches(values []*models.ASNInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aSNInfoDo) Save(values ...*models.ASNInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aSNInfoDo) First() (*models.ASNInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ASNInfo), nil
	}
}

func (a aSNInfoDo) Take() (*models.ASNInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ASNInfo), nil
	}
}

func (a aSNInfoDo) Last() (*models.ASNInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ASNInfo), nil
	}
}

func (a aSNInfoDo) Find() ([]*models.ASNInfo, error) {
	result, err := a.DO.Find()
	return result.([]*models.ASNInfo), err
}

func (a aSNInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ASNInfo, err error) {
	buf := make([]*models.ASNInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aSNInfoDo) FindInBatches(result *[]*models.ASNInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aSNInfoDo) Attrs(attrs ...field.AssignExpr) IASNInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aSNInfoDo) Assign(attrs ...field.AssignExpr) IASNInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aSNInfoDo) Joins(fields ...field.RelationField) IASNInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aSNInfoDo) Preload(fields ...field.RelationField) IASNInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aSNInfoDo) FirstOrInit() (*models.ASNInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ASNInfo), nil
	}
}

func (a aSNInfoDo) FirstOrCreate() (*models.ASNInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ASNInfo), nil
	}
}

func (a aSNInfoDo) FindByPage(offset int, limit int) (result []*models.ASNInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aSNInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aSNInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aSNInfoDo) Delete(models ...*models.ASNInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aSNInfoDo) withDO(do gen.Dao) *aSNInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
