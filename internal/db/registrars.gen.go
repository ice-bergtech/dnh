// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	dnh "github.com/ice-bergtech/dnh/src/internal/lib"
)

func newRegistrar(db *gorm.DB, opts ...gen.DOOption) registrar {
	_registrar := registrar{}

	_registrar.registrarDo.UseDB(db, opts...)
	_registrar.registrarDo.UseModel(&dnh.Registrar{})

	tableName := _registrar.registrarDo.TableName()
	_registrar.ALL = field.NewAsterisk(tableName)
	_registrar.ID = field.NewUint(tableName, "id")
	_registrar.CreatedAt = field.NewTime(tableName, "created_at")
	_registrar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_registrar.DeletedAt = field.NewField(tableName, "deleted_at")
	_registrar.Name = field.NewString(tableName, "name")
	_registrar.URL = field.NewString(tableName, "url")
	_registrar.CountryCode = field.NewString(tableName, "country_code")
	_registrar.Phone = field.NewString(tableName, "phone")
	_registrar.Fax = field.NewString(tableName, "fax")
	_registrar.Timestamp = field.NewTime(tableName, "timestamp")
	_registrar.Tags = field.NewField(tableName, "tags")
	_registrar.Address = registrarManyToManyAddress{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Address", "dnh.IPAddress"),
		Advertisers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Address.Advertisers", "dnh.ASNInfo"),
		},
	}

	_registrar.fillFieldMap()

	return _registrar
}

type registrar struct {
	registrarDo registrarDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	URL         field.String
	CountryCode field.String
	Phone       field.String
	Fax         field.String
	Timestamp   field.Time
	Tags        field.Field
	Address     registrarManyToManyAddress

	fieldMap map[string]field.Expr
}

func (r registrar) Table(newTableName string) *registrar {
	r.registrarDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registrar) As(alias string) *registrar {
	r.registrarDo.DO = *(r.registrarDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registrar) updateTableName(table string) *registrar {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Name = field.NewString(table, "name")
	r.URL = field.NewString(table, "url")
	r.CountryCode = field.NewString(table, "country_code")
	r.Phone = field.NewString(table, "phone")
	r.Fax = field.NewString(table, "fax")
	r.Timestamp = field.NewTime(table, "timestamp")
	r.Tags = field.NewField(table, "tags")

	r.fillFieldMap()

	return r
}

func (r *registrar) WithContext(ctx context.Context) IRegistrarDo {
	return r.registrarDo.WithContext(ctx)
}

func (r registrar) TableName() string { return r.registrarDo.TableName() }

func (r registrar) Alias() string { return r.registrarDo.Alias() }

func (r registrar) Columns(cols ...field.Expr) gen.Columns { return r.registrarDo.Columns(cols...) }

func (r *registrar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registrar) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["url"] = r.URL
	r.fieldMap["country_code"] = r.CountryCode
	r.fieldMap["phone"] = r.Phone
	r.fieldMap["fax"] = r.Fax
	r.fieldMap["timestamp"] = r.Timestamp
	r.fieldMap["tags"] = r.Tags

}

func (r registrar) clone(db *gorm.DB) registrar {
	r.registrarDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registrar) replaceDB(db *gorm.DB) registrar {
	r.registrarDo.ReplaceDB(db)
	return r
}

type registrarManyToManyAddress struct {
	db *gorm.DB

	field.RelationField

	Advertisers struct {
		field.RelationField
	}
}

func (a registrarManyToManyAddress) Where(conds ...field.Expr) *registrarManyToManyAddress {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a registrarManyToManyAddress) WithContext(ctx context.Context) *registrarManyToManyAddress {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a registrarManyToManyAddress) Session(session *gorm.Session) *registrarManyToManyAddress {
	a.db = a.db.Session(session)
	return &a
}

func (a registrarManyToManyAddress) Model(m *dnh.Registrar) *registrarManyToManyAddressTx {
	return &registrarManyToManyAddressTx{a.db.Model(m).Association(a.Name())}
}

type registrarManyToManyAddressTx struct{ tx *gorm.Association }

func (a registrarManyToManyAddressTx) Find() (result []*dnh.IPAddress, err error) {
	return result, a.tx.Find(&result)
}

func (a registrarManyToManyAddressTx) Append(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a registrarManyToManyAddressTx) Replace(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a registrarManyToManyAddressTx) Delete(values ...*dnh.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a registrarManyToManyAddressTx) Clear() error {
	return a.tx.Clear()
}

func (a registrarManyToManyAddressTx) Count() int64 {
	return a.tx.Count()
}

type registrarDo struct{ gen.DO }

type IRegistrarDo interface {
	gen.SubQuery
	Debug() IRegistrarDo
	WithContext(ctx context.Context) IRegistrarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegistrarDo
	WriteDB() IRegistrarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegistrarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegistrarDo
	Not(conds ...gen.Condition) IRegistrarDo
	Or(conds ...gen.Condition) IRegistrarDo
	Select(conds ...field.Expr) IRegistrarDo
	Where(conds ...gen.Condition) IRegistrarDo
	Order(conds ...field.Expr) IRegistrarDo
	Distinct(cols ...field.Expr) IRegistrarDo
	Omit(cols ...field.Expr) IRegistrarDo
	Join(table schema.Tabler, on ...field.Expr) IRegistrarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegistrarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegistrarDo
	Group(cols ...field.Expr) IRegistrarDo
	Having(conds ...gen.Condition) IRegistrarDo
	Limit(limit int) IRegistrarDo
	Offset(offset int) IRegistrarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistrarDo
	Unscoped() IRegistrarDo
	Create(values ...*dnh.Registrar) error
	CreateInBatches(values []*dnh.Registrar, batchSize int) error
	Save(values ...*dnh.Registrar) error
	First() (*dnh.Registrar, error)
	Take() (*dnh.Registrar, error)
	Last() (*dnh.Registrar, error)
	Find() ([]*dnh.Registrar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dnh.Registrar, err error)
	FindInBatches(result *[]*dnh.Registrar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dnh.Registrar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegistrarDo
	Assign(attrs ...field.AssignExpr) IRegistrarDo
	Joins(fields ...field.RelationField) IRegistrarDo
	Preload(fields ...field.RelationField) IRegistrarDo
	FirstOrInit() (*dnh.Registrar, error)
	FirstOrCreate() (*dnh.Registrar, error)
	FindByPage(offset int, limit int) (result []*dnh.Registrar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegistrarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r registrarDo) Debug() IRegistrarDo {
	return r.withDO(r.DO.Debug())
}

func (r registrarDo) WithContext(ctx context.Context) IRegistrarDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registrarDo) ReadDB() IRegistrarDo {
	return r.Clauses(dbresolver.Read)
}

func (r registrarDo) WriteDB() IRegistrarDo {
	return r.Clauses(dbresolver.Write)
}

func (r registrarDo) Session(config *gorm.Session) IRegistrarDo {
	return r.withDO(r.DO.Session(config))
}

func (r registrarDo) Clauses(conds ...clause.Expression) IRegistrarDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registrarDo) Returning(value interface{}, columns ...string) IRegistrarDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registrarDo) Not(conds ...gen.Condition) IRegistrarDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registrarDo) Or(conds ...gen.Condition) IRegistrarDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registrarDo) Select(conds ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registrarDo) Where(conds ...gen.Condition) IRegistrarDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registrarDo) Order(conds ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registrarDo) Distinct(cols ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registrarDo) Omit(cols ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registrarDo) Join(table schema.Tabler, on ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registrarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registrarDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registrarDo) Group(cols ...field.Expr) IRegistrarDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registrarDo) Having(conds ...gen.Condition) IRegistrarDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registrarDo) Limit(limit int) IRegistrarDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registrarDo) Offset(offset int) IRegistrarDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registrarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistrarDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registrarDo) Unscoped() IRegistrarDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registrarDo) Create(values ...*dnh.Registrar) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registrarDo) CreateInBatches(values []*dnh.Registrar, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registrarDo) Save(values ...*dnh.Registrar) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registrarDo) First() (*dnh.Registrar, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Registrar), nil
	}
}

func (r registrarDo) Take() (*dnh.Registrar, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Registrar), nil
	}
}

func (r registrarDo) Last() (*dnh.Registrar, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Registrar), nil
	}
}

func (r registrarDo) Find() ([]*dnh.Registrar, error) {
	result, err := r.DO.Find()
	return result.([]*dnh.Registrar), err
}

func (r registrarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dnh.Registrar, err error) {
	buf := make([]*dnh.Registrar, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registrarDo) FindInBatches(result *[]*dnh.Registrar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registrarDo) Attrs(attrs ...field.AssignExpr) IRegistrarDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registrarDo) Assign(attrs ...field.AssignExpr) IRegistrarDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registrarDo) Joins(fields ...field.RelationField) IRegistrarDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registrarDo) Preload(fields ...field.RelationField) IRegistrarDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registrarDo) FirstOrInit() (*dnh.Registrar, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Registrar), nil
	}
}

func (r registrarDo) FirstOrCreate() (*dnh.Registrar, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dnh.Registrar), nil
	}
}

func (r registrarDo) FindByPage(offset int, limit int) (result []*dnh.Registrar, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registrarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registrarDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registrarDo) Delete(models ...*dnh.Registrar) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registrarDo) withDO(do gen.Dao) *registrarDo {
	r.DO = *do.(*gen.DO)
	return r
}
