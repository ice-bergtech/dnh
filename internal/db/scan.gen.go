// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ice-bergtech/dnh/src/internal/models"
)

func newScan(db *gorm.DB, opts ...gen.DOOption) scan {
	_scan := scan{}

	_scan.scanDo.UseDB(db, opts...)
	_scan.scanDo.UseModel(&models.Scan{})

	tableName := _scan.scanDo.TableName()
	_scan.ALL = field.NewAsterisk(tableName)
	_scan.ID = field.NewUint(tableName, "id")
	_scan.CreatedAt = field.NewTime(tableName, "created_at")
	_scan.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scan.DeletedAt = field.NewField(tableName, "deleted_at")
	_scan.ScanID = field.NewString(tableName, "scan_id")
	_scan.Timestamp = field.NewTime(tableName, "timestamp")
	_scan.Results = field.NewField(tableName, "results")

	_scan.fillFieldMap()

	return _scan
}

type scan struct {
	scanDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ScanID    field.String
	Timestamp field.Time
	Results   field.Field

	fieldMap map[string]field.Expr
}

func (s scan) Table(newTableName string) *scan {
	s.scanDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scan) As(alias string) *scan {
	s.scanDo.DO = *(s.scanDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scan) updateTableName(table string) *scan {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.ScanID = field.NewString(table, "scan_id")
	s.Timestamp = field.NewTime(table, "timestamp")
	s.Results = field.NewField(table, "results")

	s.fillFieldMap()

	return s
}

func (s *scan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scan) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["scan_id"] = s.ScanID
	s.fieldMap["timestamp"] = s.Timestamp
	s.fieldMap["results"] = s.Results
}

func (s scan) clone(db *gorm.DB) scan {
	s.scanDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scan) replaceDB(db *gorm.DB) scan {
	s.scanDo.ReplaceDB(db)
	return s
}

type scanDo struct{ gen.DO }

type IScanDo interface {
	gen.SubQuery
	Debug() IScanDo
	WithContext(ctx context.Context) IScanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScanDo
	WriteDB() IScanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScanDo
	Not(conds ...gen.Condition) IScanDo
	Or(conds ...gen.Condition) IScanDo
	Select(conds ...field.Expr) IScanDo
	Where(conds ...gen.Condition) IScanDo
	Order(conds ...field.Expr) IScanDo
	Distinct(cols ...field.Expr) IScanDo
	Omit(cols ...field.Expr) IScanDo
	Join(table schema.Tabler, on ...field.Expr) IScanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScanDo
	Group(cols ...field.Expr) IScanDo
	Having(conds ...gen.Condition) IScanDo
	Limit(limit int) IScanDo
	Offset(offset int) IScanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScanDo
	Unscoped() IScanDo
	Create(values ...*models.Scan) error
	CreateInBatches(values []*models.Scan, batchSize int) error
	Save(values ...*models.Scan) error
	First() (*models.Scan, error)
	Take() (*models.Scan, error)
	Last() (*models.Scan, error)
	Find() ([]*models.Scan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Scan, err error)
	FindInBatches(result *[]*models.Scan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Scan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScanDo
	Assign(attrs ...field.AssignExpr) IScanDo
	Joins(fields ...field.RelationField) IScanDo
	Preload(fields ...field.RelationField) IScanDo
	FirstOrInit() (*models.Scan, error)
	FirstOrCreate() (*models.Scan, error)
	FindByPage(offset int, limit int) (result []*models.Scan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.Scan, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (s scanDo) FilterWithNameAndRole(name string, role string) (result []models.Scan, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM scan WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s scanDo) Debug() IScanDo {
	return s.withDO(s.DO.Debug())
}

func (s scanDo) WithContext(ctx context.Context) IScanDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scanDo) ReadDB() IScanDo {
	return s.Clauses(dbresolver.Read)
}

func (s scanDo) WriteDB() IScanDo {
	return s.Clauses(dbresolver.Write)
}

func (s scanDo) Session(config *gorm.Session) IScanDo {
	return s.withDO(s.DO.Session(config))
}

func (s scanDo) Clauses(conds ...clause.Expression) IScanDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scanDo) Returning(value interface{}, columns ...string) IScanDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scanDo) Not(conds ...gen.Condition) IScanDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scanDo) Or(conds ...gen.Condition) IScanDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scanDo) Select(conds ...field.Expr) IScanDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scanDo) Where(conds ...gen.Condition) IScanDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scanDo) Order(conds ...field.Expr) IScanDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scanDo) Distinct(cols ...field.Expr) IScanDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scanDo) Omit(cols ...field.Expr) IScanDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scanDo) Join(table schema.Tabler, on ...field.Expr) IScanDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScanDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scanDo) RightJoin(table schema.Tabler, on ...field.Expr) IScanDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scanDo) Group(cols ...field.Expr) IScanDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scanDo) Having(conds ...gen.Condition) IScanDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scanDo) Limit(limit int) IScanDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scanDo) Offset(offset int) IScanDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScanDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scanDo) Unscoped() IScanDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scanDo) Create(values ...*models.Scan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scanDo) CreateInBatches(values []*models.Scan, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scanDo) Save(values ...*models.Scan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scanDo) First() (*models.Scan, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Scan), nil
	}
}

func (s scanDo) Take() (*models.Scan, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Scan), nil
	}
}

func (s scanDo) Last() (*models.Scan, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Scan), nil
	}
}

func (s scanDo) Find() ([]*models.Scan, error) {
	result, err := s.DO.Find()
	return result.([]*models.Scan), err
}

func (s scanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Scan, err error) {
	buf := make([]*models.Scan, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scanDo) FindInBatches(result *[]*models.Scan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scanDo) Attrs(attrs ...field.AssignExpr) IScanDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scanDo) Assign(attrs ...field.AssignExpr) IScanDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scanDo) Joins(fields ...field.RelationField) IScanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scanDo) Preload(fields ...field.RelationField) IScanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scanDo) FirstOrInit() (*models.Scan, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Scan), nil
	}
}

func (s scanDo) FirstOrCreate() (*models.Scan, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Scan), nil
	}
}

func (s scanDo) FindByPage(offset int, limit int) (result []*models.Scan, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scanDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scanDo) Delete(models ...*models.Scan) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scanDo) withDO(do gen.Dao) *scanDo {
	s.DO = *do.(*gen.DO)
	return s
}
