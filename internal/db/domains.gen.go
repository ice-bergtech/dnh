// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ice-bergtech/dnh/src/internal/models"
)

func newDomain(db *gorm.DB, opts ...gen.DOOption) domain {
	_domain := domain{}

	_domain.domainDo.UseDB(db, opts...)
	_domain.domainDo.UseModel(&models.Domain{})

	tableName := _domain.domainDo.TableName()
	_domain.ALL = field.NewAsterisk(tableName)
	_domain.ID = field.NewUint(tableName, "id")
	_domain.CreatedAt = field.NewTime(tableName, "created_at")
	_domain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_domain.DeletedAt = field.NewField(tableName, "deleted_at")
	_domain.Name = field.NewString(tableName, "name")
	_domain.Parent = field.NewString(tableName, "parent")
	_domain.TimeFist = field.NewTime(tableName, "time_fist")
	_domain.TimeLast = field.NewTime(tableName, "time_last")
	_domain.Tags = field.NewField(tableName, "tags")
	_domain.Records = domainManyToManyRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Records", "models.DNSEntry"),
	}

	_domain.Paths = domainManyToManyPaths{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Paths", "models.Path"),
	}

	_domain.Addresses = domainManyToManyAddresses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Addresses", "models.IPAddress"),
		Advertisers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Addresses.Advertisers", "models.ASNInfo"),
		},
	}

	_domain.Nameservers = domainManyToManyNameservers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Nameservers", "models.Nameserver"),
		IP: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Nameservers.IP", "models.IPAddress"),
		},
	}

	_domain.fillFieldMap()

	return _domain
}

type domain struct {
	domainDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Parent    field.String
	TimeFist  field.Time
	TimeLast  field.Time
	Tags      field.Field
	Records   domainManyToManyRecords

	Paths domainManyToManyPaths

	Addresses domainManyToManyAddresses

	Nameservers domainManyToManyNameservers

	fieldMap map[string]field.Expr
}

func (d domain) Table(newTableName string) *domain {
	d.domainDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domain) As(alias string) *domain {
	d.domainDo.DO = *(d.domainDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domain) updateTableName(table string) *domain {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Name = field.NewString(table, "name")
	d.Parent = field.NewString(table, "parent")
	d.TimeFist = field.NewTime(table, "time_fist")
	d.TimeLast = field.NewTime(table, "time_last")
	d.Tags = field.NewField(table, "tags")

	d.fillFieldMap()

	return d
}

func (d *domain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domain) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["name"] = d.Name
	d.fieldMap["parent"] = d.Parent
	d.fieldMap["time_fist"] = d.TimeFist
	d.fieldMap["time_last"] = d.TimeLast
	d.fieldMap["tags"] = d.Tags

}

func (d domain) clone(db *gorm.DB) domain {
	d.domainDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domain) replaceDB(db *gorm.DB) domain {
	d.domainDo.ReplaceDB(db)
	return d
}

type domainManyToManyRecords struct {
	db *gorm.DB

	field.RelationField
}

func (a domainManyToManyRecords) Where(conds ...field.Expr) *domainManyToManyRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a domainManyToManyRecords) WithContext(ctx context.Context) *domainManyToManyRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a domainManyToManyRecords) Session(session *gorm.Session) *domainManyToManyRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a domainManyToManyRecords) Model(m *models.Domain) *domainManyToManyRecordsTx {
	return &domainManyToManyRecordsTx{a.db.Model(m).Association(a.Name())}
}

type domainManyToManyRecordsTx struct{ tx *gorm.Association }

func (a domainManyToManyRecordsTx) Find() (result []*models.DNSEntry, err error) {
	return result, a.tx.Find(&result)
}

func (a domainManyToManyRecordsTx) Append(values ...*models.DNSEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a domainManyToManyRecordsTx) Replace(values ...*models.DNSEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a domainManyToManyRecordsTx) Delete(values ...*models.DNSEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a domainManyToManyRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a domainManyToManyRecordsTx) Count() int64 {
	return a.tx.Count()
}

type domainManyToManyPaths struct {
	db *gorm.DB

	field.RelationField
}

func (a domainManyToManyPaths) Where(conds ...field.Expr) *domainManyToManyPaths {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a domainManyToManyPaths) WithContext(ctx context.Context) *domainManyToManyPaths {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a domainManyToManyPaths) Session(session *gorm.Session) *domainManyToManyPaths {
	a.db = a.db.Session(session)
	return &a
}

func (a domainManyToManyPaths) Model(m *models.Domain) *domainManyToManyPathsTx {
	return &domainManyToManyPathsTx{a.db.Model(m).Association(a.Name())}
}

type domainManyToManyPathsTx struct{ tx *gorm.Association }

func (a domainManyToManyPathsTx) Find() (result []*models.Path, err error) {
	return result, a.tx.Find(&result)
}

func (a domainManyToManyPathsTx) Append(values ...*models.Path) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a domainManyToManyPathsTx) Replace(values ...*models.Path) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a domainManyToManyPathsTx) Delete(values ...*models.Path) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a domainManyToManyPathsTx) Clear() error {
	return a.tx.Clear()
}

func (a domainManyToManyPathsTx) Count() int64 {
	return a.tx.Count()
}

type domainManyToManyAddresses struct {
	db *gorm.DB

	field.RelationField

	Advertisers struct {
		field.RelationField
	}
}

func (a domainManyToManyAddresses) Where(conds ...field.Expr) *domainManyToManyAddresses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a domainManyToManyAddresses) WithContext(ctx context.Context) *domainManyToManyAddresses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a domainManyToManyAddresses) Session(session *gorm.Session) *domainManyToManyAddresses {
	a.db = a.db.Session(session)
	return &a
}

func (a domainManyToManyAddresses) Model(m *models.Domain) *domainManyToManyAddressesTx {
	return &domainManyToManyAddressesTx{a.db.Model(m).Association(a.Name())}
}

type domainManyToManyAddressesTx struct{ tx *gorm.Association }

func (a domainManyToManyAddressesTx) Find() (result []*models.IPAddress, err error) {
	return result, a.tx.Find(&result)
}

func (a domainManyToManyAddressesTx) Append(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a domainManyToManyAddressesTx) Replace(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a domainManyToManyAddressesTx) Delete(values ...*models.IPAddress) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a domainManyToManyAddressesTx) Clear() error {
	return a.tx.Clear()
}

func (a domainManyToManyAddressesTx) Count() int64 {
	return a.tx.Count()
}

type domainManyToManyNameservers struct {
	db *gorm.DB

	field.RelationField

	IP struct {
		field.RelationField
	}
}

func (a domainManyToManyNameservers) Where(conds ...field.Expr) *domainManyToManyNameservers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a domainManyToManyNameservers) WithContext(ctx context.Context) *domainManyToManyNameservers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a domainManyToManyNameservers) Session(session *gorm.Session) *domainManyToManyNameservers {
	a.db = a.db.Session(session)
	return &a
}

func (a domainManyToManyNameservers) Model(m *models.Domain) *domainManyToManyNameserversTx {
	return &domainManyToManyNameserversTx{a.db.Model(m).Association(a.Name())}
}

type domainManyToManyNameserversTx struct{ tx *gorm.Association }

func (a domainManyToManyNameserversTx) Find() (result []*models.Nameserver, err error) {
	return result, a.tx.Find(&result)
}

func (a domainManyToManyNameserversTx) Append(values ...*models.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a domainManyToManyNameserversTx) Replace(values ...*models.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a domainManyToManyNameserversTx) Delete(values ...*models.Nameserver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a domainManyToManyNameserversTx) Clear() error {
	return a.tx.Clear()
}

func (a domainManyToManyNameserversTx) Count() int64 {
	return a.tx.Count()
}

type domainDo struct{ gen.DO }

type IDomainDo interface {
	gen.SubQuery
	Debug() IDomainDo
	WithContext(ctx context.Context) IDomainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDomainDo
	WriteDB() IDomainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDomainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDomainDo
	Not(conds ...gen.Condition) IDomainDo
	Or(conds ...gen.Condition) IDomainDo
	Select(conds ...field.Expr) IDomainDo
	Where(conds ...gen.Condition) IDomainDo
	Order(conds ...field.Expr) IDomainDo
	Distinct(cols ...field.Expr) IDomainDo
	Omit(cols ...field.Expr) IDomainDo
	Join(table schema.Tabler, on ...field.Expr) IDomainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDomainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDomainDo
	Group(cols ...field.Expr) IDomainDo
	Having(conds ...gen.Condition) IDomainDo
	Limit(limit int) IDomainDo
	Offset(offset int) IDomainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainDo
	Unscoped() IDomainDo
	Create(values ...*models.Domain) error
	CreateInBatches(values []*models.Domain, batchSize int) error
	Save(values ...*models.Domain) error
	First() (*models.Domain, error)
	Take() (*models.Domain, error)
	Last() (*models.Domain, error)
	Find() ([]*models.Domain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Domain, err error)
	FindInBatches(result *[]*models.Domain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Domain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDomainDo
	Assign(attrs ...field.AssignExpr) IDomainDo
	Joins(fields ...field.RelationField) IDomainDo
	Preload(fields ...field.RelationField) IDomainDo
	FirstOrInit() (*models.Domain, error)
	FirstOrCreate() (*models.Domain, error)
	FindByPage(offset int, limit int) (result []*models.Domain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDomainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.Domain, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (d domainDo) FilterWithNameAndRole(name string, role string) (result []models.Domain, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM domains WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d domainDo) Debug() IDomainDo {
	return d.withDO(d.DO.Debug())
}

func (d domainDo) WithContext(ctx context.Context) IDomainDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainDo) ReadDB() IDomainDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainDo) WriteDB() IDomainDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainDo) Session(config *gorm.Session) IDomainDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainDo) Clauses(conds ...clause.Expression) IDomainDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainDo) Returning(value interface{}, columns ...string) IDomainDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainDo) Not(conds ...gen.Condition) IDomainDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainDo) Or(conds ...gen.Condition) IDomainDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainDo) Select(conds ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainDo) Where(conds ...gen.Condition) IDomainDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainDo) Order(conds ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainDo) Distinct(cols ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainDo) Omit(cols ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainDo) Join(table schema.Tabler, on ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDomainDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainDo) RightJoin(table schema.Tabler, on ...field.Expr) IDomainDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainDo) Group(cols ...field.Expr) IDomainDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainDo) Having(conds ...gen.Condition) IDomainDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainDo) Limit(limit int) IDomainDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainDo) Offset(offset int) IDomainDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainDo) Unscoped() IDomainDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainDo) Create(values ...*models.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainDo) CreateInBatches(values []*models.Domain, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainDo) Save(values ...*models.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainDo) First() (*models.Domain, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Domain), nil
	}
}

func (d domainDo) Take() (*models.Domain, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Domain), nil
	}
}

func (d domainDo) Last() (*models.Domain, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Domain), nil
	}
}

func (d domainDo) Find() ([]*models.Domain, error) {
	result, err := d.DO.Find()
	return result.([]*models.Domain), err
}

func (d domainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Domain, err error) {
	buf := make([]*models.Domain, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainDo) FindInBatches(result *[]*models.Domain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainDo) Attrs(attrs ...field.AssignExpr) IDomainDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainDo) Assign(attrs ...field.AssignExpr) IDomainDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainDo) Joins(fields ...field.RelationField) IDomainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainDo) Preload(fields ...field.RelationField) IDomainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainDo) FirstOrInit() (*models.Domain, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Domain), nil
	}
}

func (d domainDo) FirstOrCreate() (*models.Domain, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Domain), nil
	}
}

func (d domainDo) FindByPage(offset int, limit int) (result []*models.Domain, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainDo) Delete(models ...*models.Domain) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainDo) withDO(do gen.Dao) *domainDo {
	d.DO = *do.(*gen.DO)
	return d
}
