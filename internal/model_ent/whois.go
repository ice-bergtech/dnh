// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// Whois is the model entity for the Whois schema.
type Whois struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// Server holds the value of the "server" field.
	Server string `json:"server,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw string `json:"raw,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated time.Time `json:"updated,omitempty"`
	// TimeFirst holds the value of the "time_first" field.
	TimeFirst time.Time `json:"time_first,omitempty"`
	// TimeLast holds the value of the "time_last" field.
	TimeLast time.Time `json:"time_last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WhoisQuery when eager-loading is set.
	Edges         WhoisEdges `json:"edges"`
	example_whois *string
	selectValues  sql.SelectValues
}

// WhoisEdges holds the relations/edges for other nodes in the graph.
type WhoisEdges struct {
	// Iprange holds the value of the iprange edge.
	Iprange []*IPAddress `json:"iprange,omitempty"`
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Asn holds the value of the asn edge.
	Asn []*ASNInfo `json:"asn,omitempty"`
	// Registrar holds the value of the registrar edge.
	Registrar []*Registrar `json:"registrar,omitempty"`
	// Nameserver holds the value of the nameserver edge.
	Nameserver []*Nameserver `json:"nameserver,omitempty"`
	// Scan holds the value of the scan edge.
	Scan []*ScanJob `json:"scan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// IprangeOrErr returns the Iprange value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) IprangeOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[0] {
		return e.Iprange, nil
	}
	return nil, &NotLoadedError{edge: "iprange"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[1] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// AsnOrErr returns the Asn value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) AsnOrErr() ([]*ASNInfo, error) {
	if e.loadedTypes[2] {
		return e.Asn, nil
	}
	return nil, &NotLoadedError{edge: "asn"}
}

// RegistrarOrErr returns the Registrar value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) RegistrarOrErr() ([]*Registrar, error) {
	if e.loadedTypes[3] {
		return e.Registrar, nil
	}
	return nil, &NotLoadedError{edge: "registrar"}
}

// NameserverOrErr returns the Nameserver value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) NameserverOrErr() ([]*Nameserver, error) {
	if e.loadedTypes[4] {
		return e.Nameserver, nil
	}
	return nil, &NotLoadedError{edge: "nameserver"}
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading.
func (e WhoisEdges) ScanOrErr() ([]*ScanJob, error) {
	if e.loadedTypes[5] {
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Whois) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case whois.FieldID:
			values[i] = new(sql.NullInt64)
		case whois.FieldQuery, whois.FieldServer, whois.FieldRaw, whois.FieldCountry:
			values[i] = new(sql.NullString)
		case whois.FieldCreated, whois.FieldUpdated, whois.FieldTimeFirst, whois.FieldTimeLast:
			values[i] = new(sql.NullTime)
		case whois.ForeignKeys[0]: // example_whois
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Whois fields.
func (w *Whois) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case whois.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case whois.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				w.Query = value.String
			}
		case whois.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				w.Server = value.String
			}
		case whois.FieldRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value.Valid {
				w.Raw = value.String
			}
		case whois.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				w.Country = value.String
			}
		case whois.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				w.Created = value.Time
			}
		case whois.FieldUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				w.Updated = value.Time
			}
		case whois.FieldTimeFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_first", values[i])
			} else if value.Valid {
				w.TimeFirst = value.Time
			}
		case whois.FieldTimeLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_last", values[i])
			} else if value.Valid {
				w.TimeLast = value.Time
			}
		case whois.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field example_whois", values[i])
			} else if value.Valid {
				w.example_whois = new(string)
				*w.example_whois = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Whois.
// This includes values selected through modifiers, order, etc.
func (w *Whois) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryIprange queries the "iprange" edge of the Whois entity.
func (w *Whois) QueryIprange() *IPAddressQuery {
	return NewWhoisClient(w.config).QueryIprange(w)
}

// QueryDomain queries the "domain" edge of the Whois entity.
func (w *Whois) QueryDomain() *DomainQuery {
	return NewWhoisClient(w.config).QueryDomain(w)
}

// QueryAsn queries the "asn" edge of the Whois entity.
func (w *Whois) QueryAsn() *ASNInfoQuery {
	return NewWhoisClient(w.config).QueryAsn(w)
}

// QueryRegistrar queries the "registrar" edge of the Whois entity.
func (w *Whois) QueryRegistrar() *RegistrarQuery {
	return NewWhoisClient(w.config).QueryRegistrar(w)
}

// QueryNameserver queries the "nameserver" edge of the Whois entity.
func (w *Whois) QueryNameserver() *NameserverQuery {
	return NewWhoisClient(w.config).QueryNameserver(w)
}

// QueryScan queries the "scan" edge of the Whois entity.
func (w *Whois) QueryScan() *ScanJobQuery {
	return NewWhoisClient(w.config).QueryScan(w)
}

// Update returns a builder for updating this Whois.
// Note that you need to call Whois.Unwrap() before calling this method if this Whois
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Whois) Update() *WhoisUpdateOne {
	return NewWhoisClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Whois entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Whois) Unwrap() *Whois {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Whois is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Whois) String() string {
	var builder strings.Builder
	builder.WriteString("Whois(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("query=")
	builder.WriteString(w.Query)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(w.Server)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(w.Raw)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(w.Country)
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(w.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated=")
	builder.WriteString(w.Updated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_first=")
	builder.WriteString(w.TimeFirst.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_last=")
	builder.WriteString(w.TimeLast.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WhoisSlice is a parsable slice of Whois.
type WhoisSlice []*Whois
