// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
)

// PathUpdate is the builder for updating Path entities.
type PathUpdate struct {
	config
	hooks    []Hook
	mutation *PathMutation
}

// Where appends a list predicates to the PathUpdate builder.
func (pu *PathUpdate) Where(ps ...predicate.Path) *PathUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPath sets the "path" field.
func (pu *PathUpdate) SetPath(s string) *PathUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *PathUpdate) SetNillablePath(s *string) *PathUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (pu *PathUpdate) AddDomainIDs(ids ...int) *PathUpdate {
	pu.mutation.AddDomainIDs(ids...)
	return pu
}

// AddDomain adds the "domain" edges to the Domain entity.
func (pu *PathUpdate) AddDomain(d ...*Domain) *PathUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDomainIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (pu *PathUpdate) AddScanIDs(ids ...int) *PathUpdate {
	pu.mutation.AddScanIDs(ids...)
	return pu
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (pu *PathUpdate) AddScan(s ...*ScanJob) *PathUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddScanIDs(ids...)
}

// Mutation returns the PathMutation object of the builder.
func (pu *PathUpdate) Mutation() *PathMutation {
	return pu.mutation
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (pu *PathUpdate) ClearDomain() *PathUpdate {
	pu.mutation.ClearDomain()
	return pu
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (pu *PathUpdate) RemoveDomainIDs(ids ...int) *PathUpdate {
	pu.mutation.RemoveDomainIDs(ids...)
	return pu
}

// RemoveDomain removes "domain" edges to Domain entities.
func (pu *PathUpdate) RemoveDomain(d ...*Domain) *PathUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDomainIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (pu *PathUpdate) ClearScan() *PathUpdate {
	pu.mutation.ClearScan()
	return pu
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (pu *PathUpdate) RemoveScanIDs(ids ...int) *PathUpdate {
	pu.mutation.RemoveScanIDs(ids...)
	return pu
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (pu *PathUpdate) RemoveScan(s ...*ScanJob) *PathUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PathUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PathUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PathUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PathUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PathUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(path.Table, path.Columns, sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(path.FieldPath, field.TypeString, value)
	}
	if pu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDomainIDs(); len(nodes) > 0 && !pu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedScanIDs(); len(nodes) > 0 && !pu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{path.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PathUpdateOne is the builder for updating a single Path entity.
type PathUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PathMutation
}

// SetPath sets the "path" field.
func (puo *PathUpdateOne) SetPath(s string) *PathUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *PathUpdateOne) SetNillablePath(s *string) *PathUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (puo *PathUpdateOne) AddDomainIDs(ids ...int) *PathUpdateOne {
	puo.mutation.AddDomainIDs(ids...)
	return puo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (puo *PathUpdateOne) AddDomain(d ...*Domain) *PathUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDomainIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (puo *PathUpdateOne) AddScanIDs(ids ...int) *PathUpdateOne {
	puo.mutation.AddScanIDs(ids...)
	return puo
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (puo *PathUpdateOne) AddScan(s ...*ScanJob) *PathUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddScanIDs(ids...)
}

// Mutation returns the PathMutation object of the builder.
func (puo *PathUpdateOne) Mutation() *PathMutation {
	return puo.mutation
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (puo *PathUpdateOne) ClearDomain() *PathUpdateOne {
	puo.mutation.ClearDomain()
	return puo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (puo *PathUpdateOne) RemoveDomainIDs(ids ...int) *PathUpdateOne {
	puo.mutation.RemoveDomainIDs(ids...)
	return puo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (puo *PathUpdateOne) RemoveDomain(d ...*Domain) *PathUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDomainIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (puo *PathUpdateOne) ClearScan() *PathUpdateOne {
	puo.mutation.ClearScan()
	return puo
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (puo *PathUpdateOne) RemoveScanIDs(ids ...int) *PathUpdateOne {
	puo.mutation.RemoveScanIDs(ids...)
	return puo
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (puo *PathUpdateOne) RemoveScan(s ...*ScanJob) *PathUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveScanIDs(ids...)
}

// Where appends a list predicates to the PathUpdate builder.
func (puo *PathUpdateOne) Where(ps ...predicate.Path) *PathUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PathUpdateOne) Select(field string, fields ...string) *PathUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Path entity.
func (puo *PathUpdateOne) Save(ctx context.Context) (*Path, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PathUpdateOne) SaveX(ctx context.Context) *Path {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PathUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PathUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PathUpdateOne) sqlSave(ctx context.Context) (_node *Path, err error) {
	_spec := sqlgraph.NewUpdateSpec(path.Table, path.Columns, sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "Path.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, path.FieldID)
		for _, f := range fields {
			if !path.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != path.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(path.FieldPath, field.TypeString, value)
	}
	if puo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !puo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.DomainTable,
			Columns: path.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedScanIDs(); len(nodes) > 0 && !puo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   path.ScanTable,
			Columns: path.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Path{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{path.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
