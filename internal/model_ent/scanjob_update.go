// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ScanJobUpdate is the builder for updating ScanJob entities.
type ScanJobUpdate struct {
	config
	hooks    []Hook
	mutation *ScanJobMutation
}

// Where appends a list predicates to the ScanJobUpdate builder.
func (sju *ScanJobUpdate) Where(ps ...predicate.ScanJob) *ScanJobUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetScanid sets the "scanid" field.
func (sju *ScanJobUpdate) SetScanid(s string) *ScanJobUpdate {
	sju.mutation.SetScanid(s)
	return sju
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableScanid(s *string) *ScanJobUpdate {
	if s != nil {
		sju.SetScanid(*s)
	}
	return sju
}

// SetTimeout sets the "timeout" field.
func (sju *ScanJobUpdate) SetTimeout(i int) *ScanJobUpdate {
	sju.mutation.ResetTimeout()
	sju.mutation.SetTimeout(i)
	return sju
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableTimeout(i *int) *ScanJobUpdate {
	if i != nil {
		sju.SetTimeout(*i)
	}
	return sju
}

// AddTimeout adds i to the "timeout" field.
func (sju *ScanJobUpdate) AddTimeout(i int) *ScanJobUpdate {
	sju.mutation.AddTimeout(i)
	return sju
}

// SetStatus sets the "status" field.
func (sju *ScanJobUpdate) SetStatus(s scanjob.Status) *ScanJobUpdate {
	sju.mutation.SetStatus(s)
	return sju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableStatus(s *scanjob.Status) *ScanJobUpdate {
	if s != nil {
		sju.SetStatus(*s)
	}
	return sju
}

// SetInput sets the "input" field.
func (sju *ScanJobUpdate) SetInput(s string) *ScanJobUpdate {
	sju.mutation.SetInput(s)
	return sju
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableInput(s *string) *ScanJobUpdate {
	if s != nil {
		sju.SetInput(*s)
	}
	return sju
}

// SetOutput sets the "output" field.
func (sju *ScanJobUpdate) SetOutput(s string) *ScanJobUpdate {
	sju.mutation.SetOutput(s)
	return sju
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableOutput(s *string) *ScanJobUpdate {
	if s != nil {
		sju.SetOutput(*s)
	}
	return sju
}

// SetCommand sets the "command" field.
func (sju *ScanJobUpdate) SetCommand(s string) *ScanJobUpdate {
	sju.mutation.SetCommand(s)
	return sju
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableCommand(s *string) *ScanJobUpdate {
	if s != nil {
		sju.SetCommand(*s)
	}
	return sju
}

// SetTimestamp sets the "timestamp" field.
func (sju *ScanJobUpdate) SetTimestamp(t time.Time) *ScanJobUpdate {
	sju.mutation.SetTimestamp(t)
	return sju
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (sju *ScanJobUpdate) SetNillableTimestamp(t *time.Time) *ScanJobUpdate {
	if t != nil {
		sju.SetTimestamp(*t)
	}
	return sju
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (sju *ScanJobUpdate) AddIpaddresIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddIpaddresIDs(ids...)
	return sju
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (sju *ScanJobUpdate) AddIpaddress(i ...*IPAddress) *ScanJobUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sju.AddIpaddresIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (sju *ScanJobUpdate) AddAsninfoIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddAsninfoIDs(ids...)
	return sju
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (sju *ScanJobUpdate) AddAsninfo(a ...*ASNInfo) *ScanJobUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sju.AddAsninfoIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (sju *ScanJobUpdate) AddDnsentryIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddDnsentryIDs(ids...)
	return sju
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (sju *ScanJobUpdate) AddDnsentry(d ...*DNSEntry) *ScanJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sju.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (sju *ScanJobUpdate) AddDomainIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddDomainIDs(ids...)
	return sju
}

// AddDomain adds the "domain" edges to the Domain entity.
func (sju *ScanJobUpdate) AddDomain(d ...*Domain) *ScanJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sju.AddDomainIDs(ids...)
}

// AddPathIDs adds the "path" edge to the Path entity by IDs.
func (sju *ScanJobUpdate) AddPathIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddPathIDs(ids...)
	return sju
}

// AddPath adds the "path" edges to the Path entity.
func (sju *ScanJobUpdate) AddPath(p ...*Path) *ScanJobUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sju.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (sju *ScanJobUpdate) AddNameserverIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddNameserverIDs(ids...)
	return sju
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (sju *ScanJobUpdate) AddNameserver(n ...*Nameserver) *ScanJobUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sju.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (sju *ScanJobUpdate) AddRegistrarIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddRegistrarIDs(ids...)
	return sju
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (sju *ScanJobUpdate) AddRegistrar(r ...*Registrar) *ScanJobUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sju.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (sju *ScanJobUpdate) AddWhoiIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddWhoiIDs(ids...)
	return sju
}

// AddWhois adds the "whois" edges to the Whois entity.
func (sju *ScanJobUpdate) AddWhois(w ...*Whois) *ScanJobUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sju.AddWhoiIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (sju *ScanJobUpdate) AddScanIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.AddScanIDs(ids...)
	return sju
}

// AddScan adds the "scan" edges to the Scan entity.
func (sju *ScanJobUpdate) AddScan(s ...*Scan) *ScanJobUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sju.AddScanIDs(ids...)
}

// Mutation returns the ScanJobMutation object of the builder.
func (sju *ScanJobUpdate) Mutation() *ScanJobMutation {
	return sju.mutation
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (sju *ScanJobUpdate) ClearIpaddress() *ScanJobUpdate {
	sju.mutation.ClearIpaddress()
	return sju
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (sju *ScanJobUpdate) RemoveIpaddresIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveIpaddresIDs(ids...)
	return sju
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (sju *ScanJobUpdate) RemoveIpaddress(i ...*IPAddress) *ScanJobUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sju.RemoveIpaddresIDs(ids...)
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (sju *ScanJobUpdate) ClearAsninfo() *ScanJobUpdate {
	sju.mutation.ClearAsninfo()
	return sju
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (sju *ScanJobUpdate) RemoveAsninfoIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveAsninfoIDs(ids...)
	return sju
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (sju *ScanJobUpdate) RemoveAsninfo(a ...*ASNInfo) *ScanJobUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sju.RemoveAsninfoIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (sju *ScanJobUpdate) ClearDnsentry() *ScanJobUpdate {
	sju.mutation.ClearDnsentry()
	return sju
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (sju *ScanJobUpdate) RemoveDnsentryIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveDnsentryIDs(ids...)
	return sju
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (sju *ScanJobUpdate) RemoveDnsentry(d ...*DNSEntry) *ScanJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sju.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (sju *ScanJobUpdate) ClearDomain() *ScanJobUpdate {
	sju.mutation.ClearDomain()
	return sju
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (sju *ScanJobUpdate) RemoveDomainIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveDomainIDs(ids...)
	return sju
}

// RemoveDomain removes "domain" edges to Domain entities.
func (sju *ScanJobUpdate) RemoveDomain(d ...*Domain) *ScanJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sju.RemoveDomainIDs(ids...)
}

// ClearPath clears all "path" edges to the Path entity.
func (sju *ScanJobUpdate) ClearPath() *ScanJobUpdate {
	sju.mutation.ClearPath()
	return sju
}

// RemovePathIDs removes the "path" edge to Path entities by IDs.
func (sju *ScanJobUpdate) RemovePathIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemovePathIDs(ids...)
	return sju
}

// RemovePath removes "path" edges to Path entities.
func (sju *ScanJobUpdate) RemovePath(p ...*Path) *ScanJobUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sju.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (sju *ScanJobUpdate) ClearNameserver() *ScanJobUpdate {
	sju.mutation.ClearNameserver()
	return sju
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (sju *ScanJobUpdate) RemoveNameserverIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveNameserverIDs(ids...)
	return sju
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (sju *ScanJobUpdate) RemoveNameserver(n ...*Nameserver) *ScanJobUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sju.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (sju *ScanJobUpdate) ClearRegistrar() *ScanJobUpdate {
	sju.mutation.ClearRegistrar()
	return sju
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (sju *ScanJobUpdate) RemoveRegistrarIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveRegistrarIDs(ids...)
	return sju
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (sju *ScanJobUpdate) RemoveRegistrar(r ...*Registrar) *ScanJobUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sju.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (sju *ScanJobUpdate) ClearWhois() *ScanJobUpdate {
	sju.mutation.ClearWhois()
	return sju
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (sju *ScanJobUpdate) RemoveWhoiIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveWhoiIDs(ids...)
	return sju
}

// RemoveWhois removes "whois" edges to Whois entities.
func (sju *ScanJobUpdate) RemoveWhois(w ...*Whois) *ScanJobUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sju.RemoveWhoiIDs(ids...)
}

// ClearScan clears all "scan" edges to the Scan entity.
func (sju *ScanJobUpdate) ClearScan() *ScanJobUpdate {
	sju.mutation.ClearScan()
	return sju
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (sju *ScanJobUpdate) RemoveScanIDs(ids ...int) *ScanJobUpdate {
	sju.mutation.RemoveScanIDs(ids...)
	return sju
}

// RemoveScan removes "scan" edges to Scan entities.
func (sju *ScanJobUpdate) RemoveScan(s ...*Scan) *ScanJobUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sju.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *ScanJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sju.sqlSave, sju.mutation, sju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sju *ScanJobUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *ScanJobUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *ScanJobUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sju *ScanJobUpdate) check() error {
	if v, ok := sju.mutation.Status(); ok {
		if err := scanjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model_ent: validator failed for field "ScanJob.status": %w`, err)}
		}
	}
	return nil
}

func (sju *ScanJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanjob.Table, scanjob.Columns, sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt))
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sju.mutation.Scanid(); ok {
		_spec.SetField(scanjob.FieldScanid, field.TypeString, value)
	}
	if value, ok := sju.mutation.Timeout(); ok {
		_spec.SetField(scanjob.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := sju.mutation.AddedTimeout(); ok {
		_spec.AddField(scanjob.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := sju.mutation.Status(); ok {
		_spec.SetField(scanjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sju.mutation.Input(); ok {
		_spec.SetField(scanjob.FieldInput, field.TypeString, value)
	}
	if value, ok := sju.mutation.Output(); ok {
		_spec.SetField(scanjob.FieldOutput, field.TypeString, value)
	}
	if value, ok := sju.mutation.Command(); ok {
		_spec.SetField(scanjob.FieldCommand, field.TypeString, value)
	}
	if value, ok := sju.mutation.Timestamp(); ok {
		_spec.SetField(scanjob.FieldTimestamp, field.TypeTime, value)
	}
	if sju.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !sju.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !sju.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !sju.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedDomainIDs(); len(nodes) > 0 && !sju.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.PathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedPathIDs(); len(nodes) > 0 && !sju.mutation.PathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.PathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !sju.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !sju.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !sju.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedScanIDs(); len(nodes) > 0 && !sju.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sju.mutation.done = true
	return n, nil
}

// ScanJobUpdateOne is the builder for updating a single ScanJob entity.
type ScanJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanJobMutation
}

// SetScanid sets the "scanid" field.
func (sjuo *ScanJobUpdateOne) SetScanid(s string) *ScanJobUpdateOne {
	sjuo.mutation.SetScanid(s)
	return sjuo
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableScanid(s *string) *ScanJobUpdateOne {
	if s != nil {
		sjuo.SetScanid(*s)
	}
	return sjuo
}

// SetTimeout sets the "timeout" field.
func (sjuo *ScanJobUpdateOne) SetTimeout(i int) *ScanJobUpdateOne {
	sjuo.mutation.ResetTimeout()
	sjuo.mutation.SetTimeout(i)
	return sjuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableTimeout(i *int) *ScanJobUpdateOne {
	if i != nil {
		sjuo.SetTimeout(*i)
	}
	return sjuo
}

// AddTimeout adds i to the "timeout" field.
func (sjuo *ScanJobUpdateOne) AddTimeout(i int) *ScanJobUpdateOne {
	sjuo.mutation.AddTimeout(i)
	return sjuo
}

// SetStatus sets the "status" field.
func (sjuo *ScanJobUpdateOne) SetStatus(s scanjob.Status) *ScanJobUpdateOne {
	sjuo.mutation.SetStatus(s)
	return sjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableStatus(s *scanjob.Status) *ScanJobUpdateOne {
	if s != nil {
		sjuo.SetStatus(*s)
	}
	return sjuo
}

// SetInput sets the "input" field.
func (sjuo *ScanJobUpdateOne) SetInput(s string) *ScanJobUpdateOne {
	sjuo.mutation.SetInput(s)
	return sjuo
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableInput(s *string) *ScanJobUpdateOne {
	if s != nil {
		sjuo.SetInput(*s)
	}
	return sjuo
}

// SetOutput sets the "output" field.
func (sjuo *ScanJobUpdateOne) SetOutput(s string) *ScanJobUpdateOne {
	sjuo.mutation.SetOutput(s)
	return sjuo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableOutput(s *string) *ScanJobUpdateOne {
	if s != nil {
		sjuo.SetOutput(*s)
	}
	return sjuo
}

// SetCommand sets the "command" field.
func (sjuo *ScanJobUpdateOne) SetCommand(s string) *ScanJobUpdateOne {
	sjuo.mutation.SetCommand(s)
	return sjuo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableCommand(s *string) *ScanJobUpdateOne {
	if s != nil {
		sjuo.SetCommand(*s)
	}
	return sjuo
}

// SetTimestamp sets the "timestamp" field.
func (sjuo *ScanJobUpdateOne) SetTimestamp(t time.Time) *ScanJobUpdateOne {
	sjuo.mutation.SetTimestamp(t)
	return sjuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (sjuo *ScanJobUpdateOne) SetNillableTimestamp(t *time.Time) *ScanJobUpdateOne {
	if t != nil {
		sjuo.SetTimestamp(*t)
	}
	return sjuo
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (sjuo *ScanJobUpdateOne) AddIpaddresIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddIpaddresIDs(ids...)
	return sjuo
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (sjuo *ScanJobUpdateOne) AddIpaddress(i ...*IPAddress) *ScanJobUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sjuo.AddIpaddresIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (sjuo *ScanJobUpdateOne) AddAsninfoIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddAsninfoIDs(ids...)
	return sjuo
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (sjuo *ScanJobUpdateOne) AddAsninfo(a ...*ASNInfo) *ScanJobUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sjuo.AddAsninfoIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (sjuo *ScanJobUpdateOne) AddDnsentryIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddDnsentryIDs(ids...)
	return sjuo
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (sjuo *ScanJobUpdateOne) AddDnsentry(d ...*DNSEntry) *ScanJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjuo.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (sjuo *ScanJobUpdateOne) AddDomainIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddDomainIDs(ids...)
	return sjuo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (sjuo *ScanJobUpdateOne) AddDomain(d ...*Domain) *ScanJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjuo.AddDomainIDs(ids...)
}

// AddPathIDs adds the "path" edge to the Path entity by IDs.
func (sjuo *ScanJobUpdateOne) AddPathIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddPathIDs(ids...)
	return sjuo
}

// AddPath adds the "path" edges to the Path entity.
func (sjuo *ScanJobUpdateOne) AddPath(p ...*Path) *ScanJobUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sjuo.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (sjuo *ScanJobUpdateOne) AddNameserverIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddNameserverIDs(ids...)
	return sjuo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (sjuo *ScanJobUpdateOne) AddNameserver(n ...*Nameserver) *ScanJobUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sjuo.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (sjuo *ScanJobUpdateOne) AddRegistrarIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddRegistrarIDs(ids...)
	return sjuo
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (sjuo *ScanJobUpdateOne) AddRegistrar(r ...*Registrar) *ScanJobUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sjuo.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (sjuo *ScanJobUpdateOne) AddWhoiIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddWhoiIDs(ids...)
	return sjuo
}

// AddWhois adds the "whois" edges to the Whois entity.
func (sjuo *ScanJobUpdateOne) AddWhois(w ...*Whois) *ScanJobUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sjuo.AddWhoiIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (sjuo *ScanJobUpdateOne) AddScanIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.AddScanIDs(ids...)
	return sjuo
}

// AddScan adds the "scan" edges to the Scan entity.
func (sjuo *ScanJobUpdateOne) AddScan(s ...*Scan) *ScanJobUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sjuo.AddScanIDs(ids...)
}

// Mutation returns the ScanJobMutation object of the builder.
func (sjuo *ScanJobUpdateOne) Mutation() *ScanJobMutation {
	return sjuo.mutation
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (sjuo *ScanJobUpdateOne) ClearIpaddress() *ScanJobUpdateOne {
	sjuo.mutation.ClearIpaddress()
	return sjuo
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveIpaddresIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveIpaddresIDs(ids...)
	return sjuo
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (sjuo *ScanJobUpdateOne) RemoveIpaddress(i ...*IPAddress) *ScanJobUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sjuo.RemoveIpaddresIDs(ids...)
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (sjuo *ScanJobUpdateOne) ClearAsninfo() *ScanJobUpdateOne {
	sjuo.mutation.ClearAsninfo()
	return sjuo
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveAsninfoIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveAsninfoIDs(ids...)
	return sjuo
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (sjuo *ScanJobUpdateOne) RemoveAsninfo(a ...*ASNInfo) *ScanJobUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sjuo.RemoveAsninfoIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (sjuo *ScanJobUpdateOne) ClearDnsentry() *ScanJobUpdateOne {
	sjuo.mutation.ClearDnsentry()
	return sjuo
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveDnsentryIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveDnsentryIDs(ids...)
	return sjuo
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (sjuo *ScanJobUpdateOne) RemoveDnsentry(d ...*DNSEntry) *ScanJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjuo.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (sjuo *ScanJobUpdateOne) ClearDomain() *ScanJobUpdateOne {
	sjuo.mutation.ClearDomain()
	return sjuo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveDomainIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveDomainIDs(ids...)
	return sjuo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (sjuo *ScanJobUpdateOne) RemoveDomain(d ...*Domain) *ScanJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjuo.RemoveDomainIDs(ids...)
}

// ClearPath clears all "path" edges to the Path entity.
func (sjuo *ScanJobUpdateOne) ClearPath() *ScanJobUpdateOne {
	sjuo.mutation.ClearPath()
	return sjuo
}

// RemovePathIDs removes the "path" edge to Path entities by IDs.
func (sjuo *ScanJobUpdateOne) RemovePathIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemovePathIDs(ids...)
	return sjuo
}

// RemovePath removes "path" edges to Path entities.
func (sjuo *ScanJobUpdateOne) RemovePath(p ...*Path) *ScanJobUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sjuo.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (sjuo *ScanJobUpdateOne) ClearNameserver() *ScanJobUpdateOne {
	sjuo.mutation.ClearNameserver()
	return sjuo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveNameserverIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveNameserverIDs(ids...)
	return sjuo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (sjuo *ScanJobUpdateOne) RemoveNameserver(n ...*Nameserver) *ScanJobUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sjuo.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (sjuo *ScanJobUpdateOne) ClearRegistrar() *ScanJobUpdateOne {
	sjuo.mutation.ClearRegistrar()
	return sjuo
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveRegistrarIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveRegistrarIDs(ids...)
	return sjuo
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (sjuo *ScanJobUpdateOne) RemoveRegistrar(r ...*Registrar) *ScanJobUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sjuo.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (sjuo *ScanJobUpdateOne) ClearWhois() *ScanJobUpdateOne {
	sjuo.mutation.ClearWhois()
	return sjuo
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveWhoiIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveWhoiIDs(ids...)
	return sjuo
}

// RemoveWhois removes "whois" edges to Whois entities.
func (sjuo *ScanJobUpdateOne) RemoveWhois(w ...*Whois) *ScanJobUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sjuo.RemoveWhoiIDs(ids...)
}

// ClearScan clears all "scan" edges to the Scan entity.
func (sjuo *ScanJobUpdateOne) ClearScan() *ScanJobUpdateOne {
	sjuo.mutation.ClearScan()
	return sjuo
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (sjuo *ScanJobUpdateOne) RemoveScanIDs(ids ...int) *ScanJobUpdateOne {
	sjuo.mutation.RemoveScanIDs(ids...)
	return sjuo
}

// RemoveScan removes "scan" edges to Scan entities.
func (sjuo *ScanJobUpdateOne) RemoveScan(s ...*Scan) *ScanJobUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sjuo.RemoveScanIDs(ids...)
}

// Where appends a list predicates to the ScanJobUpdate builder.
func (sjuo *ScanJobUpdateOne) Where(ps ...predicate.ScanJob) *ScanJobUpdateOne {
	sjuo.mutation.Where(ps...)
	return sjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *ScanJobUpdateOne) Select(field string, fields ...string) *ScanJobUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated ScanJob entity.
func (sjuo *ScanJobUpdateOne) Save(ctx context.Context) (*ScanJob, error) {
	return withHooks(ctx, sjuo.sqlSave, sjuo.mutation, sjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *ScanJobUpdateOne) SaveX(ctx context.Context) *ScanJob {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *ScanJobUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *ScanJobUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *ScanJobUpdateOne) check() error {
	if v, ok := sjuo.mutation.Status(); ok {
		if err := scanjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model_ent: validator failed for field "ScanJob.status": %w`, err)}
		}
	}
	return nil
}

func (sjuo *ScanJobUpdateOne) sqlSave(ctx context.Context) (_node *ScanJob, err error) {
	if err := sjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanjob.Table, scanjob.Columns, sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt))
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "ScanJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scanjob.FieldID)
		for _, f := range fields {
			if !scanjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != scanjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjuo.mutation.Scanid(); ok {
		_spec.SetField(scanjob.FieldScanid, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Timeout(); ok {
		_spec.SetField(scanjob.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := sjuo.mutation.AddedTimeout(); ok {
		_spec.AddField(scanjob.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := sjuo.mutation.Status(); ok {
		_spec.SetField(scanjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sjuo.mutation.Input(); ok {
		_spec.SetField(scanjob.FieldInput, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Output(); ok {
		_spec.SetField(scanjob.FieldOutput, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Command(); ok {
		_spec.SetField(scanjob.FieldCommand, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Timestamp(); ok {
		_spec.SetField(scanjob.FieldTimestamp, field.TypeTime, value)
	}
	if sjuo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !sjuo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !sjuo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !sjuo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !sjuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.PathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedPathIDs(); len(nodes) > 0 && !sjuo.mutation.PathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.PathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !sjuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !sjuo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !sjuo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedScanIDs(); len(nodes) > 0 && !sjuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScanJob{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjuo.mutation.done = true
	return _node, nil
}
