// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ScanJobCreate is the builder for creating a ScanJob entity.
type ScanJobCreate struct {
	config
	mutation *ScanJobMutation
	hooks    []Hook
}

// SetScanid sets the "scanid" field.
func (sjc *ScanJobCreate) SetScanid(s string) *ScanJobCreate {
	sjc.mutation.SetScanid(s)
	return sjc
}

// SetTimeout sets the "timeout" field.
func (sjc *ScanJobCreate) SetTimeout(i int) *ScanJobCreate {
	sjc.mutation.SetTimeout(i)
	return sjc
}

// SetStatus sets the "status" field.
func (sjc *ScanJobCreate) SetStatus(s scanjob.Status) *ScanJobCreate {
	sjc.mutation.SetStatus(s)
	return sjc
}

// SetInput sets the "input" field.
func (sjc *ScanJobCreate) SetInput(s string) *ScanJobCreate {
	sjc.mutation.SetInput(s)
	return sjc
}

// SetOutput sets the "output" field.
func (sjc *ScanJobCreate) SetOutput(s string) *ScanJobCreate {
	sjc.mutation.SetOutput(s)
	return sjc
}

// SetCommand sets the "command" field.
func (sjc *ScanJobCreate) SetCommand(s string) *ScanJobCreate {
	sjc.mutation.SetCommand(s)
	return sjc
}

// SetTimestamp sets the "timestamp" field.
func (sjc *ScanJobCreate) SetTimestamp(t time.Time) *ScanJobCreate {
	sjc.mutation.SetTimestamp(t)
	return sjc
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (sjc *ScanJobCreate) AddIpaddresIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddIpaddresIDs(ids...)
	return sjc
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (sjc *ScanJobCreate) AddIpaddress(i ...*IPAddress) *ScanJobCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sjc.AddIpaddresIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (sjc *ScanJobCreate) AddAsninfoIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddAsninfoIDs(ids...)
	return sjc
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (sjc *ScanJobCreate) AddAsninfo(a ...*ASNInfo) *ScanJobCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sjc.AddAsninfoIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (sjc *ScanJobCreate) AddDnsentryIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddDnsentryIDs(ids...)
	return sjc
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (sjc *ScanJobCreate) AddDnsentry(d ...*DNSEntry) *ScanJobCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjc.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (sjc *ScanJobCreate) AddDomainIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddDomainIDs(ids...)
	return sjc
}

// AddDomain adds the "domain" edges to the Domain entity.
func (sjc *ScanJobCreate) AddDomain(d ...*Domain) *ScanJobCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sjc.AddDomainIDs(ids...)
}

// AddPathIDs adds the "path" edge to the Path entity by IDs.
func (sjc *ScanJobCreate) AddPathIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddPathIDs(ids...)
	return sjc
}

// AddPath adds the "path" edges to the Path entity.
func (sjc *ScanJobCreate) AddPath(p ...*Path) *ScanJobCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sjc.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (sjc *ScanJobCreate) AddNameserverIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddNameserverIDs(ids...)
	return sjc
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (sjc *ScanJobCreate) AddNameserver(n ...*Nameserver) *ScanJobCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sjc.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (sjc *ScanJobCreate) AddRegistrarIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddRegistrarIDs(ids...)
	return sjc
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (sjc *ScanJobCreate) AddRegistrar(r ...*Registrar) *ScanJobCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sjc.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (sjc *ScanJobCreate) AddWhoiIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddWhoiIDs(ids...)
	return sjc
}

// AddWhois adds the "whois" edges to the Whois entity.
func (sjc *ScanJobCreate) AddWhois(w ...*Whois) *ScanJobCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return sjc.AddWhoiIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (sjc *ScanJobCreate) AddScanIDs(ids ...int) *ScanJobCreate {
	sjc.mutation.AddScanIDs(ids...)
	return sjc
}

// AddScan adds the "scan" edges to the Scan entity.
func (sjc *ScanJobCreate) AddScan(s ...*Scan) *ScanJobCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sjc.AddScanIDs(ids...)
}

// Mutation returns the ScanJobMutation object of the builder.
func (sjc *ScanJobCreate) Mutation() *ScanJobMutation {
	return sjc.mutation
}

// Save creates the ScanJob in the database.
func (sjc *ScanJobCreate) Save(ctx context.Context) (*ScanJob, error) {
	return withHooks(ctx, sjc.sqlSave, sjc.mutation, sjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjc *ScanJobCreate) SaveX(ctx context.Context) *ScanJob {
	v, err := sjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjc *ScanJobCreate) Exec(ctx context.Context) error {
	_, err := sjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjc *ScanJobCreate) ExecX(ctx context.Context) {
	if err := sjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjc *ScanJobCreate) check() error {
	if _, ok := sjc.mutation.Scanid(); !ok {
		return &ValidationError{Name: "scanid", err: errors.New(`model_ent: missing required field "ScanJob.scanid"`)}
	}
	if _, ok := sjc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`model_ent: missing required field "ScanJob.timeout"`)}
	}
	if _, ok := sjc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`model_ent: missing required field "ScanJob.status"`)}
	}
	if v, ok := sjc.mutation.Status(); ok {
		if err := scanjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model_ent: validator failed for field "ScanJob.status": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.Input(); !ok {
		return &ValidationError{Name: "input", err: errors.New(`model_ent: missing required field "ScanJob.input"`)}
	}
	if _, ok := sjc.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`model_ent: missing required field "ScanJob.output"`)}
	}
	if _, ok := sjc.mutation.Command(); !ok {
		return &ValidationError{Name: "command", err: errors.New(`model_ent: missing required field "ScanJob.command"`)}
	}
	if _, ok := sjc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`model_ent: missing required field "ScanJob.timestamp"`)}
	}
	return nil
}

func (sjc *ScanJobCreate) sqlSave(ctx context.Context) (*ScanJob, error) {
	if err := sjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sjc.mutation.id = &_node.ID
	sjc.mutation.done = true
	return _node, nil
}

func (sjc *ScanJobCreate) createSpec() (*ScanJob, *sqlgraph.CreateSpec) {
	var (
		_node = &ScanJob{config: sjc.config}
		_spec = sqlgraph.NewCreateSpec(scanjob.Table, sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt))
	)
	if value, ok := sjc.mutation.Scanid(); ok {
		_spec.SetField(scanjob.FieldScanid, field.TypeString, value)
		_node.Scanid = value
	}
	if value, ok := sjc.mutation.Timeout(); ok {
		_spec.SetField(scanjob.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := sjc.mutation.Status(); ok {
		_spec.SetField(scanjob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sjc.mutation.Input(); ok {
		_spec.SetField(scanjob.FieldInput, field.TypeString, value)
		_node.Input = value
	}
	if value, ok := sjc.mutation.Output(); ok {
		_spec.SetField(scanjob.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := sjc.mutation.Command(); ok {
		_spec.SetField(scanjob.FieldCommand, field.TypeString, value)
		_node.Command = value
	}
	if value, ok := sjc.mutation.Timestamp(); ok {
		_spec.SetField(scanjob.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if nodes := sjc.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.IpaddressTable,
			Columns: scanjob.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.AsninfoTable,
			Columns: scanjob.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DnsentryTable,
			Columns: scanjob.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.DomainTable,
			Columns: scanjob.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.PathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.PathTable,
			Columns: scanjob.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.NameserverTable,
			Columns: scanjob.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.RegistrarTable,
			Columns: scanjob.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scanjob.WhoisTable,
			Columns: scanjob.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sjc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scanjob.ScanTable,
			Columns: scanjob.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScanJobCreateBulk is the builder for creating many ScanJob entities in bulk.
type ScanJobCreateBulk struct {
	config
	err      error
	builders []*ScanJobCreate
}

// Save creates the ScanJob entities in the database.
func (sjcb *ScanJobCreateBulk) Save(ctx context.Context) ([]*ScanJob, error) {
	if sjcb.err != nil {
		return nil, sjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjcb.builders))
	nodes := make([]*ScanJob, len(sjcb.builders))
	mutators := make([]Mutator, len(sjcb.builders))
	for i := range sjcb.builders {
		func(i int, root context.Context) {
			builder := sjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScanJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjcb *ScanJobCreateBulk) SaveX(ctx context.Context) []*ScanJob {
	v, err := sjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjcb *ScanJobCreateBulk) Exec(ctx context.Context) error {
	_, err := sjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjcb *ScanJobCreateBulk) ExecX(ctx context.Context) {
	if err := sjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
