// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
)

// ASNInfoCreate is the builder for creating a ASNInfo entity.
type ASNInfoCreate struct {
	config
	mutation *ASNInfoMutation
	hooks    []Hook
}

// SetAsn sets the "asn" field.
func (aic *ASNInfoCreate) SetAsn(i int) *ASNInfoCreate {
	aic.mutation.SetAsn(i)
	return aic
}

// SetCountry sets the "country" field.
func (aic *ASNInfoCreate) SetCountry(s string) *ASNInfoCreate {
	aic.mutation.SetCountry(s)
	return aic
}

// SetRegistry sets the "registry" field.
func (aic *ASNInfoCreate) SetRegistry(s string) *ASNInfoCreate {
	aic.mutation.SetRegistry(s)
	return aic
}

// Mutation returns the ASNInfoMutation object of the builder.
func (aic *ASNInfoCreate) Mutation() *ASNInfoMutation {
	return aic.mutation
}

// Save creates the ASNInfo in the database.
func (aic *ASNInfoCreate) Save(ctx context.Context) (*ASNInfo, error) {
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *ASNInfoCreate) SaveX(ctx context.Context) *ASNInfo {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *ASNInfoCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *ASNInfoCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *ASNInfoCreate) check() error {
	if _, ok := aic.mutation.Asn(); !ok {
		return &ValidationError{Name: "asn", err: errors.New(`model_ent: missing required field "ASNInfo.asn"`)}
	}
	if _, ok := aic.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`model_ent: missing required field "ASNInfo.country"`)}
	}
	if _, ok := aic.mutation.Registry(); !ok {
		return &ValidationError{Name: "registry", err: errors.New(`model_ent: missing required field "ASNInfo.registry"`)}
	}
	return nil
}

func (aic *ASNInfoCreate) sqlSave(ctx context.Context) (*ASNInfo, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *ASNInfoCreate) createSpec() (*ASNInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ASNInfo{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(asninfo.Table, sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt))
	)
	if value, ok := aic.mutation.Asn(); ok {
		_spec.SetField(asninfo.FieldAsn, field.TypeInt, value)
		_node.Asn = value
	}
	if value, ok := aic.mutation.Country(); ok {
		_spec.SetField(asninfo.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := aic.mutation.Registry(); ok {
		_spec.SetField(asninfo.FieldRegistry, field.TypeString, value)
		_node.Registry = value
	}
	return _node, _spec
}

// ASNInfoCreateBulk is the builder for creating many ASNInfo entities in bulk.
type ASNInfoCreateBulk struct {
	config
	err      error
	builders []*ASNInfoCreate
}

// Save creates the ASNInfo entities in the database.
func (aicb *ASNInfoCreateBulk) Save(ctx context.Context) ([]*ASNInfo, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*ASNInfo, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ASNInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *ASNInfoCreateBulk) SaveX(ctx context.Context) []*ASNInfo {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *ASNInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *ASNInfoCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
