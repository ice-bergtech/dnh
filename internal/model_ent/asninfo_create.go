// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ASNInfoCreate is the builder for creating a ASNInfo entity.
type ASNInfoCreate struct {
	config
	mutation *ASNInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAsn sets the "asn" field.
func (aic *ASNInfoCreate) SetAsn(i int) *ASNInfoCreate {
	aic.mutation.SetAsn(i)
	return aic
}

// SetCountry sets the "country" field.
func (aic *ASNInfoCreate) SetCountry(s string) *ASNInfoCreate {
	aic.mutation.SetCountry(s)
	return aic
}

// SetRegistry sets the "registry" field.
func (aic *ASNInfoCreate) SetRegistry(s string) *ASNInfoCreate {
	aic.mutation.SetRegistry(s)
	return aic
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (aic *ASNInfoCreate) AddScanIDs(ids ...int) *ASNInfoCreate {
	aic.mutation.AddScanIDs(ids...)
	return aic
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (aic *ASNInfoCreate) AddScan(s ...*ScanJob) *ASNInfoCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aic.AddScanIDs(ids...)
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (aic *ASNInfoCreate) AddIpaddresIDs(ids ...int) *ASNInfoCreate {
	aic.mutation.AddIpaddresIDs(ids...)
	return aic
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (aic *ASNInfoCreate) AddIpaddress(i ...*IPAddress) *ASNInfoCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return aic.AddIpaddresIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (aic *ASNInfoCreate) AddRegistrarIDs(ids ...int) *ASNInfoCreate {
	aic.mutation.AddRegistrarIDs(ids...)
	return aic
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (aic *ASNInfoCreate) AddRegistrar(r ...*Registrar) *ASNInfoCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return aic.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (aic *ASNInfoCreate) AddWhoiIDs(ids ...int) *ASNInfoCreate {
	aic.mutation.AddWhoiIDs(ids...)
	return aic
}

// AddWhois adds the "whois" edges to the Whois entity.
func (aic *ASNInfoCreate) AddWhois(w ...*Whois) *ASNInfoCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return aic.AddWhoiIDs(ids...)
}

// Mutation returns the ASNInfoMutation object of the builder.
func (aic *ASNInfoCreate) Mutation() *ASNInfoMutation {
	return aic.mutation
}

// Save creates the ASNInfo in the database.
func (aic *ASNInfoCreate) Save(ctx context.Context) (*ASNInfo, error) {
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *ASNInfoCreate) SaveX(ctx context.Context) *ASNInfo {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *ASNInfoCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *ASNInfoCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *ASNInfoCreate) check() error {
	if _, ok := aic.mutation.Asn(); !ok {
		return &ValidationError{Name: "asn", err: errors.New(`model_ent: missing required field "ASNInfo.asn"`)}
	}
	if _, ok := aic.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`model_ent: missing required field "ASNInfo.country"`)}
	}
	if _, ok := aic.mutation.Registry(); !ok {
		return &ValidationError{Name: "registry", err: errors.New(`model_ent: missing required field "ASNInfo.registry"`)}
	}
	return nil
}

func (aic *ASNInfoCreate) sqlSave(ctx context.Context) (*ASNInfo, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *ASNInfoCreate) createSpec() (*ASNInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ASNInfo{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(asninfo.Table, sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = aic.conflict
	if value, ok := aic.mutation.Asn(); ok {
		_spec.SetField(asninfo.FieldAsn, field.TypeInt, value)
		_node.Asn = value
	}
	if value, ok := aic.mutation.Country(); ok {
		_spec.SetField(asninfo.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := aic.mutation.Registry(); ok {
		_spec.SetField(asninfo.FieldRegistry, field.TypeString, value)
		_node.Registry = value
	}
	if nodes := aic.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asninfo.ScanTable,
			Columns: asninfo.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asninfo.IpaddressTable,
			Columns: asninfo.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asninfo.RegistrarTable,
			Columns: asninfo.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asninfo.WhoisTable,
			Columns: asninfo.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ASNInfo.Create().
//		SetAsn(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ASNInfoUpsert) {
//			SetAsn(v+v).
//		}).
//		Exec(ctx)
func (aic *ASNInfoCreate) OnConflict(opts ...sql.ConflictOption) *ASNInfoUpsertOne {
	aic.conflict = opts
	return &ASNInfoUpsertOne{
		create: aic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aic *ASNInfoCreate) OnConflictColumns(columns ...string) *ASNInfoUpsertOne {
	aic.conflict = append(aic.conflict, sql.ConflictColumns(columns...))
	return &ASNInfoUpsertOne{
		create: aic,
	}
}

type (
	// ASNInfoUpsertOne is the builder for "upsert"-ing
	//  one ASNInfo node.
	ASNInfoUpsertOne struct {
		create *ASNInfoCreate
	}

	// ASNInfoUpsert is the "OnConflict" setter.
	ASNInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetAsn sets the "asn" field.
func (u *ASNInfoUpsert) SetAsn(v int) *ASNInfoUpsert {
	u.Set(asninfo.FieldAsn, v)
	return u
}

// UpdateAsn sets the "asn" field to the value that was provided on create.
func (u *ASNInfoUpsert) UpdateAsn() *ASNInfoUpsert {
	u.SetExcluded(asninfo.FieldAsn)
	return u
}

// AddAsn adds v to the "asn" field.
func (u *ASNInfoUpsert) AddAsn(v int) *ASNInfoUpsert {
	u.Add(asninfo.FieldAsn, v)
	return u
}

// SetCountry sets the "country" field.
func (u *ASNInfoUpsert) SetCountry(v string) *ASNInfoUpsert {
	u.Set(asninfo.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ASNInfoUpsert) UpdateCountry() *ASNInfoUpsert {
	u.SetExcluded(asninfo.FieldCountry)
	return u
}

// SetRegistry sets the "registry" field.
func (u *ASNInfoUpsert) SetRegistry(v string) *ASNInfoUpsert {
	u.Set(asninfo.FieldRegistry, v)
	return u
}

// UpdateRegistry sets the "registry" field to the value that was provided on create.
func (u *ASNInfoUpsert) UpdateRegistry() *ASNInfoUpsert {
	u.SetExcluded(asninfo.FieldRegistry)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ASNInfoUpsertOne) UpdateNewValues() *ASNInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ASNInfoUpsertOne) Ignore() *ASNInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ASNInfoUpsertOne) DoNothing() *ASNInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ASNInfoCreate.OnConflict
// documentation for more info.
func (u *ASNInfoUpsertOne) Update(set func(*ASNInfoUpsert)) *ASNInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ASNInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetAsn sets the "asn" field.
func (u *ASNInfoUpsertOne) SetAsn(v int) *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetAsn(v)
	})
}

// AddAsn adds v to the "asn" field.
func (u *ASNInfoUpsertOne) AddAsn(v int) *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.AddAsn(v)
	})
}

// UpdateAsn sets the "asn" field to the value that was provided on create.
func (u *ASNInfoUpsertOne) UpdateAsn() *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateAsn()
	})
}

// SetCountry sets the "country" field.
func (u *ASNInfoUpsertOne) SetCountry(v string) *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ASNInfoUpsertOne) UpdateCountry() *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateCountry()
	})
}

// SetRegistry sets the "registry" field.
func (u *ASNInfoUpsertOne) SetRegistry(v string) *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetRegistry(v)
	})
}

// UpdateRegistry sets the "registry" field to the value that was provided on create.
func (u *ASNInfoUpsertOne) UpdateRegistry() *ASNInfoUpsertOne {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateRegistry()
	})
}

// Exec executes the query.
func (u *ASNInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for ASNInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ASNInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ASNInfoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ASNInfoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ASNInfoCreateBulk is the builder for creating many ASNInfo entities in bulk.
type ASNInfoCreateBulk struct {
	config
	err      error
	builders []*ASNInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the ASNInfo entities in the database.
func (aicb *ASNInfoCreateBulk) Save(ctx context.Context) ([]*ASNInfo, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*ASNInfo, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ASNInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *ASNInfoCreateBulk) SaveX(ctx context.Context) []*ASNInfo {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *ASNInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *ASNInfoCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ASNInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ASNInfoUpsert) {
//			SetAsn(v+v).
//		}).
//		Exec(ctx)
func (aicb *ASNInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *ASNInfoUpsertBulk {
	aicb.conflict = opts
	return &ASNInfoUpsertBulk{
		create: aicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aicb *ASNInfoCreateBulk) OnConflictColumns(columns ...string) *ASNInfoUpsertBulk {
	aicb.conflict = append(aicb.conflict, sql.ConflictColumns(columns...))
	return &ASNInfoUpsertBulk{
		create: aicb,
	}
}

// ASNInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of ASNInfo nodes.
type ASNInfoUpsertBulk struct {
	create *ASNInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ASNInfoUpsertBulk) UpdateNewValues() *ASNInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ASNInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ASNInfoUpsertBulk) Ignore() *ASNInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ASNInfoUpsertBulk) DoNothing() *ASNInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ASNInfoCreateBulk.OnConflict
// documentation for more info.
func (u *ASNInfoUpsertBulk) Update(set func(*ASNInfoUpsert)) *ASNInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ASNInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetAsn sets the "asn" field.
func (u *ASNInfoUpsertBulk) SetAsn(v int) *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetAsn(v)
	})
}

// AddAsn adds v to the "asn" field.
func (u *ASNInfoUpsertBulk) AddAsn(v int) *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.AddAsn(v)
	})
}

// UpdateAsn sets the "asn" field to the value that was provided on create.
func (u *ASNInfoUpsertBulk) UpdateAsn() *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateAsn()
	})
}

// SetCountry sets the "country" field.
func (u *ASNInfoUpsertBulk) SetCountry(v string) *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ASNInfoUpsertBulk) UpdateCountry() *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateCountry()
	})
}

// SetRegistry sets the "registry" field.
func (u *ASNInfoUpsertBulk) SetRegistry(v string) *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.SetRegistry(v)
	})
}

// UpdateRegistry sets the "registry" field to the value that was provided on create.
func (u *ASNInfoUpsertBulk) UpdateRegistry() *ASNInfoUpsertBulk {
	return u.Update(func(s *ASNInfoUpsert) {
		s.UpdateRegistry()
	})
}

// Exec executes the query.
func (u *ASNInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model_ent: OnConflict was set for builder %d. Set it on the ASNInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for ASNInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ASNInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
