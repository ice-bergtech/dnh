// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
)

// Scan is the model entity for the Scan schema.
type Scan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Scanid holds the value of the "scanid" field.
	Scanid string `json:"scanid,omitempty"`
	// Input holds the value of the "input" field.
	Input string `json:"input,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScanQuery when eager-loading is set.
	Edges        ScanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScanEdges holds the relations/edges for other nodes in the graph.
type ScanEdges struct {
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// Asninfo holds the value of the asninfo edge.
	Asninfo []*ASNInfo `json:"asninfo,omitempty"`
	// Dnsentry holds the value of the dnsentry edge.
	Dnsentry []*DNSEntry `json:"dnsentry,omitempty"`
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Path holds the value of the path edge.
	Path []*Path `json:"path,omitempty"`
	// Nameserver holds the value of the nameserver edge.
	Nameserver []*Nameserver `json:"nameserver,omitempty"`
	// Registrar holds the value of the registrar edge.
	Registrar []*Registrar `json:"registrar,omitempty"`
	// Whois holds the value of the whois edge.
	Whois []*Whois `json:"whois,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[0] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// AsninfoOrErr returns the Asninfo value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) AsninfoOrErr() ([]*ASNInfo, error) {
	if e.loadedTypes[1] {
		return e.Asninfo, nil
	}
	return nil, &NotLoadedError{edge: "asninfo"}
}

// DnsentryOrErr returns the Dnsentry value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) DnsentryOrErr() ([]*DNSEntry, error) {
	if e.loadedTypes[2] {
		return e.Dnsentry, nil
	}
	return nil, &NotLoadedError{edge: "dnsentry"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[3] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// PathOrErr returns the Path value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) PathOrErr() ([]*Path, error) {
	if e.loadedTypes[4] {
		return e.Path, nil
	}
	return nil, &NotLoadedError{edge: "path"}
}

// NameserverOrErr returns the Nameserver value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) NameserverOrErr() ([]*Nameserver, error) {
	if e.loadedTypes[5] {
		return e.Nameserver, nil
	}
	return nil, &NotLoadedError{edge: "nameserver"}
}

// RegistrarOrErr returns the Registrar value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) RegistrarOrErr() ([]*Registrar, error) {
	if e.loadedTypes[6] {
		return e.Registrar, nil
	}
	return nil, &NotLoadedError{edge: "registrar"}
}

// WhoisOrErr returns the Whois value or an error if the edge
// was not loaded in eager-loading.
func (e ScanEdges) WhoisOrErr() ([]*Whois, error) {
	if e.loadedTypes[7] {
		return e.Whois, nil
	}
	return nil, &NotLoadedError{edge: "whois"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scan.FieldID:
			values[i] = new(sql.NullInt64)
		case scan.FieldScanid, scan.FieldInput, scan.FieldType:
			values[i] = new(sql.NullString)
		case scan.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scan fields.
func (s *Scan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scan.FieldScanid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scanid", values[i])
			} else if value.Valid {
				s.Scanid = value.String
			}
		case scan.FieldInput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value.Valid {
				s.Input = value.String
			}
		case scan.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case scan.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				s.Timestamp = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scan.
// This includes values selected through modifiers, order, etc.
func (s *Scan) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryIpaddress queries the "ipaddress" edge of the Scan entity.
func (s *Scan) QueryIpaddress() *IPAddressQuery {
	return NewScanClient(s.config).QueryIpaddress(s)
}

// QueryAsninfo queries the "asninfo" edge of the Scan entity.
func (s *Scan) QueryAsninfo() *ASNInfoQuery {
	return NewScanClient(s.config).QueryAsninfo(s)
}

// QueryDnsentry queries the "dnsentry" edge of the Scan entity.
func (s *Scan) QueryDnsentry() *DNSEntryQuery {
	return NewScanClient(s.config).QueryDnsentry(s)
}

// QueryDomain queries the "domain" edge of the Scan entity.
func (s *Scan) QueryDomain() *DomainQuery {
	return NewScanClient(s.config).QueryDomain(s)
}

// QueryPath queries the "path" edge of the Scan entity.
func (s *Scan) QueryPath() *PathQuery {
	return NewScanClient(s.config).QueryPath(s)
}

// QueryNameserver queries the "nameserver" edge of the Scan entity.
func (s *Scan) QueryNameserver() *NameserverQuery {
	return NewScanClient(s.config).QueryNameserver(s)
}

// QueryRegistrar queries the "registrar" edge of the Scan entity.
func (s *Scan) QueryRegistrar() *RegistrarQuery {
	return NewScanClient(s.config).QueryRegistrar(s)
}

// QueryWhois queries the "whois" edge of the Scan entity.
func (s *Scan) QueryWhois() *WhoisQuery {
	return NewScanClient(s.config).QueryWhois(s)
}

// Update returns a builder for updating this Scan.
// Note that you need to call Scan.Unwrap() before calling this method if this Scan
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scan) Update() *ScanUpdateOne {
	return NewScanClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scan) Unwrap() *Scan {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Scan is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scan) String() string {
	var builder strings.Builder
	builder.WriteString("Scan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("scanid=")
	builder.WriteString(s.Scanid)
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(s.Input)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(s.Type)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(s.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scans is a parsable slice of Scan.
type Scans []*Scan
