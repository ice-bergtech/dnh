// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
)

// Registrar is the model entity for the Registrar schema.
type Registrar struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode string `json:"country_code,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Fax holds the value of the "fax" field.
	Fax string `json:"fax,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// TimeFirst holds the value of the "time_first" field.
	TimeFirst time.Time `json:"time_first,omitempty"`
	// TimeLast holds the value of the "time_last" field.
	TimeLast time.Time `json:"time_last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegistrarQuery when eager-loading is set.
	Edges             RegistrarEdges `json:"edges"`
	example_registrar *string
	selectValues      sql.SelectValues
}

// RegistrarEdges holds the relations/edges for other nodes in the graph.
type RegistrarEdges struct {
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Asninfo holds the value of the asninfo edge.
	Asninfo []*ASNInfo `json:"asninfo,omitempty"`
	// Scan holds the value of the scan edge.
	Scan []*Scan `json:"scan,omitempty"`
	// Whois holds the value of the whois edge.
	Whois []*Whois `json:"whois,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e RegistrarEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[0] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e RegistrarEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[1] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// AsninfoOrErr returns the Asninfo value or an error if the edge
// was not loaded in eager-loading.
func (e RegistrarEdges) AsninfoOrErr() ([]*ASNInfo, error) {
	if e.loadedTypes[2] {
		return e.Asninfo, nil
	}
	return nil, &NotLoadedError{edge: "asninfo"}
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading.
func (e RegistrarEdges) ScanOrErr() ([]*Scan, error) {
	if e.loadedTypes[3] {
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// WhoisOrErr returns the Whois value or an error if the edge
// was not loaded in eager-loading.
func (e RegistrarEdges) WhoisOrErr() ([]*Whois, error) {
	if e.loadedTypes[4] {
		return e.Whois, nil
	}
	return nil, &NotLoadedError{edge: "whois"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Registrar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registrar.FieldID:
			values[i] = new(sql.NullInt64)
		case registrar.FieldName, registrar.FieldURL, registrar.FieldCountryCode, registrar.FieldPhone, registrar.FieldFax, registrar.FieldAddress, registrar.FieldSource:
			values[i] = new(sql.NullString)
		case registrar.FieldTimeFirst, registrar.FieldTimeLast:
			values[i] = new(sql.NullTime)
		case registrar.ForeignKeys[0]: // example_registrar
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Registrar fields.
func (r *Registrar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registrar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case registrar.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case registrar.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case registrar.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				r.CountryCode = value.String
			}
		case registrar.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				r.Phone = value.String
			}
		case registrar.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax", values[i])
			} else if value.Valid {
				r.Fax = value.String
			}
		case registrar.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				r.Address = value.String
			}
		case registrar.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				r.Source = value.String
			}
		case registrar.FieldTimeFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_first", values[i])
			} else if value.Valid {
				r.TimeFirst = value.Time
			}
		case registrar.FieldTimeLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_last", values[i])
			} else if value.Valid {
				r.TimeLast = value.Time
			}
		case registrar.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field example_registrar", values[i])
			} else if value.Valid {
				r.example_registrar = new(string)
				*r.example_registrar = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Registrar.
// This includes values selected through modifiers, order, etc.
func (r *Registrar) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryIpaddress queries the "ipaddress" edge of the Registrar entity.
func (r *Registrar) QueryIpaddress() *IPAddressQuery {
	return NewRegistrarClient(r.config).QueryIpaddress(r)
}

// QueryDomain queries the "domain" edge of the Registrar entity.
func (r *Registrar) QueryDomain() *DomainQuery {
	return NewRegistrarClient(r.config).QueryDomain(r)
}

// QueryAsninfo queries the "asninfo" edge of the Registrar entity.
func (r *Registrar) QueryAsninfo() *ASNInfoQuery {
	return NewRegistrarClient(r.config).QueryAsninfo(r)
}

// QueryScan queries the "scan" edge of the Registrar entity.
func (r *Registrar) QueryScan() *ScanQuery {
	return NewRegistrarClient(r.config).QueryScan(r)
}

// QueryWhois queries the "whois" edge of the Registrar entity.
func (r *Registrar) QueryWhois() *WhoisQuery {
	return NewRegistrarClient(r.config).QueryWhois(r)
}

// Update returns a builder for updating this Registrar.
// Note that you need to call Registrar.Unwrap() before calling this method if this Registrar
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Registrar) Update() *RegistrarUpdateOne {
	return NewRegistrarClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Registrar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Registrar) Unwrap() *Registrar {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Registrar is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Registrar) String() string {
	var builder strings.Builder
	builder.WriteString("Registrar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(r.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", ")
	builder.WriteString("fax=")
	builder.WriteString(r.Fax)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(r.Address)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(r.Source)
	builder.WriteString(", ")
	builder.WriteString("time_first=")
	builder.WriteString(r.TimeFirst.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_last=")
	builder.WriteString(r.TimeLast.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Registrars is a parsable slice of Registrar.
type Registrars []*Registrar
