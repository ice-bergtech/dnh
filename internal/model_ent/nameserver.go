// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
)

// Nameserver is the model entity for the Nameserver schema.
type Nameserver struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TimeFirst holds the value of the "time_first" field.
	TimeFirst time.Time `json:"time_first,omitempty"`
	// TimeLast holds the value of the "time_last" field.
	TimeLast time.Time `json:"time_last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NameserverQuery when eager-loading is set.
	Edges             NameserverEdges `json:"edges"`
	domain_nameserver *int
	scan_nameserver   *int
	whois_nameservers *int
	selectValues      sql.SelectValues
}

// NameserverEdges holds the relations/edges for other nodes in the graph.
type NameserverEdges struct {
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e NameserverEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[0] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nameserver) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nameserver.FieldID:
			values[i] = new(sql.NullInt64)
		case nameserver.FieldName:
			values[i] = new(sql.NullString)
		case nameserver.FieldTimeFirst, nameserver.FieldTimeLast:
			values[i] = new(sql.NullTime)
		case nameserver.ForeignKeys[0]: // domain_nameserver
			values[i] = new(sql.NullInt64)
		case nameserver.ForeignKeys[1]: // scan_nameserver
			values[i] = new(sql.NullInt64)
		case nameserver.ForeignKeys[2]: // whois_nameservers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nameserver fields.
func (n *Nameserver) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nameserver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case nameserver.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case nameserver.FieldTimeFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_first", values[i])
			} else if value.Valid {
				n.TimeFirst = value.Time
			}
		case nameserver.FieldTimeLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_last", values[i])
			} else if value.Valid {
				n.TimeLast = value.Time
			}
		case nameserver.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field domain_nameserver", value)
			} else if value.Valid {
				n.domain_nameserver = new(int)
				*n.domain_nameserver = int(value.Int64)
			}
		case nameserver.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field scan_nameserver", value)
			} else if value.Valid {
				n.scan_nameserver = new(int)
				*n.scan_nameserver = int(value.Int64)
			}
		case nameserver.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field whois_nameservers", value)
			} else if value.Valid {
				n.whois_nameservers = new(int)
				*n.whois_nameservers = int(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Nameserver.
// This includes values selected through modifiers, order, etc.
func (n *Nameserver) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryIpaddress queries the "ipaddress" edge of the Nameserver entity.
func (n *Nameserver) QueryIpaddress() *IPAddressQuery {
	return NewNameserverClient(n.config).QueryIpaddress(n)
}

// Update returns a builder for updating this Nameserver.
// Note that you need to call Nameserver.Unwrap() before calling this method if this Nameserver
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nameserver) Update() *NameserverUpdateOne {
	return NewNameserverClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Nameserver entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nameserver) Unwrap() *Nameserver {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Nameserver is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nameserver) String() string {
	var builder strings.Builder
	builder.WriteString("Nameserver(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("time_first=")
	builder.WriteString(n.TimeFirst.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_last=")
	builder.WriteString(n.TimeLast.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Nameservers is a parsable slice of Nameserver.
type Nameservers []*Nameserver
