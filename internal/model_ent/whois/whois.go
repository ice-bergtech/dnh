// Code generated by ent, DO NOT EDIT.

package whois

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the whois type in the database.
	Label = "whois"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldServer holds the string denoting the server field in the database.
	FieldServer = "server"
	// FieldRaw holds the string denoting the raw field in the database.
	FieldRaw = "raw"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// FieldTimeFirst holds the string denoting the time_first field in the database.
	FieldTimeFirst = "time_first"
	// FieldTimeLast holds the string denoting the time_last field in the database.
	FieldTimeLast = "time_last"
	// EdgeIprange holds the string denoting the iprange edge name in mutations.
	EdgeIprange = "iprange"
	// EdgeDomain holds the string denoting the domain edge name in mutations.
	EdgeDomain = "domain"
	// EdgeAsn holds the string denoting the asn edge name in mutations.
	EdgeAsn = "asn"
	// EdgeRegistrar holds the string denoting the registrar edge name in mutations.
	EdgeRegistrar = "registrar"
	// EdgeNameservers holds the string denoting the nameservers edge name in mutations.
	EdgeNameservers = "nameservers"
	// Table holds the table name of the whois in the database.
	Table = "whois"
	// IprangeTable is the table that holds the iprange relation/edge.
	IprangeTable = "ip_addresses"
	// IprangeInverseTable is the table name for the IPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "ipaddress" package.
	IprangeInverseTable = "ip_addresses"
	// IprangeColumn is the table column denoting the iprange relation/edge.
	IprangeColumn = "whois_iprange"
	// DomainTable is the table that holds the domain relation/edge.
	DomainTable = "domains"
	// DomainInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "domain" package.
	DomainInverseTable = "domains"
	// DomainColumn is the table column denoting the domain relation/edge.
	DomainColumn = "whois_domain"
	// AsnTable is the table that holds the asn relation/edge.
	AsnTable = "asn_infos"
	// AsnInverseTable is the table name for the ASNInfo entity.
	// It exists in this package in order to avoid circular dependency with the "asninfo" package.
	AsnInverseTable = "asn_infos"
	// AsnColumn is the table column denoting the asn relation/edge.
	AsnColumn = "whois_asn"
	// RegistrarTable is the table that holds the registrar relation/edge.
	RegistrarTable = "registrars"
	// RegistrarInverseTable is the table name for the Registrar entity.
	// It exists in this package in order to avoid circular dependency with the "registrar" package.
	RegistrarInverseTable = "registrars"
	// RegistrarColumn is the table column denoting the registrar relation/edge.
	RegistrarColumn = "whois_registrar"
	// NameserversTable is the table that holds the nameservers relation/edge.
	NameserversTable = "nameservers"
	// NameserversInverseTable is the table name for the Nameserver entity.
	// It exists in this package in order to avoid circular dependency with the "nameserver" package.
	NameserversInverseTable = "nameservers"
	// NameserversColumn is the table column denoting the nameservers relation/edge.
	NameserversColumn = "whois_nameservers"
)

// Columns holds all SQL columns for whois fields.
var Columns = []string{
	FieldID,
	FieldQuery,
	FieldServer,
	FieldRaw,
	FieldCountry,
	FieldCreated,
	FieldUpdated,
	FieldTimeFirst,
	FieldTimeLast,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "whois"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"scan_whois",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Whois queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByServer orders the results by the server field.
func ByServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServer, opts...).ToFunc()
}

// ByRaw orders the results by the raw field.
func ByRaw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRaw, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByUpdated orders the results by the updated field.
func ByUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdated, opts...).ToFunc()
}

// ByTimeFirst orders the results by the time_first field.
func ByTimeFirst(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeFirst, opts...).ToFunc()
}

// ByTimeLast orders the results by the time_last field.
func ByTimeLast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeLast, opts...).ToFunc()
}

// ByIprangeCount orders the results by iprange count.
func ByIprangeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIprangeStep(), opts...)
	}
}

// ByIprange orders the results by iprange terms.
func ByIprange(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIprangeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDomainCount orders the results by domain count.
func ByDomainCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDomainStep(), opts...)
	}
}

// ByDomain orders the results by domain terms.
func ByDomain(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDomainStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAsnCount orders the results by asn count.
func ByAsnCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAsnStep(), opts...)
	}
}

// ByAsn orders the results by asn terms.
func ByAsn(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAsnStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRegistrarCount orders the results by registrar count.
func ByRegistrarCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRegistrarStep(), opts...)
	}
}

// ByRegistrar orders the results by registrar terms.
func ByRegistrar(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegistrarStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNameserversCount orders the results by nameservers count.
func ByNameserversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNameserversStep(), opts...)
	}
}

// ByNameservers orders the results by nameservers terms.
func ByNameservers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNameserversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIprangeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IprangeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IprangeTable, IprangeColumn),
	)
}
func newDomainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DomainInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DomainTable, DomainColumn),
	)
}
func newAsnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AsnInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AsnTable, AsnColumn),
	)
}
func newRegistrarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegistrarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RegistrarTable, RegistrarColumn),
	)
}
func newNameserversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NameserversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NameserversTable, NameserversColumn),
	)
}
