// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dc *DomainCreate) SetName(s string) *DomainCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetPorts sets the "ports" field.
func (dc *DomainCreate) SetPorts(i []int) *DomainCreate {
	dc.mutation.SetPorts(i)
	return dc
}

// SetTimeFirst sets the "time_first" field.
func (dc *DomainCreate) SetTimeFirst(t time.Time) *DomainCreate {
	dc.mutation.SetTimeFirst(t)
	return dc
}

// SetTimeLast sets the "time_last" field.
func (dc *DomainCreate) SetTimeLast(t time.Time) *DomainCreate {
	dc.mutation.SetTimeLast(t)
	return dc
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (dc *DomainCreate) AddNameserverIDs(ids ...int) *DomainCreate {
	dc.mutation.AddNameserverIDs(ids...)
	return dc
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (dc *DomainCreate) AddNameserver(n ...*Nameserver) *DomainCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dc.AddNameserverIDs(ids...)
}

// AddSubdomainIDs adds the "subdomain" edge to the Domain entity by IDs.
func (dc *DomainCreate) AddSubdomainIDs(ids ...int) *DomainCreate {
	dc.mutation.AddSubdomainIDs(ids...)
	return dc
}

// AddSubdomain adds the "subdomain" edges to the Domain entity.
func (dc *DomainCreate) AddSubdomain(d ...*Domain) *DomainCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddSubdomainIDs(ids...)
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (dc *DomainCreate) AddIpaddresIDs(ids ...int) *DomainCreate {
	dc.mutation.AddIpaddresIDs(ids...)
	return dc
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (dc *DomainCreate) AddIpaddress(i ...*IPAddress) *DomainCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dc.AddIpaddresIDs(ids...)
}

// AddPathIDs adds the "path" edge to the Path entity by IDs.
func (dc *DomainCreate) AddPathIDs(ids ...int) *DomainCreate {
	dc.mutation.AddPathIDs(ids...)
	return dc
}

// AddPath adds the "path" edges to the Path entity.
func (dc *DomainCreate) AddPath(p ...*Path) *DomainCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dc.AddPathIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (dc *DomainCreate) AddScanIDs(ids ...int) *DomainCreate {
	dc.mutation.AddScanIDs(ids...)
	return dc
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (dc *DomainCreate) AddScan(s ...*ScanJob) *DomainCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dc.AddScanIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (dc *DomainCreate) AddDnsentryIDs(ids ...int) *DomainCreate {
	dc.mutation.AddDnsentryIDs(ids...)
	return dc
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (dc *DomainCreate) AddDnsentry(d ...*DNSEntry) *DomainCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDnsentryIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (dc *DomainCreate) AddRegistrarIDs(ids ...int) *DomainCreate {
	dc.mutation.AddRegistrarIDs(ids...)
	return dc
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (dc *DomainCreate) AddRegistrar(r ...*Registrar) *DomainCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dc.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (dc *DomainCreate) AddWhoiIDs(ids ...int) *DomainCreate {
	dc.mutation.AddWhoiIDs(ids...)
	return dc
}

// AddWhois adds the "whois" edges to the Whois entity.
func (dc *DomainCreate) AddWhois(w ...*Whois) *DomainCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return dc.AddWhoiIDs(ids...)
}

// Mutation returns the DomainMutation object of the builder.
func (dc *DomainCreate) Mutation() *DomainMutation {
	return dc.mutation
}

// Save creates the Domain in the database.
func (dc *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DomainCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DomainCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DomainCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model_ent: missing required field "Domain.name"`)}
	}
	if _, ok := dc.mutation.Ports(); !ok {
		return &ValidationError{Name: "ports", err: errors.New(`model_ent: missing required field "Domain.ports"`)}
	}
	if _, ok := dc.mutation.TimeFirst(); !ok {
		return &ValidationError{Name: "time_first", err: errors.New(`model_ent: missing required field "Domain.time_first"`)}
	}
	if _, ok := dc.mutation.TimeLast(); !ok {
		return &ValidationError{Name: "time_last", err: errors.New(`model_ent: missing required field "Domain.time_last"`)}
	}
	return nil
}

func (dc *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DomainCreate) createSpec() (*Domain, *sqlgraph.CreateSpec) {
	var (
		_node = &Domain{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(domain.Table, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Ports(); ok {
		_spec.SetField(domain.FieldPorts, field.TypeJSON, value)
		_node.Ports = value
	}
	if value, ok := dc.mutation.TimeFirst(); ok {
		_spec.SetField(domain.FieldTimeFirst, field.TypeTime, value)
		_node.TimeFirst = value
	}
	if value, ok := dc.mutation.TimeLast(); ok {
		_spec.SetField(domain.FieldTimeLast, field.TypeTime, value)
		_node.TimeLast = value
	}
	if nodes := dc.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.NameserverTable,
			Columns: domain.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.SubdomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.SubdomainTable,
			Columns: domain.SubdomainPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.IpaddressTable,
			Columns: domain.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.PathTable,
			Columns: domain.PathPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   domain.ScanTable,
			Columns: domain.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   domain.DnsentryTable,
			Columns: domain.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   domain.RegistrarTable,
			Columns: domain.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   domain.WhoisTable,
			Columns: domain.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dc *DomainCreate) OnConflict(opts ...sql.ConflictOption) *DomainUpsertOne {
	dc.conflict = opts
	return &DomainUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DomainCreate) OnConflictColumns(columns ...string) *DomainUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertOne{
		create: dc,
	}
}

type (
	// DomainUpsertOne is the builder for "upsert"-ing
	//  one Domain node.
	DomainUpsertOne struct {
		create *DomainCreate
	}

	// DomainUpsert is the "OnConflict" setter.
	DomainUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DomainUpsert) SetName(v string) *DomainUpsert {
	u.Set(domain.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsert) UpdateName() *DomainUpsert {
	u.SetExcluded(domain.FieldName)
	return u
}

// SetPorts sets the "ports" field.
func (u *DomainUpsert) SetPorts(v []int) *DomainUpsert {
	u.Set(domain.FieldPorts, v)
	return u
}

// UpdatePorts sets the "ports" field to the value that was provided on create.
func (u *DomainUpsert) UpdatePorts() *DomainUpsert {
	u.SetExcluded(domain.FieldPorts)
	return u
}

// SetTimeFirst sets the "time_first" field.
func (u *DomainUpsert) SetTimeFirst(v time.Time) *DomainUpsert {
	u.Set(domain.FieldTimeFirst, v)
	return u
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *DomainUpsert) UpdateTimeFirst() *DomainUpsert {
	u.SetExcluded(domain.FieldTimeFirst)
	return u
}

// SetTimeLast sets the "time_last" field.
func (u *DomainUpsert) SetTimeLast(v time.Time) *DomainUpsert {
	u.Set(domain.FieldTimeLast, v)
	return u
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *DomainUpsert) UpdateTimeLast() *DomainUpsert {
	u.SetExcluded(domain.FieldTimeLast)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DomainUpsertOne) UpdateNewValues() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DomainUpsertOne) Ignore() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertOne) DoNothing() *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreate.OnConflict
// documentation for more info.
func (u *DomainUpsertOne) Update(set func(*DomainUpsert)) *DomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DomainUpsertOne) SetName(v string) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateName() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateName()
	})
}

// SetPorts sets the "ports" field.
func (u *DomainUpsertOne) SetPorts(v []int) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetPorts(v)
	})
}

// UpdatePorts sets the "ports" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdatePorts() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdatePorts()
	})
}

// SetTimeFirst sets the "time_first" field.
func (u *DomainUpsertOne) SetTimeFirst(v time.Time) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetTimeFirst(v)
	})
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateTimeFirst() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateTimeFirst()
	})
}

// SetTimeLast sets the "time_last" field.
func (u *DomainUpsertOne) SetTimeLast(v time.Time) *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.SetTimeLast(v)
	})
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *DomainUpsertOne) UpdateTimeLast() *DomainUpsertOne {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateTimeLast()
	})
}

// Exec executes the query.
func (u *DomainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for DomainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DomainUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DomainUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DomainCreateBulk is the builder for creating many Domain entities in bulk.
type DomainCreateBulk struct {
	config
	err      error
	builders []*DomainCreate
	conflict []sql.ConflictOption
}

// Save creates the Domain entities in the database.
func (dcb *DomainCreateBulk) Save(ctx context.Context) ([]*Domain, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Domain, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DomainCreateBulk) SaveX(ctx context.Context) []*Domain {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DomainCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DomainCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Domain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DomainUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DomainCreateBulk) OnConflict(opts ...sql.ConflictOption) *DomainUpsertBulk {
	dcb.conflict = opts
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DomainCreateBulk) OnConflictColumns(columns ...string) *DomainUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DomainUpsertBulk{
		create: dcb,
	}
}

// DomainUpsertBulk is the builder for "upsert"-ing
// a bulk of Domain nodes.
type DomainUpsertBulk struct {
	create *DomainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DomainUpsertBulk) UpdateNewValues() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Domain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DomainUpsertBulk) Ignore() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DomainUpsertBulk) DoNothing() *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DomainCreateBulk.OnConflict
// documentation for more info.
func (u *DomainUpsertBulk) Update(set func(*DomainUpsert)) *DomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DomainUpsertBulk) SetName(v string) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateName() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateName()
	})
}

// SetPorts sets the "ports" field.
func (u *DomainUpsertBulk) SetPorts(v []int) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetPorts(v)
	})
}

// UpdatePorts sets the "ports" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdatePorts() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdatePorts()
	})
}

// SetTimeFirst sets the "time_first" field.
func (u *DomainUpsertBulk) SetTimeFirst(v time.Time) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetTimeFirst(v)
	})
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateTimeFirst() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateTimeFirst()
	})
}

// SetTimeLast sets the "time_last" field.
func (u *DomainUpsertBulk) SetTimeLast(v time.Time) *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.SetTimeLast(v)
	})
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *DomainUpsertBulk) UpdateTimeLast() *DomainUpsertBulk {
	return u.Update(func(s *DomainUpsert) {
		s.UpdateTimeLast()
	})
}

// Exec executes the query.
func (u *DomainUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model_ent: OnConflict was set for builder %d. Set it on the DomainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for DomainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DomainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
