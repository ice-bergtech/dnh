// Code generated by ent, DO NOT EDIT.

package nameserver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldName, v))
}

// TimeFirst applies equality check predicate on the "time_first" field. It's identical to TimeFirstEQ.
func TimeFirst(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldTimeFirst, v))
}

// TimeLast applies equality check predicate on the "time_last" field. It's identical to TimeLastEQ.
func TimeLast(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldTimeLast, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldContainsFold(FieldName, v))
}

// TimeFirstEQ applies the EQ predicate on the "time_first" field.
func TimeFirstEQ(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldTimeFirst, v))
}

// TimeFirstNEQ applies the NEQ predicate on the "time_first" field.
func TimeFirstNEQ(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNEQ(FieldTimeFirst, v))
}

// TimeFirstIn applies the In predicate on the "time_first" field.
func TimeFirstIn(vs ...time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldIn(FieldTimeFirst, vs...))
}

// TimeFirstNotIn applies the NotIn predicate on the "time_first" field.
func TimeFirstNotIn(vs ...time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNotIn(FieldTimeFirst, vs...))
}

// TimeFirstGT applies the GT predicate on the "time_first" field.
func TimeFirstGT(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGT(FieldTimeFirst, v))
}

// TimeFirstGTE applies the GTE predicate on the "time_first" field.
func TimeFirstGTE(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGTE(FieldTimeFirst, v))
}

// TimeFirstLT applies the LT predicate on the "time_first" field.
func TimeFirstLT(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLT(FieldTimeFirst, v))
}

// TimeFirstLTE applies the LTE predicate on the "time_first" field.
func TimeFirstLTE(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLTE(FieldTimeFirst, v))
}

// TimeLastEQ applies the EQ predicate on the "time_last" field.
func TimeLastEQ(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldEQ(FieldTimeLast, v))
}

// TimeLastNEQ applies the NEQ predicate on the "time_last" field.
func TimeLastNEQ(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNEQ(FieldTimeLast, v))
}

// TimeLastIn applies the In predicate on the "time_last" field.
func TimeLastIn(vs ...time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldIn(FieldTimeLast, vs...))
}

// TimeLastNotIn applies the NotIn predicate on the "time_last" field.
func TimeLastNotIn(vs ...time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldNotIn(FieldTimeLast, vs...))
}

// TimeLastGT applies the GT predicate on the "time_last" field.
func TimeLastGT(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGT(FieldTimeLast, v))
}

// TimeLastGTE applies the GTE predicate on the "time_last" field.
func TimeLastGTE(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldGTE(FieldTimeLast, v))
}

// TimeLastLT applies the LT predicate on the "time_last" field.
func TimeLastLT(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLT(FieldTimeLast, v))
}

// TimeLastLTE applies the LTE predicate on the "time_last" field.
func TimeLastLTE(v time.Time) predicate.Nameserver {
	return predicate.Nameserver(sql.FieldLTE(FieldTimeLast, v))
}

// HasIpaddress applies the HasEdge predicate on the "ipaddress" edge.
func HasIpaddress() predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IpaddressTable, IpaddressPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIpaddressWith applies the HasEdge predicate on the "ipaddress" edge with a given conditions (other predicates).
func HasIpaddressWith(preds ...predicate.IPAddress) predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := newIpaddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScan applies the HasEdge predicate on the "scan" edge.
func HasScan() predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ScanTable, ScanPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScanWith applies the HasEdge predicate on the "scan" edge with a given conditions (other predicates).
func HasScanWith(preds ...predicate.Scan) predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := newScanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDnsentry applies the HasEdge predicate on the "dnsentry" edge.
func HasDnsentry() predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DnsentryTable, DnsentryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDnsentryWith applies the HasEdge predicate on the "dnsentry" edge with a given conditions (other predicates).
func HasDnsentryWith(preds ...predicate.Scan) predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := newDnsentryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DomainTable, DomainPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.Domain) predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := newDomainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWhois applies the HasEdge predicate on the "whois" edge.
func HasWhois() predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, WhoisTable, WhoisPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhoisWith applies the HasEdge predicate on the "whois" edge with a given conditions (other predicates).
func HasWhoisWith(preds ...predicate.Whois) predicate.Nameserver {
	return predicate.Nameserver(func(s *sql.Selector) {
		step := newWhoisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nameserver) predicate.Nameserver {
	return predicate.Nameserver(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nameserver) predicate.Nameserver {
	return predicate.Nameserver(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nameserver) predicate.Nameserver {
	return predicate.Nameserver(sql.NotPredicates(p))
}
