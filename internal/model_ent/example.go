// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/example"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
)

// Example is the model entity for the Example schema.
type Example struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExampleQuery when eager-loading is set.
	Edges             ExampleEdges `json:"edges"`
	example_ipaddress *int
	selectValues      sql.SelectValues
}

// ExampleEdges holds the relations/edges for other nodes in the graph.
type ExampleEdges struct {
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress *IPAddress `json:"ipaddress,omitempty"`
	// Next holds the value of the next edge.
	Next []*ASNInfo `json:"next,omitempty"`
	// Dnsentry holds the value of the dnsentry edge.
	Dnsentry []*DNSEntry `json:"dnsentry,omitempty"`
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Paths holds the value of the paths edge.
	Paths []*Path `json:"paths,omitempty"`
	// Nameserver holds the value of the nameserver edge.
	Nameserver []*Nameserver `json:"nameserver,omitempty"`
	// Registrar holds the value of the registrar edge.
	Registrar []*Registrar `json:"registrar,omitempty"`
	// Whois holds the value of the whois edge.
	Whois []*Whois `json:"whois,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExampleEdges) IpaddressOrErr() (*IPAddress, error) {
	if e.Ipaddress != nil {
		return e.Ipaddress, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ipaddress.Label}
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// NextOrErr returns the Next value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) NextOrErr() ([]*ASNInfo, error) {
	if e.loadedTypes[1] {
		return e.Next, nil
	}
	return nil, &NotLoadedError{edge: "next"}
}

// DnsentryOrErr returns the Dnsentry value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) DnsentryOrErr() ([]*DNSEntry, error) {
	if e.loadedTypes[2] {
		return e.Dnsentry, nil
	}
	return nil, &NotLoadedError{edge: "dnsentry"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[3] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// PathsOrErr returns the Paths value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) PathsOrErr() ([]*Path, error) {
	if e.loadedTypes[4] {
		return e.Paths, nil
	}
	return nil, &NotLoadedError{edge: "paths"}
}

// NameserverOrErr returns the Nameserver value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) NameserverOrErr() ([]*Nameserver, error) {
	if e.loadedTypes[5] {
		return e.Nameserver, nil
	}
	return nil, &NotLoadedError{edge: "nameserver"}
}

// RegistrarOrErr returns the Registrar value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) RegistrarOrErr() ([]*Registrar, error) {
	if e.loadedTypes[6] {
		return e.Registrar, nil
	}
	return nil, &NotLoadedError{edge: "registrar"}
}

// WhoisOrErr returns the Whois value or an error if the edge
// was not loaded in eager-loading.
func (e ExampleEdges) WhoisOrErr() ([]*Whois, error) {
	if e.loadedTypes[7] {
		return e.Whois, nil
	}
	return nil, &NotLoadedError{edge: "whois"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Example) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case example.FieldID:
			values[i] = new(sql.NullString)
		case example.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case example.ForeignKeys[0]: // example_ipaddress
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Example fields.
func (e *Example) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case example.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case example.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				e.Timestamp = value.Time
			}
		case example.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field example_ipaddress", value)
			} else if value.Valid {
				e.example_ipaddress = new(int)
				*e.example_ipaddress = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Example.
// This includes values selected through modifiers, order, etc.
func (e *Example) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryIpaddress queries the "ipaddress" edge of the Example entity.
func (e *Example) QueryIpaddress() *IPAddressQuery {
	return NewExampleClient(e.config).QueryIpaddress(e)
}

// QueryNext queries the "next" edge of the Example entity.
func (e *Example) QueryNext() *ASNInfoQuery {
	return NewExampleClient(e.config).QueryNext(e)
}

// QueryDnsentry queries the "dnsentry" edge of the Example entity.
func (e *Example) QueryDnsentry() *DNSEntryQuery {
	return NewExampleClient(e.config).QueryDnsentry(e)
}

// QueryDomain queries the "domain" edge of the Example entity.
func (e *Example) QueryDomain() *DomainQuery {
	return NewExampleClient(e.config).QueryDomain(e)
}

// QueryPaths queries the "paths" edge of the Example entity.
func (e *Example) QueryPaths() *PathQuery {
	return NewExampleClient(e.config).QueryPaths(e)
}

// QueryNameserver queries the "nameserver" edge of the Example entity.
func (e *Example) QueryNameserver() *NameserverQuery {
	return NewExampleClient(e.config).QueryNameserver(e)
}

// QueryRegistrar queries the "registrar" edge of the Example entity.
func (e *Example) QueryRegistrar() *RegistrarQuery {
	return NewExampleClient(e.config).QueryRegistrar(e)
}

// QueryWhois queries the "whois" edge of the Example entity.
func (e *Example) QueryWhois() *WhoisQuery {
	return NewExampleClient(e.config).QueryWhois(e)
}

// Update returns a builder for updating this Example.
// Note that you need to call Example.Unwrap() before calling this method if this Example
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Example) Update() *ExampleUpdateOne {
	return NewExampleClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Example entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Example) Unwrap() *Example {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Example is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Example) String() string {
	var builder strings.Builder
	builder.WriteString("Example(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(e.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Examples is a parsable slice of Example.
type Examples []*Example
