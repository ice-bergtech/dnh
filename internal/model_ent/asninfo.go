// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
)

// ASNInfo is the model entity for the ASNInfo schema.
type ASNInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Asn holds the value of the "asn" field.
	Asn int `json:"asn,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Registry holds the value of the "registry" field.
	Registry string `json:"registry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ASNInfoQuery when eager-loading is set.
	Edges        ASNInfoEdges `json:"edges"`
	example_next *string
	selectValues sql.SelectValues
}

// ASNInfoEdges holds the relations/edges for other nodes in the graph.
type ASNInfoEdges struct {
	// Scan holds the value of the scan edge.
	Scan []*Scan `json:"scan,omitempty"`
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// Registrar holds the value of the registrar edge.
	Registrar []*Registrar `json:"registrar,omitempty"`
	// Whois holds the value of the whois edge.
	Whois []*Whois `json:"whois,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading.
func (e ASNInfoEdges) ScanOrErr() ([]*Scan, error) {
	if e.loadedTypes[0] {
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e ASNInfoEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[1] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// RegistrarOrErr returns the Registrar value or an error if the edge
// was not loaded in eager-loading.
func (e ASNInfoEdges) RegistrarOrErr() ([]*Registrar, error) {
	if e.loadedTypes[2] {
		return e.Registrar, nil
	}
	return nil, &NotLoadedError{edge: "registrar"}
}

// WhoisOrErr returns the Whois value or an error if the edge
// was not loaded in eager-loading.
func (e ASNInfoEdges) WhoisOrErr() ([]*Whois, error) {
	if e.loadedTypes[3] {
		return e.Whois, nil
	}
	return nil, &NotLoadedError{edge: "whois"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ASNInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asninfo.FieldID, asninfo.FieldAsn:
			values[i] = new(sql.NullInt64)
		case asninfo.FieldCountry, asninfo.FieldRegistry:
			values[i] = new(sql.NullString)
		case asninfo.ForeignKeys[0]: // example_next
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ASNInfo fields.
func (ai *ASNInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asninfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case asninfo.FieldAsn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asn", values[i])
			} else if value.Valid {
				ai.Asn = int(value.Int64)
			}
		case asninfo.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ai.Country = value.String
			}
		case asninfo.FieldRegistry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry", values[i])
			} else if value.Valid {
				ai.Registry = value.String
			}
		case asninfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field example_next", values[i])
			} else if value.Valid {
				ai.example_next = new(string)
				*ai.example_next = value.String
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ASNInfo.
// This includes values selected through modifiers, order, etc.
func (ai *ASNInfo) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryScan queries the "scan" edge of the ASNInfo entity.
func (ai *ASNInfo) QueryScan() *ScanQuery {
	return NewASNInfoClient(ai.config).QueryScan(ai)
}

// QueryIpaddress queries the "ipaddress" edge of the ASNInfo entity.
func (ai *ASNInfo) QueryIpaddress() *IPAddressQuery {
	return NewASNInfoClient(ai.config).QueryIpaddress(ai)
}

// QueryRegistrar queries the "registrar" edge of the ASNInfo entity.
func (ai *ASNInfo) QueryRegistrar() *RegistrarQuery {
	return NewASNInfoClient(ai.config).QueryRegistrar(ai)
}

// QueryWhois queries the "whois" edge of the ASNInfo entity.
func (ai *ASNInfo) QueryWhois() *WhoisQuery {
	return NewASNInfoClient(ai.config).QueryWhois(ai)
}

// Update returns a builder for updating this ASNInfo.
// Note that you need to call ASNInfo.Unwrap() before calling this method if this ASNInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *ASNInfo) Update() *ASNInfoUpdateOne {
	return NewASNInfoClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the ASNInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *ASNInfo) Unwrap() *ASNInfo {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: ASNInfo is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *ASNInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ASNInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("asn=")
	builder.WriteString(fmt.Sprintf("%v", ai.Asn))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(ai.Country)
	builder.WriteString(", ")
	builder.WriteString("registry=")
	builder.WriteString(ai.Registry)
	builder.WriteByte(')')
	return builder.String()
}

// ASNInfos is a parsable slice of ASNInfo.
type ASNInfos []*ASNInfo
