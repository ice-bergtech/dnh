// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// IPAddressUpdate is the builder for updating IPAddress entities.
type IPAddressUpdate struct {
	config
	hooks    []Hook
	mutation *IPAddressMutation
}

// Where appends a list predicates to the IPAddressUpdate builder.
func (iau *IPAddressUpdate) Where(ps ...predicate.IPAddress) *IPAddressUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetIP sets the "ip" field.
func (iau *IPAddressUpdate) SetIP(s string) *IPAddressUpdate {
	iau.mutation.SetIP(s)
	return iau
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (iau *IPAddressUpdate) SetNillableIP(s *string) *IPAddressUpdate {
	if s != nil {
		iau.SetIP(*s)
	}
	return iau
}

// SetMask sets the "mask" field.
func (iau *IPAddressUpdate) SetMask(s string) *IPAddressUpdate {
	iau.mutation.SetMask(s)
	return iau
}

// SetNillableMask sets the "mask" field if the given value is not nil.
func (iau *IPAddressUpdate) SetNillableMask(s *string) *IPAddressUpdate {
	if s != nil {
		iau.SetMask(*s)
	}
	return iau
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (iau *IPAddressUpdate) AddAsninfoIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddAsninfoIDs(ids...)
	return iau
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (iau *IPAddressUpdate) AddAsninfo(a ...*ASNInfo) *IPAddressUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iau.AddAsninfoIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (iau *IPAddressUpdate) AddScanIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddScanIDs(ids...)
	return iau
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (iau *IPAddressUpdate) AddScan(s ...*ScanJob) *IPAddressUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iau.AddScanIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (iau *IPAddressUpdate) AddDnsentryIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddDnsentryIDs(ids...)
	return iau
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (iau *IPAddressUpdate) AddDnsentry(d ...*DNSEntry) *IPAddressUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iau.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (iau *IPAddressUpdate) AddDomainIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddDomainIDs(ids...)
	return iau
}

// AddDomain adds the "domain" edges to the Domain entity.
func (iau *IPAddressUpdate) AddDomain(d ...*Domain) *IPAddressUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iau.AddDomainIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (iau *IPAddressUpdate) AddNameserverIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddNameserverIDs(ids...)
	return iau
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (iau *IPAddressUpdate) AddNameserver(n ...*Nameserver) *IPAddressUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iau.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (iau *IPAddressUpdate) AddRegistrarIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddRegistrarIDs(ids...)
	return iau
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (iau *IPAddressUpdate) AddRegistrar(r ...*Registrar) *IPAddressUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iau.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (iau *IPAddressUpdate) AddWhoiIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddWhoiIDs(ids...)
	return iau
}

// AddWhois adds the "whois" edges to the Whois entity.
func (iau *IPAddressUpdate) AddWhois(w ...*Whois) *IPAddressUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iau.AddWhoiIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iau *IPAddressUpdate) Mutation() *IPAddressMutation {
	return iau.mutation
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (iau *IPAddressUpdate) ClearAsninfo() *IPAddressUpdate {
	iau.mutation.ClearAsninfo()
	return iau
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (iau *IPAddressUpdate) RemoveAsninfoIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveAsninfoIDs(ids...)
	return iau
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (iau *IPAddressUpdate) RemoveAsninfo(a ...*ASNInfo) *IPAddressUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iau.RemoveAsninfoIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (iau *IPAddressUpdate) ClearScan() *IPAddressUpdate {
	iau.mutation.ClearScan()
	return iau
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (iau *IPAddressUpdate) RemoveScanIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveScanIDs(ids...)
	return iau
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (iau *IPAddressUpdate) RemoveScan(s ...*ScanJob) *IPAddressUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iau.RemoveScanIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (iau *IPAddressUpdate) ClearDnsentry() *IPAddressUpdate {
	iau.mutation.ClearDnsentry()
	return iau
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (iau *IPAddressUpdate) RemoveDnsentryIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveDnsentryIDs(ids...)
	return iau
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (iau *IPAddressUpdate) RemoveDnsentry(d ...*DNSEntry) *IPAddressUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iau.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (iau *IPAddressUpdate) ClearDomain() *IPAddressUpdate {
	iau.mutation.ClearDomain()
	return iau
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (iau *IPAddressUpdate) RemoveDomainIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveDomainIDs(ids...)
	return iau
}

// RemoveDomain removes "domain" edges to Domain entities.
func (iau *IPAddressUpdate) RemoveDomain(d ...*Domain) *IPAddressUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iau.RemoveDomainIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (iau *IPAddressUpdate) ClearNameserver() *IPAddressUpdate {
	iau.mutation.ClearNameserver()
	return iau
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (iau *IPAddressUpdate) RemoveNameserverIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveNameserverIDs(ids...)
	return iau
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (iau *IPAddressUpdate) RemoveNameserver(n ...*Nameserver) *IPAddressUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iau.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (iau *IPAddressUpdate) ClearRegistrar() *IPAddressUpdate {
	iau.mutation.ClearRegistrar()
	return iau
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (iau *IPAddressUpdate) RemoveRegistrarIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveRegistrarIDs(ids...)
	return iau
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (iau *IPAddressUpdate) RemoveRegistrar(r ...*Registrar) *IPAddressUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iau.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (iau *IPAddressUpdate) ClearWhois() *IPAddressUpdate {
	iau.mutation.ClearWhois()
	return iau
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (iau *IPAddressUpdate) RemoveWhoiIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemoveWhoiIDs(ids...)
	return iau
}

// RemoveWhois removes "whois" edges to Whois entities.
func (iau *IPAddressUpdate) RemoveWhois(w ...*Whois) *IPAddressUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iau.RemoveWhoiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *IPAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iau.sqlSave, iau.mutation, iau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iau *IPAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *IPAddressUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *IPAddressUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iau *IPAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaddress.Table, ipaddress.Columns, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.IP(); ok {
		_spec.SetField(ipaddress.FieldIP, field.TypeString, value)
	}
	if value, ok := iau.mutation.Mask(); ok {
		_spec.SetField(ipaddress.FieldMask, field.TypeString, value)
	}
	if iau.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !iau.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedScanIDs(); len(nodes) > 0 && !iau.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !iau.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedDomainIDs(); len(nodes) > 0 && !iau.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !iau.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !iau.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !iau.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iau.mutation.done = true
	return n, nil
}

// IPAddressUpdateOne is the builder for updating a single IPAddress entity.
type IPAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAddressMutation
}

// SetIP sets the "ip" field.
func (iauo *IPAddressUpdateOne) SetIP(s string) *IPAddressUpdateOne {
	iauo.mutation.SetIP(s)
	return iauo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (iauo *IPAddressUpdateOne) SetNillableIP(s *string) *IPAddressUpdateOne {
	if s != nil {
		iauo.SetIP(*s)
	}
	return iauo
}

// SetMask sets the "mask" field.
func (iauo *IPAddressUpdateOne) SetMask(s string) *IPAddressUpdateOne {
	iauo.mutation.SetMask(s)
	return iauo
}

// SetNillableMask sets the "mask" field if the given value is not nil.
func (iauo *IPAddressUpdateOne) SetNillableMask(s *string) *IPAddressUpdateOne {
	if s != nil {
		iauo.SetMask(*s)
	}
	return iauo
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (iauo *IPAddressUpdateOne) AddAsninfoIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddAsninfoIDs(ids...)
	return iauo
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (iauo *IPAddressUpdateOne) AddAsninfo(a ...*ASNInfo) *IPAddressUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iauo.AddAsninfoIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (iauo *IPAddressUpdateOne) AddScanIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddScanIDs(ids...)
	return iauo
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (iauo *IPAddressUpdateOne) AddScan(s ...*ScanJob) *IPAddressUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iauo.AddScanIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (iauo *IPAddressUpdateOne) AddDnsentryIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddDnsentryIDs(ids...)
	return iauo
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (iauo *IPAddressUpdateOne) AddDnsentry(d ...*DNSEntry) *IPAddressUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iauo.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (iauo *IPAddressUpdateOne) AddDomainIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddDomainIDs(ids...)
	return iauo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (iauo *IPAddressUpdateOne) AddDomain(d ...*Domain) *IPAddressUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iauo.AddDomainIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (iauo *IPAddressUpdateOne) AddNameserverIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddNameserverIDs(ids...)
	return iauo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (iauo *IPAddressUpdateOne) AddNameserver(n ...*Nameserver) *IPAddressUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iauo.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (iauo *IPAddressUpdateOne) AddRegistrarIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddRegistrarIDs(ids...)
	return iauo
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (iauo *IPAddressUpdateOne) AddRegistrar(r ...*Registrar) *IPAddressUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iauo.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (iauo *IPAddressUpdateOne) AddWhoiIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddWhoiIDs(ids...)
	return iauo
}

// AddWhois adds the "whois" edges to the Whois entity.
func (iauo *IPAddressUpdateOne) AddWhois(w ...*Whois) *IPAddressUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iauo.AddWhoiIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iauo *IPAddressUpdateOne) Mutation() *IPAddressMutation {
	return iauo.mutation
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (iauo *IPAddressUpdateOne) ClearAsninfo() *IPAddressUpdateOne {
	iauo.mutation.ClearAsninfo()
	return iauo
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveAsninfoIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveAsninfoIDs(ids...)
	return iauo
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (iauo *IPAddressUpdateOne) RemoveAsninfo(a ...*ASNInfo) *IPAddressUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iauo.RemoveAsninfoIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (iauo *IPAddressUpdateOne) ClearScan() *IPAddressUpdateOne {
	iauo.mutation.ClearScan()
	return iauo
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveScanIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveScanIDs(ids...)
	return iauo
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (iauo *IPAddressUpdateOne) RemoveScan(s ...*ScanJob) *IPAddressUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iauo.RemoveScanIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (iauo *IPAddressUpdateOne) ClearDnsentry() *IPAddressUpdateOne {
	iauo.mutation.ClearDnsentry()
	return iauo
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveDnsentryIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveDnsentryIDs(ids...)
	return iauo
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (iauo *IPAddressUpdateOne) RemoveDnsentry(d ...*DNSEntry) *IPAddressUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iauo.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (iauo *IPAddressUpdateOne) ClearDomain() *IPAddressUpdateOne {
	iauo.mutation.ClearDomain()
	return iauo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveDomainIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveDomainIDs(ids...)
	return iauo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (iauo *IPAddressUpdateOne) RemoveDomain(d ...*Domain) *IPAddressUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iauo.RemoveDomainIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (iauo *IPAddressUpdateOne) ClearNameserver() *IPAddressUpdateOne {
	iauo.mutation.ClearNameserver()
	return iauo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveNameserverIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveNameserverIDs(ids...)
	return iauo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (iauo *IPAddressUpdateOne) RemoveNameserver(n ...*Nameserver) *IPAddressUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iauo.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (iauo *IPAddressUpdateOne) ClearRegistrar() *IPAddressUpdateOne {
	iauo.mutation.ClearRegistrar()
	return iauo
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveRegistrarIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveRegistrarIDs(ids...)
	return iauo
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (iauo *IPAddressUpdateOne) RemoveRegistrar(r ...*Registrar) *IPAddressUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iauo.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (iauo *IPAddressUpdateOne) ClearWhois() *IPAddressUpdateOne {
	iauo.mutation.ClearWhois()
	return iauo
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (iauo *IPAddressUpdateOne) RemoveWhoiIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemoveWhoiIDs(ids...)
	return iauo
}

// RemoveWhois removes "whois" edges to Whois entities.
func (iauo *IPAddressUpdateOne) RemoveWhois(w ...*Whois) *IPAddressUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iauo.RemoveWhoiIDs(ids...)
}

// Where appends a list predicates to the IPAddressUpdate builder.
func (iauo *IPAddressUpdateOne) Where(ps ...predicate.IPAddress) *IPAddressUpdateOne {
	iauo.mutation.Where(ps...)
	return iauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *IPAddressUpdateOne) Select(field string, fields ...string) *IPAddressUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated IPAddress entity.
func (iauo *IPAddressUpdateOne) Save(ctx context.Context) (*IPAddress, error) {
	return withHooks(ctx, iauo.sqlSave, iauo.mutation, iauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) SaveX(ctx context.Context) *IPAddress {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *IPAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iauo *IPAddressUpdateOne) sqlSave(ctx context.Context) (_node *IPAddress, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaddress.Table, ipaddress.Columns, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "IPAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaddress.FieldID)
		for _, f := range fields {
			if !ipaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != ipaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.IP(); ok {
		_spec.SetField(ipaddress.FieldIP, field.TypeString, value)
	}
	if value, ok := iauo.mutation.Mask(); ok {
		_spec.SetField(ipaddress.FieldMask, field.TypeString, value)
	}
	if iauo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !iauo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedScanIDs(); len(nodes) > 0 && !iauo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !iauo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !iauo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !iauo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !iauo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !iauo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPAddress{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iauo.mutation.done = true
	return _node, nil
}
