// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// RegistrarCreate is the builder for creating a Registrar entity.
type RegistrarCreate struct {
	config
	mutation *RegistrarMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RegistrarCreate) SetName(s string) *RegistrarCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetURL sets the "url" field.
func (rc *RegistrarCreate) SetURL(s string) *RegistrarCreate {
	rc.mutation.SetURL(s)
	return rc
}

// SetCountryCode sets the "country_code" field.
func (rc *RegistrarCreate) SetCountryCode(s string) *RegistrarCreate {
	rc.mutation.SetCountryCode(s)
	return rc
}

// SetPhone sets the "phone" field.
func (rc *RegistrarCreate) SetPhone(s string) *RegistrarCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetFax sets the "fax" field.
func (rc *RegistrarCreate) SetFax(s string) *RegistrarCreate {
	rc.mutation.SetFax(s)
	return rc
}

// SetAddress sets the "address" field.
func (rc *RegistrarCreate) SetAddress(s string) *RegistrarCreate {
	rc.mutation.SetAddress(s)
	return rc
}

// SetSource sets the "source" field.
func (rc *RegistrarCreate) SetSource(s string) *RegistrarCreate {
	rc.mutation.SetSource(s)
	return rc
}

// SetTimeFirst sets the "time_first" field.
func (rc *RegistrarCreate) SetTimeFirst(t time.Time) *RegistrarCreate {
	rc.mutation.SetTimeFirst(t)
	return rc
}

// SetTimeLast sets the "time_last" field.
func (rc *RegistrarCreate) SetTimeLast(t time.Time) *RegistrarCreate {
	rc.mutation.SetTimeLast(t)
	return rc
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (rc *RegistrarCreate) AddIpaddresIDs(ids ...int) *RegistrarCreate {
	rc.mutation.AddIpaddresIDs(ids...)
	return rc
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (rc *RegistrarCreate) AddIpaddress(i ...*IPAddress) *RegistrarCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIpaddresIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (rc *RegistrarCreate) AddDomainIDs(ids ...int) *RegistrarCreate {
	rc.mutation.AddDomainIDs(ids...)
	return rc
}

// AddDomain adds the "domain" edges to the Domain entity.
func (rc *RegistrarCreate) AddDomain(d ...*Domain) *RegistrarCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rc.AddDomainIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (rc *RegistrarCreate) AddAsninfoIDs(ids ...int) *RegistrarCreate {
	rc.mutation.AddAsninfoIDs(ids...)
	return rc
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (rc *RegistrarCreate) AddAsninfo(a ...*ASNInfo) *RegistrarCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddAsninfoIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (rc *RegistrarCreate) AddScanIDs(ids ...int) *RegistrarCreate {
	rc.mutation.AddScanIDs(ids...)
	return rc
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (rc *RegistrarCreate) AddScan(s ...*ScanJob) *RegistrarCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddScanIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (rc *RegistrarCreate) AddWhoiIDs(ids ...int) *RegistrarCreate {
	rc.mutation.AddWhoiIDs(ids...)
	return rc
}

// AddWhois adds the "whois" edges to the Whois entity.
func (rc *RegistrarCreate) AddWhois(w ...*Whois) *RegistrarCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rc.AddWhoiIDs(ids...)
}

// Mutation returns the RegistrarMutation object of the builder.
func (rc *RegistrarCreate) Mutation() *RegistrarMutation {
	return rc.mutation
}

// Save creates the Registrar in the database.
func (rc *RegistrarCreate) Save(ctx context.Context) (*Registrar, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegistrarCreate) SaveX(ctx context.Context) *Registrar {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegistrarCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegistrarCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegistrarCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model_ent: missing required field "Registrar.name"`)}
	}
	if _, ok := rc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`model_ent: missing required field "Registrar.url"`)}
	}
	if _, ok := rc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`model_ent: missing required field "Registrar.country_code"`)}
	}
	if _, ok := rc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`model_ent: missing required field "Registrar.phone"`)}
	}
	if _, ok := rc.mutation.Fax(); !ok {
		return &ValidationError{Name: "fax", err: errors.New(`model_ent: missing required field "Registrar.fax"`)}
	}
	if _, ok := rc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`model_ent: missing required field "Registrar.address"`)}
	}
	if _, ok := rc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`model_ent: missing required field "Registrar.source"`)}
	}
	if _, ok := rc.mutation.TimeFirst(); !ok {
		return &ValidationError{Name: "time_first", err: errors.New(`model_ent: missing required field "Registrar.time_first"`)}
	}
	if _, ok := rc.mutation.TimeLast(); !ok {
		return &ValidationError{Name: "time_last", err: errors.New(`model_ent: missing required field "Registrar.time_last"`)}
	}
	return nil
}

func (rc *RegistrarCreate) sqlSave(ctx context.Context) (*Registrar, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegistrarCreate) createSpec() (*Registrar, *sqlgraph.CreateSpec) {
	var (
		_node = &Registrar{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(registrar.Table, sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(registrar.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.URL(); ok {
		_spec.SetField(registrar.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := rc.mutation.CountryCode(); ok {
		_spec.SetField(registrar.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.SetField(registrar.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := rc.mutation.Fax(); ok {
		_spec.SetField(registrar.FieldFax, field.TypeString, value)
		_node.Fax = value
	}
	if value, ok := rc.mutation.Address(); ok {
		_spec.SetField(registrar.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := rc.mutation.Source(); ok {
		_spec.SetField(registrar.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := rc.mutation.TimeFirst(); ok {
		_spec.SetField(registrar.FieldTimeFirst, field.TypeTime, value)
		_node.TimeFirst = value
	}
	if value, ok := rc.mutation.TimeLast(); ok {
		_spec.SetField(registrar.FieldTimeLast, field.TypeTime, value)
		_node.TimeLast = value
	}
	if nodes := rc.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   registrar.IpaddressTable,
			Columns: registrar.IpaddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   registrar.DomainTable,
			Columns: registrar.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   registrar.AsninfoTable,
			Columns: registrar.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   registrar.ScanTable,
			Columns: registrar.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   registrar.WhoisTable,
			Columns: registrar.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegistrarCreateBulk is the builder for creating many Registrar entities in bulk.
type RegistrarCreateBulk struct {
	config
	err      error
	builders []*RegistrarCreate
}

// Save creates the Registrar entities in the database.
func (rcb *RegistrarCreateBulk) Save(ctx context.Context) ([]*Registrar, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Registrar, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistrarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegistrarCreateBulk) SaveX(ctx context.Context) []*Registrar {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegistrarCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegistrarCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
