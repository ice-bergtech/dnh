// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/example"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ExampleUpdate is the builder for updating Example entities.
type ExampleUpdate struct {
	config
	hooks    []Hook
	mutation *ExampleMutation
}

// Where appends a list predicates to the ExampleUpdate builder.
func (eu *ExampleUpdate) Where(ps ...predicate.Example) *ExampleUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTimestamp sets the "timestamp" field.
func (eu *ExampleUpdate) SetTimestamp(t time.Time) *ExampleUpdate {
	eu.mutation.SetTimestamp(t)
	return eu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableTimestamp(t *time.Time) *ExampleUpdate {
	if t != nil {
		eu.SetTimestamp(*t)
	}
	return eu
}

// SetIpaddressID sets the "ipaddress" edge to the IPAddress entity by ID.
func (eu *ExampleUpdate) SetIpaddressID(id int) *ExampleUpdate {
	eu.mutation.SetIpaddressID(id)
	return eu
}

// SetNillableIpaddressID sets the "ipaddress" edge to the IPAddress entity by ID if the given value is not nil.
func (eu *ExampleUpdate) SetNillableIpaddressID(id *int) *ExampleUpdate {
	if id != nil {
		eu = eu.SetIpaddressID(*id)
	}
	return eu
}

// SetIpaddress sets the "ipaddress" edge to the IPAddress entity.
func (eu *ExampleUpdate) SetIpaddress(i *IPAddress) *ExampleUpdate {
	return eu.SetIpaddressID(i.ID)
}

// AddNextIDs adds the "next" edge to the ASNInfo entity by IDs.
func (eu *ExampleUpdate) AddNextIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddNextIDs(ids...)
	return eu
}

// AddNext adds the "next" edges to the ASNInfo entity.
func (eu *ExampleUpdate) AddNext(a ...*ASNInfo) *ExampleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddNextIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (eu *ExampleUpdate) AddDnsentryIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddDnsentryIDs(ids...)
	return eu
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (eu *ExampleUpdate) AddDnsentry(d ...*DNSEntry) *ExampleUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (eu *ExampleUpdate) AddDomainIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddDomainIDs(ids...)
	return eu
}

// AddDomain adds the "domain" edges to the Domain entity.
func (eu *ExampleUpdate) AddDomain(d ...*Domain) *ExampleUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDomainIDs(ids...)
}

// AddPathIDs adds the "paths" edge to the Path entity by IDs.
func (eu *ExampleUpdate) AddPathIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddPathIDs(ids...)
	return eu
}

// AddPaths adds the "paths" edges to the Path entity.
func (eu *ExampleUpdate) AddPaths(p ...*Path) *ExampleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (eu *ExampleUpdate) AddNameserverIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddNameserverIDs(ids...)
	return eu
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (eu *ExampleUpdate) AddNameserver(n ...*Nameserver) *ExampleUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (eu *ExampleUpdate) AddRegistrarIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddRegistrarIDs(ids...)
	return eu
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (eu *ExampleUpdate) AddRegistrar(r ...*Registrar) *ExampleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (eu *ExampleUpdate) AddWhoiIDs(ids ...int) *ExampleUpdate {
	eu.mutation.AddWhoiIDs(ids...)
	return eu
}

// AddWhois adds the "whois" edges to the Whois entity.
func (eu *ExampleUpdate) AddWhois(w ...*Whois) *ExampleUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddWhoiIDs(ids...)
}

// Mutation returns the ExampleMutation object of the builder.
func (eu *ExampleUpdate) Mutation() *ExampleMutation {
	return eu.mutation
}

// ClearIpaddress clears the "ipaddress" edge to the IPAddress entity.
func (eu *ExampleUpdate) ClearIpaddress() *ExampleUpdate {
	eu.mutation.ClearIpaddress()
	return eu
}

// ClearNext clears all "next" edges to the ASNInfo entity.
func (eu *ExampleUpdate) ClearNext() *ExampleUpdate {
	eu.mutation.ClearNext()
	return eu
}

// RemoveNextIDs removes the "next" edge to ASNInfo entities by IDs.
func (eu *ExampleUpdate) RemoveNextIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveNextIDs(ids...)
	return eu
}

// RemoveNext removes "next" edges to ASNInfo entities.
func (eu *ExampleUpdate) RemoveNext(a ...*ASNInfo) *ExampleUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveNextIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (eu *ExampleUpdate) ClearDnsentry() *ExampleUpdate {
	eu.mutation.ClearDnsentry()
	return eu
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (eu *ExampleUpdate) RemoveDnsentryIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveDnsentryIDs(ids...)
	return eu
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (eu *ExampleUpdate) RemoveDnsentry(d ...*DNSEntry) *ExampleUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (eu *ExampleUpdate) ClearDomain() *ExampleUpdate {
	eu.mutation.ClearDomain()
	return eu
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (eu *ExampleUpdate) RemoveDomainIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveDomainIDs(ids...)
	return eu
}

// RemoveDomain removes "domain" edges to Domain entities.
func (eu *ExampleUpdate) RemoveDomain(d ...*Domain) *ExampleUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDomainIDs(ids...)
}

// ClearPaths clears all "paths" edges to the Path entity.
func (eu *ExampleUpdate) ClearPaths() *ExampleUpdate {
	eu.mutation.ClearPaths()
	return eu
}

// RemovePathIDs removes the "paths" edge to Path entities by IDs.
func (eu *ExampleUpdate) RemovePathIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemovePathIDs(ids...)
	return eu
}

// RemovePaths removes "paths" edges to Path entities.
func (eu *ExampleUpdate) RemovePaths(p ...*Path) *ExampleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (eu *ExampleUpdate) ClearNameserver() *ExampleUpdate {
	eu.mutation.ClearNameserver()
	return eu
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (eu *ExampleUpdate) RemoveNameserverIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveNameserverIDs(ids...)
	return eu
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (eu *ExampleUpdate) RemoveNameserver(n ...*Nameserver) *ExampleUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (eu *ExampleUpdate) ClearRegistrar() *ExampleUpdate {
	eu.mutation.ClearRegistrar()
	return eu
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (eu *ExampleUpdate) RemoveRegistrarIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveRegistrarIDs(ids...)
	return eu
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (eu *ExampleUpdate) RemoveRegistrar(r ...*Registrar) *ExampleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (eu *ExampleUpdate) ClearWhois() *ExampleUpdate {
	eu.mutation.ClearWhois()
	return eu
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (eu *ExampleUpdate) RemoveWhoiIDs(ids ...int) *ExampleUpdate {
	eu.mutation.RemoveWhoiIDs(ids...)
	return eu
}

// RemoveWhois removes "whois" edges to Whois entities.
func (eu *ExampleUpdate) RemoveWhois(w ...*Whois) *ExampleUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveWhoiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExampleUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExampleUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Timestamp(); ok {
		_spec.SetField(example.FieldTimestamp, field.TypeTime, value)
	}
	if eu.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   example.IpaddressTable,
			Columns: []string{example.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   example.IpaddressTable,
			Columns: []string{example.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNextIDs(); len(nodes) > 0 && !eu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !eu.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDomainIDs(); len(nodes) > 0 && !eu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPathsIDs(); len(nodes) > 0 && !eu.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !eu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !eu.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !eu.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExampleUpdateOne is the builder for updating a single Example entity.
type ExampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExampleMutation
}

// SetTimestamp sets the "timestamp" field.
func (euo *ExampleUpdateOne) SetTimestamp(t time.Time) *ExampleUpdateOne {
	euo.mutation.SetTimestamp(t)
	return euo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableTimestamp(t *time.Time) *ExampleUpdateOne {
	if t != nil {
		euo.SetTimestamp(*t)
	}
	return euo
}

// SetIpaddressID sets the "ipaddress" edge to the IPAddress entity by ID.
func (euo *ExampleUpdateOne) SetIpaddressID(id int) *ExampleUpdateOne {
	euo.mutation.SetIpaddressID(id)
	return euo
}

// SetNillableIpaddressID sets the "ipaddress" edge to the IPAddress entity by ID if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableIpaddressID(id *int) *ExampleUpdateOne {
	if id != nil {
		euo = euo.SetIpaddressID(*id)
	}
	return euo
}

// SetIpaddress sets the "ipaddress" edge to the IPAddress entity.
func (euo *ExampleUpdateOne) SetIpaddress(i *IPAddress) *ExampleUpdateOne {
	return euo.SetIpaddressID(i.ID)
}

// AddNextIDs adds the "next" edge to the ASNInfo entity by IDs.
func (euo *ExampleUpdateOne) AddNextIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddNextIDs(ids...)
	return euo
}

// AddNext adds the "next" edges to the ASNInfo entity.
func (euo *ExampleUpdateOne) AddNext(a ...*ASNInfo) *ExampleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddNextIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (euo *ExampleUpdateOne) AddDnsentryIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddDnsentryIDs(ids...)
	return euo
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (euo *ExampleUpdateOne) AddDnsentry(d ...*DNSEntry) *ExampleUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (euo *ExampleUpdateOne) AddDomainIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddDomainIDs(ids...)
	return euo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (euo *ExampleUpdateOne) AddDomain(d ...*Domain) *ExampleUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDomainIDs(ids...)
}

// AddPathIDs adds the "paths" edge to the Path entity by IDs.
func (euo *ExampleUpdateOne) AddPathIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddPathIDs(ids...)
	return euo
}

// AddPaths adds the "paths" edges to the Path entity.
func (euo *ExampleUpdateOne) AddPaths(p ...*Path) *ExampleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (euo *ExampleUpdateOne) AddNameserverIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddNameserverIDs(ids...)
	return euo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (euo *ExampleUpdateOne) AddNameserver(n ...*Nameserver) *ExampleUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (euo *ExampleUpdateOne) AddRegistrarIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddRegistrarIDs(ids...)
	return euo
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (euo *ExampleUpdateOne) AddRegistrar(r ...*Registrar) *ExampleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (euo *ExampleUpdateOne) AddWhoiIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.AddWhoiIDs(ids...)
	return euo
}

// AddWhois adds the "whois" edges to the Whois entity.
func (euo *ExampleUpdateOne) AddWhois(w ...*Whois) *ExampleUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddWhoiIDs(ids...)
}

// Mutation returns the ExampleMutation object of the builder.
func (euo *ExampleUpdateOne) Mutation() *ExampleMutation {
	return euo.mutation
}

// ClearIpaddress clears the "ipaddress" edge to the IPAddress entity.
func (euo *ExampleUpdateOne) ClearIpaddress() *ExampleUpdateOne {
	euo.mutation.ClearIpaddress()
	return euo
}

// ClearNext clears all "next" edges to the ASNInfo entity.
func (euo *ExampleUpdateOne) ClearNext() *ExampleUpdateOne {
	euo.mutation.ClearNext()
	return euo
}

// RemoveNextIDs removes the "next" edge to ASNInfo entities by IDs.
func (euo *ExampleUpdateOne) RemoveNextIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveNextIDs(ids...)
	return euo
}

// RemoveNext removes "next" edges to ASNInfo entities.
func (euo *ExampleUpdateOne) RemoveNext(a ...*ASNInfo) *ExampleUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveNextIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (euo *ExampleUpdateOne) ClearDnsentry() *ExampleUpdateOne {
	euo.mutation.ClearDnsentry()
	return euo
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (euo *ExampleUpdateOne) RemoveDnsentryIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveDnsentryIDs(ids...)
	return euo
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (euo *ExampleUpdateOne) RemoveDnsentry(d ...*DNSEntry) *ExampleUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (euo *ExampleUpdateOne) ClearDomain() *ExampleUpdateOne {
	euo.mutation.ClearDomain()
	return euo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (euo *ExampleUpdateOne) RemoveDomainIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveDomainIDs(ids...)
	return euo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (euo *ExampleUpdateOne) RemoveDomain(d ...*Domain) *ExampleUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDomainIDs(ids...)
}

// ClearPaths clears all "paths" edges to the Path entity.
func (euo *ExampleUpdateOne) ClearPaths() *ExampleUpdateOne {
	euo.mutation.ClearPaths()
	return euo
}

// RemovePathIDs removes the "paths" edge to Path entities by IDs.
func (euo *ExampleUpdateOne) RemovePathIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemovePathIDs(ids...)
	return euo
}

// RemovePaths removes "paths" edges to Path entities.
func (euo *ExampleUpdateOne) RemovePaths(p ...*Path) *ExampleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (euo *ExampleUpdateOne) ClearNameserver() *ExampleUpdateOne {
	euo.mutation.ClearNameserver()
	return euo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (euo *ExampleUpdateOne) RemoveNameserverIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveNameserverIDs(ids...)
	return euo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (euo *ExampleUpdateOne) RemoveNameserver(n ...*Nameserver) *ExampleUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (euo *ExampleUpdateOne) ClearRegistrar() *ExampleUpdateOne {
	euo.mutation.ClearRegistrar()
	return euo
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (euo *ExampleUpdateOne) RemoveRegistrarIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveRegistrarIDs(ids...)
	return euo
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (euo *ExampleUpdateOne) RemoveRegistrar(r ...*Registrar) *ExampleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (euo *ExampleUpdateOne) ClearWhois() *ExampleUpdateOne {
	euo.mutation.ClearWhois()
	return euo
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (euo *ExampleUpdateOne) RemoveWhoiIDs(ids ...int) *ExampleUpdateOne {
	euo.mutation.RemoveWhoiIDs(ids...)
	return euo
}

// RemoveWhois removes "whois" edges to Whois entities.
func (euo *ExampleUpdateOne) RemoveWhois(w ...*Whois) *ExampleUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveWhoiIDs(ids...)
}

// Where appends a list predicates to the ExampleUpdate builder.
func (euo *ExampleUpdateOne) Where(ps ...predicate.Example) *ExampleUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExampleUpdateOne) Select(field string, fields ...string) *ExampleUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Example entity.
func (euo *ExampleUpdateOne) Save(ctx context.Context) (*Example, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExampleUpdateOne) SaveX(ctx context.Context) *Example {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExampleUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExampleUpdateOne) sqlSave(ctx context.Context) (_node *Example, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "Example.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, example.FieldID)
		for _, f := range fields {
			if !example.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != example.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Timestamp(); ok {
		_spec.SetField(example.FieldTimestamp, field.TypeTime, value)
	}
	if euo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   example.IpaddressTable,
			Columns: []string{example.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   example.IpaddressTable,
			Columns: []string{example.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNextIDs(); len(nodes) > 0 && !euo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NextTable,
			Columns: []string{example.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !euo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DnsentryTable,
			Columns: []string{example.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !euo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.DomainTable,
			Columns: []string{example.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPathsIDs(); len(nodes) > 0 && !euo.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.PathsTable,
			Columns: []string{example.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !euo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.NameserverTable,
			Columns: []string{example.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !euo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.RegistrarTable,
			Columns: []string{example.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !euo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   example.WhoisTable,
			Columns: []string{example.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Example{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
