// Code generated by ent, DO NOT EDIT.

package scanjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldID, id))
}

// Scanid applies equality check predicate on the "scanid" field. It's identical to ScanidEQ.
func Scanid(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldScanid, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldTimeout, v))
}

// Input applies equality check predicate on the "input" field. It's identical to InputEQ.
func Input(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldInput, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldOutput, v))
}

// Command applies equality check predicate on the "command" field. It's identical to CommandEQ.
func Command(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldCommand, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldTimestamp, v))
}

// ScanidEQ applies the EQ predicate on the "scanid" field.
func ScanidEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldScanid, v))
}

// ScanidNEQ applies the NEQ predicate on the "scanid" field.
func ScanidNEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldScanid, v))
}

// ScanidIn applies the In predicate on the "scanid" field.
func ScanidIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldScanid, vs...))
}

// ScanidNotIn applies the NotIn predicate on the "scanid" field.
func ScanidNotIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldScanid, vs...))
}

// ScanidGT applies the GT predicate on the "scanid" field.
func ScanidGT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldScanid, v))
}

// ScanidGTE applies the GTE predicate on the "scanid" field.
func ScanidGTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldScanid, v))
}

// ScanidLT applies the LT predicate on the "scanid" field.
func ScanidLT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldScanid, v))
}

// ScanidLTE applies the LTE predicate on the "scanid" field.
func ScanidLTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldScanid, v))
}

// ScanidContains applies the Contains predicate on the "scanid" field.
func ScanidContains(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContains(FieldScanid, v))
}

// ScanidHasPrefix applies the HasPrefix predicate on the "scanid" field.
func ScanidHasPrefix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasPrefix(FieldScanid, v))
}

// ScanidHasSuffix applies the HasSuffix predicate on the "scanid" field.
func ScanidHasSuffix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasSuffix(FieldScanid, v))
}

// ScanidEqualFold applies the EqualFold predicate on the "scanid" field.
func ScanidEqualFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEqualFold(FieldScanid, v))
}

// ScanidContainsFold applies the ContainsFold predicate on the "scanid" field.
func ScanidContainsFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContainsFold(FieldScanid, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldTimeout, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldStatus, vs...))
}

// InputEQ applies the EQ predicate on the "input" field.
func InputEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldInput, v))
}

// InputNEQ applies the NEQ predicate on the "input" field.
func InputNEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldInput, v))
}

// InputIn applies the In predicate on the "input" field.
func InputIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldInput, vs...))
}

// InputNotIn applies the NotIn predicate on the "input" field.
func InputNotIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldInput, vs...))
}

// InputGT applies the GT predicate on the "input" field.
func InputGT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldInput, v))
}

// InputGTE applies the GTE predicate on the "input" field.
func InputGTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldInput, v))
}

// InputLT applies the LT predicate on the "input" field.
func InputLT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldInput, v))
}

// InputLTE applies the LTE predicate on the "input" field.
func InputLTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldInput, v))
}

// InputContains applies the Contains predicate on the "input" field.
func InputContains(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContains(FieldInput, v))
}

// InputHasPrefix applies the HasPrefix predicate on the "input" field.
func InputHasPrefix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasPrefix(FieldInput, v))
}

// InputHasSuffix applies the HasSuffix predicate on the "input" field.
func InputHasSuffix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasSuffix(FieldInput, v))
}

// InputEqualFold applies the EqualFold predicate on the "input" field.
func InputEqualFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEqualFold(FieldInput, v))
}

// InputContainsFold applies the ContainsFold predicate on the "input" field.
func InputContainsFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContainsFold(FieldInput, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContainsFold(FieldOutput, v))
}

// CommandEQ applies the EQ predicate on the "command" field.
func CommandEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldCommand, v))
}

// CommandNEQ applies the NEQ predicate on the "command" field.
func CommandNEQ(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldCommand, v))
}

// CommandIn applies the In predicate on the "command" field.
func CommandIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldCommand, vs...))
}

// CommandNotIn applies the NotIn predicate on the "command" field.
func CommandNotIn(vs ...string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldCommand, vs...))
}

// CommandGT applies the GT predicate on the "command" field.
func CommandGT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldCommand, v))
}

// CommandGTE applies the GTE predicate on the "command" field.
func CommandGTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldCommand, v))
}

// CommandLT applies the LT predicate on the "command" field.
func CommandLT(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldCommand, v))
}

// CommandLTE applies the LTE predicate on the "command" field.
func CommandLTE(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldCommand, v))
}

// CommandContains applies the Contains predicate on the "command" field.
func CommandContains(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContains(FieldCommand, v))
}

// CommandHasPrefix applies the HasPrefix predicate on the "command" field.
func CommandHasPrefix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasPrefix(FieldCommand, v))
}

// CommandHasSuffix applies the HasSuffix predicate on the "command" field.
func CommandHasSuffix(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldHasSuffix(FieldCommand, v))
}

// CommandEqualFold applies the EqualFold predicate on the "command" field.
func CommandEqualFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEqualFold(FieldCommand, v))
}

// CommandContainsFold applies the ContainsFold predicate on the "command" field.
func CommandContainsFold(v string) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldContainsFold(FieldCommand, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.ScanJob {
	return predicate.ScanJob(sql.FieldLTE(FieldTimestamp, v))
}

// HasIpaddress applies the HasEdge predicate on the "ipaddress" edge.
func HasIpaddress() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IpaddressTable, IpaddressPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIpaddressWith applies the HasEdge predicate on the "ipaddress" edge with a given conditions (other predicates).
func HasIpaddressWith(preds ...predicate.IPAddress) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newIpaddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsninfo applies the HasEdge predicate on the "asninfo" edge.
func HasAsninfo() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AsninfoTable, AsninfoPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAsninfoWith applies the HasEdge predicate on the "asninfo" edge with a given conditions (other predicates).
func HasAsninfoWith(preds ...predicate.ASNInfo) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newAsninfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDnsentry applies the HasEdge predicate on the "dnsentry" edge.
func HasDnsentry() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DnsentryTable, DnsentryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDnsentryWith applies the HasEdge predicate on the "dnsentry" edge with a given conditions (other predicates).
func HasDnsentryWith(preds ...predicate.DNSEntry) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newDnsentryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DomainTable, DomainPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.Domain) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newDomainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPath applies the HasEdge predicate on the "path" edge.
func HasPath() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PathTable, PathPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPathWith applies the HasEdge predicate on the "path" edge with a given conditions (other predicates).
func HasPathWith(preds ...predicate.Path) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newPathStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNameserver applies the HasEdge predicate on the "nameserver" edge.
func HasNameserver() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NameserverTable, NameserverPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNameserverWith applies the HasEdge predicate on the "nameserver" edge with a given conditions (other predicates).
func HasNameserverWith(preds ...predicate.Nameserver) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newNameserverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistrar applies the HasEdge predicate on the "registrar" edge.
func HasRegistrar() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RegistrarTable, RegistrarPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistrarWith applies the HasEdge predicate on the "registrar" edge with a given conditions (other predicates).
func HasRegistrarWith(preds ...predicate.Registrar) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newRegistrarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWhois applies the HasEdge predicate on the "whois" edge.
func HasWhois() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, WhoisTable, WhoisPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhoisWith applies the HasEdge predicate on the "whois" edge with a given conditions (other predicates).
func HasWhoisWith(preds ...predicate.Whois) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newWhoisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScan applies the HasEdge predicate on the "scan" edge.
func HasScan() predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ScanTable, ScanPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScanWith applies the HasEdge predicate on the "scan" edge with a given conditions (other predicates).
func HasScanWith(preds ...predicate.Scan) predicate.ScanJob {
	return predicate.ScanJob(func(s *sql.Selector) {
		step := newScanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScanJob) predicate.ScanJob {
	return predicate.ScanJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScanJob) predicate.ScanJob {
	return predicate.ScanJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScanJob) predicate.ScanJob {
	return predicate.ScanJob(sql.NotPredicates(p))
}
