// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// TimeFirst holds the value of the "time_first" field.
	TimeFirst time.Time `json:"time_first,omitempty"`
	// TimeLast holds the value of the "time_last" field.
	TimeLast time.Time `json:"time_last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges        DomainEdges `json:"edges"`
	scan_domain  *int
	whois_domain *int
	selectValues sql.SelectValues
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// Nameserver holds the value of the nameserver edge.
	Nameserver []*Nameserver `json:"nameserver,omitempty"`
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Dnsentry holds the value of the dnsentry edge.
	Dnsentry []*DNSEntry `json:"dnsentry,omitempty"`
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// Path holds the value of the path edge.
	Path []*Path `json:"path,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// NameserverOrErr returns the Nameserver value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) NameserverOrErr() ([]*Nameserver, error) {
	if e.loadedTypes[0] {
		return e.Nameserver, nil
	}
	return nil, &NotLoadedError{edge: "nameserver"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[1] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// DnsentryOrErr returns the Dnsentry value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) DnsentryOrErr() ([]*DNSEntry, error) {
	if e.loadedTypes[2] {
		return e.Dnsentry, nil
	}
	return nil, &NotLoadedError{edge: "dnsentry"}
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[3] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// PathOrErr returns the Path value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) PathOrErr() ([]*Path, error) {
	if e.loadedTypes[4] {
		return e.Path, nil
	}
	return nil, &NotLoadedError{edge: "path"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			values[i] = new(sql.NullInt64)
		case domain.FieldName:
			values[i] = new(sql.NullString)
		case domain.FieldTimeFirst, domain.FieldTimeLast:
			values[i] = new(sql.NullTime)
		case domain.ForeignKeys[0]: // scan_domain
			values[i] = new(sql.NullInt64)
		case domain.ForeignKeys[1]: // whois_domain
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (d *Domain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case domain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case domain.FieldTimeFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_first", values[i])
			} else if value.Valid {
				d.TimeFirst = value.Time
			}
		case domain.FieldTimeLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_last", values[i])
			} else if value.Valid {
				d.TimeLast = value.Time
			}
		case domain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field scan_domain", value)
			} else if value.Valid {
				d.scan_domain = new(int)
				*d.scan_domain = int(value.Int64)
			}
		case domain.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field whois_domain", value)
			} else if value.Valid {
				d.whois_domain = new(int)
				*d.whois_domain = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Domain.
// This includes values selected through modifiers, order, etc.
func (d *Domain) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryNameserver queries the "nameserver" edge of the Domain entity.
func (d *Domain) QueryNameserver() *NameserverQuery {
	return NewDomainClient(d.config).QueryNameserver(d)
}

// QueryDomain queries the "domain" edge of the Domain entity.
func (d *Domain) QueryDomain() *DomainQuery {
	return NewDomainClient(d.config).QueryDomain(d)
}

// QueryDnsentry queries the "dnsentry" edge of the Domain entity.
func (d *Domain) QueryDnsentry() *DNSEntryQuery {
	return NewDomainClient(d.config).QueryDnsentry(d)
}

// QueryIpaddress queries the "ipaddress" edge of the Domain entity.
func (d *Domain) QueryIpaddress() *IPAddressQuery {
	return NewDomainClient(d.config).QueryIpaddress(d)
}

// QueryPath queries the "path" edge of the Domain entity.
func (d *Domain) QueryPath() *PathQuery {
	return NewDomainClient(d.config).QueryPath(d)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Domain) Update() *DomainUpdateOne {
	return NewDomainClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Domain) Unwrap() *Domain {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: Domain is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("time_first=")
	builder.WriteString(d.TimeFirst.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_last=")
	builder.WriteString(d.TimeLast.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain
