// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks    []Hook
	mutation *ScanMutation
}

// Where appends a list predicates to the ScanUpdate builder.
func (su *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetScanid sets the "scanid" field.
func (su *ScanUpdate) SetScanid(s string) *ScanUpdate {
	su.mutation.SetScanid(s)
	return su
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (su *ScanUpdate) SetNillableScanid(s *string) *ScanUpdate {
	if s != nil {
		su.SetScanid(*s)
	}
	return su
}

// SetTimestamp sets the "timestamp" field.
func (su *ScanUpdate) SetTimestamp(t time.Time) *ScanUpdate {
	su.mutation.SetTimestamp(t)
	return su
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (su *ScanUpdate) SetNillableTimestamp(t *time.Time) *ScanUpdate {
	if t != nil {
		su.SetTimestamp(*t)
	}
	return su
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (su *ScanUpdate) AddIpaddresIDs(ids ...int) *ScanUpdate {
	su.mutation.AddIpaddresIDs(ids...)
	return su
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (su *ScanUpdate) AddIpaddress(i ...*IPAddress) *ScanUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddIpaddresIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (su *ScanUpdate) AddAsninfoIDs(ids ...int) *ScanUpdate {
	su.mutation.AddAsninfoIDs(ids...)
	return su
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (su *ScanUpdate) AddAsninfo(a ...*ASNInfo) *ScanUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAsninfoIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (su *ScanUpdate) AddDnsentryIDs(ids ...int) *ScanUpdate {
	su.mutation.AddDnsentryIDs(ids...)
	return su
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (su *ScanUpdate) AddDnsentry(d ...*DNSEntry) *ScanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (su *ScanUpdate) AddDomainIDs(ids ...int) *ScanUpdate {
	su.mutation.AddDomainIDs(ids...)
	return su
}

// AddDomain adds the "domain" edges to the Domain entity.
func (su *ScanUpdate) AddDomain(d ...*Domain) *ScanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDomainIDs(ids...)
}

// AddPathIDs adds the "paths" edge to the Path entity by IDs.
func (su *ScanUpdate) AddPathIDs(ids ...int) *ScanUpdate {
	su.mutation.AddPathIDs(ids...)
	return su
}

// AddPaths adds the "paths" edges to the Path entity.
func (su *ScanUpdate) AddPaths(p ...*Path) *ScanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (su *ScanUpdate) AddNameserverIDs(ids ...int) *ScanUpdate {
	su.mutation.AddNameserverIDs(ids...)
	return su
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (su *ScanUpdate) AddNameserver(n ...*Nameserver) *ScanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (su *ScanUpdate) AddRegistrarIDs(ids ...int) *ScanUpdate {
	su.mutation.AddRegistrarIDs(ids...)
	return su
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (su *ScanUpdate) AddRegistrar(r ...*Registrar) *ScanUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (su *ScanUpdate) AddWhoiIDs(ids ...int) *ScanUpdate {
	su.mutation.AddWhoiIDs(ids...)
	return su
}

// AddWhois adds the "whois" edges to the Whois entity.
func (su *ScanUpdate) AddWhois(w ...*Whois) *ScanUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.AddWhoiIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (su *ScanUpdate) Mutation() *ScanMutation {
	return su.mutation
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (su *ScanUpdate) ClearIpaddress() *ScanUpdate {
	su.mutation.ClearIpaddress()
	return su
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (su *ScanUpdate) RemoveIpaddresIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveIpaddresIDs(ids...)
	return su
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (su *ScanUpdate) RemoveIpaddress(i ...*IPAddress) *ScanUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveIpaddresIDs(ids...)
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (su *ScanUpdate) ClearAsninfo() *ScanUpdate {
	su.mutation.ClearAsninfo()
	return su
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (su *ScanUpdate) RemoveAsninfoIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveAsninfoIDs(ids...)
	return su
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (su *ScanUpdate) RemoveAsninfo(a ...*ASNInfo) *ScanUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAsninfoIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (su *ScanUpdate) ClearDnsentry() *ScanUpdate {
	su.mutation.ClearDnsentry()
	return su
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (su *ScanUpdate) RemoveDnsentryIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveDnsentryIDs(ids...)
	return su
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (su *ScanUpdate) RemoveDnsentry(d ...*DNSEntry) *ScanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (su *ScanUpdate) ClearDomain() *ScanUpdate {
	su.mutation.ClearDomain()
	return su
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (su *ScanUpdate) RemoveDomainIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveDomainIDs(ids...)
	return su
}

// RemoveDomain removes "domain" edges to Domain entities.
func (su *ScanUpdate) RemoveDomain(d ...*Domain) *ScanUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDomainIDs(ids...)
}

// ClearPaths clears all "paths" edges to the Path entity.
func (su *ScanUpdate) ClearPaths() *ScanUpdate {
	su.mutation.ClearPaths()
	return su
}

// RemovePathIDs removes the "paths" edge to Path entities by IDs.
func (su *ScanUpdate) RemovePathIDs(ids ...int) *ScanUpdate {
	su.mutation.RemovePathIDs(ids...)
	return su
}

// RemovePaths removes "paths" edges to Path entities.
func (su *ScanUpdate) RemovePaths(p ...*Path) *ScanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (su *ScanUpdate) ClearNameserver() *ScanUpdate {
	su.mutation.ClearNameserver()
	return su
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (su *ScanUpdate) RemoveNameserverIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveNameserverIDs(ids...)
	return su
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (su *ScanUpdate) RemoveNameserver(n ...*Nameserver) *ScanUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (su *ScanUpdate) ClearRegistrar() *ScanUpdate {
	su.mutation.ClearRegistrar()
	return su
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (su *ScanUpdate) RemoveRegistrarIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveRegistrarIDs(ids...)
	return su
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (su *ScanUpdate) RemoveRegistrar(r ...*Registrar) *ScanUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (su *ScanUpdate) ClearWhois() *ScanUpdate {
	su.mutation.ClearWhois()
	return su
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (su *ScanUpdate) RemoveWhoiIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveWhoiIDs(ids...)
	return su
}

// RemoveWhois removes "whois" edges to Whois entities.
func (su *ScanUpdate) RemoveWhois(w ...*Whois) *ScanUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.RemoveWhoiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScanUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScanUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Scanid(); ok {
		_spec.SetField(scan.FieldScanid, field.TypeString, value)
	}
	if value, ok := su.mutation.Timestamp(); ok {
		_spec.SetField(scan.FieldTimestamp, field.TypeTime, value)
	}
	if su.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !su.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !su.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !su.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDomainIDs(); len(nodes) > 0 && !su.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPathsIDs(); len(nodes) > 0 && !su.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !su.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !su.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !su.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanMutation
}

// SetScanid sets the "scanid" field.
func (suo *ScanUpdateOne) SetScanid(s string) *ScanUpdateOne {
	suo.mutation.SetScanid(s)
	return suo
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableScanid(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetScanid(*s)
	}
	return suo
}

// SetTimestamp sets the "timestamp" field.
func (suo *ScanUpdateOne) SetTimestamp(t time.Time) *ScanUpdateOne {
	suo.mutation.SetTimestamp(t)
	return suo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableTimestamp(t *time.Time) *ScanUpdateOne {
	if t != nil {
		suo.SetTimestamp(*t)
	}
	return suo
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (suo *ScanUpdateOne) AddIpaddresIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddIpaddresIDs(ids...)
	return suo
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (suo *ScanUpdateOne) AddIpaddress(i ...*IPAddress) *ScanUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddIpaddresIDs(ids...)
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (suo *ScanUpdateOne) AddAsninfoIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddAsninfoIDs(ids...)
	return suo
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (suo *ScanUpdateOne) AddAsninfo(a ...*ASNInfo) *ScanUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAsninfoIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (suo *ScanUpdateOne) AddDnsentryIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddDnsentryIDs(ids...)
	return suo
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (suo *ScanUpdateOne) AddDnsentry(d ...*DNSEntry) *ScanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (suo *ScanUpdateOne) AddDomainIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddDomainIDs(ids...)
	return suo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (suo *ScanUpdateOne) AddDomain(d ...*Domain) *ScanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDomainIDs(ids...)
}

// AddPathIDs adds the "paths" edge to the Path entity by IDs.
func (suo *ScanUpdateOne) AddPathIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddPathIDs(ids...)
	return suo
}

// AddPaths adds the "paths" edges to the Path entity.
func (suo *ScanUpdateOne) AddPaths(p ...*Path) *ScanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPathIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (suo *ScanUpdateOne) AddNameserverIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddNameserverIDs(ids...)
	return suo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (suo *ScanUpdateOne) AddNameserver(n ...*Nameserver) *ScanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (suo *ScanUpdateOne) AddRegistrarIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddRegistrarIDs(ids...)
	return suo
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (suo *ScanUpdateOne) AddRegistrar(r ...*Registrar) *ScanUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (suo *ScanUpdateOne) AddWhoiIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddWhoiIDs(ids...)
	return suo
}

// AddWhois adds the "whois" edges to the Whois entity.
func (suo *ScanUpdateOne) AddWhois(w ...*Whois) *ScanUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.AddWhoiIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (suo *ScanUpdateOne) Mutation() *ScanMutation {
	return suo.mutation
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (suo *ScanUpdateOne) ClearIpaddress() *ScanUpdateOne {
	suo.mutation.ClearIpaddress()
	return suo
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (suo *ScanUpdateOne) RemoveIpaddresIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveIpaddresIDs(ids...)
	return suo
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (suo *ScanUpdateOne) RemoveIpaddress(i ...*IPAddress) *ScanUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveIpaddresIDs(ids...)
}

// ClearAsninfo clears all "asninfo" edges to the ASNInfo entity.
func (suo *ScanUpdateOne) ClearAsninfo() *ScanUpdateOne {
	suo.mutation.ClearAsninfo()
	return suo
}

// RemoveAsninfoIDs removes the "asninfo" edge to ASNInfo entities by IDs.
func (suo *ScanUpdateOne) RemoveAsninfoIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveAsninfoIDs(ids...)
	return suo
}

// RemoveAsninfo removes "asninfo" edges to ASNInfo entities.
func (suo *ScanUpdateOne) RemoveAsninfo(a ...*ASNInfo) *ScanUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAsninfoIDs(ids...)
}

// ClearDnsentry clears all "dnsentry" edges to the DNSEntry entity.
func (suo *ScanUpdateOne) ClearDnsentry() *ScanUpdateOne {
	suo.mutation.ClearDnsentry()
	return suo
}

// RemoveDnsentryIDs removes the "dnsentry" edge to DNSEntry entities by IDs.
func (suo *ScanUpdateOne) RemoveDnsentryIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveDnsentryIDs(ids...)
	return suo
}

// RemoveDnsentry removes "dnsentry" edges to DNSEntry entities.
func (suo *ScanUpdateOne) RemoveDnsentry(d ...*DNSEntry) *ScanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDnsentryIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (suo *ScanUpdateOne) ClearDomain() *ScanUpdateOne {
	suo.mutation.ClearDomain()
	return suo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (suo *ScanUpdateOne) RemoveDomainIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveDomainIDs(ids...)
	return suo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (suo *ScanUpdateOne) RemoveDomain(d ...*Domain) *ScanUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDomainIDs(ids...)
}

// ClearPaths clears all "paths" edges to the Path entity.
func (suo *ScanUpdateOne) ClearPaths() *ScanUpdateOne {
	suo.mutation.ClearPaths()
	return suo
}

// RemovePathIDs removes the "paths" edge to Path entities by IDs.
func (suo *ScanUpdateOne) RemovePathIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemovePathIDs(ids...)
	return suo
}

// RemovePaths removes "paths" edges to Path entities.
func (suo *ScanUpdateOne) RemovePaths(p ...*Path) *ScanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePathIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (suo *ScanUpdateOne) ClearNameserver() *ScanUpdateOne {
	suo.mutation.ClearNameserver()
	return suo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (suo *ScanUpdateOne) RemoveNameserverIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveNameserverIDs(ids...)
	return suo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (suo *ScanUpdateOne) RemoveNameserver(n ...*Nameserver) *ScanUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.RemoveNameserverIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (suo *ScanUpdateOne) ClearRegistrar() *ScanUpdateOne {
	suo.mutation.ClearRegistrar()
	return suo
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (suo *ScanUpdateOne) RemoveRegistrarIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveRegistrarIDs(ids...)
	return suo
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (suo *ScanUpdateOne) RemoveRegistrar(r ...*Registrar) *ScanUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRegistrarIDs(ids...)
}

// ClearWhois clears all "whois" edges to the Whois entity.
func (suo *ScanUpdateOne) ClearWhois() *ScanUpdateOne {
	suo.mutation.ClearWhois()
	return suo
}

// RemoveWhoiIDs removes the "whois" edge to Whois entities by IDs.
func (suo *ScanUpdateOne) RemoveWhoiIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveWhoiIDs(ids...)
	return suo
}

// RemoveWhois removes "whois" edges to Whois entities.
func (suo *ScanUpdateOne) RemoveWhois(w ...*Whois) *ScanUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.RemoveWhoiIDs(ids...)
}

// Where appends a list predicates to the ScanUpdate builder.
func (suo *ScanUpdateOne) Where(ps ...predicate.Scan) *ScanUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scan entity.
func (suo *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Scanid(); ok {
		_spec.SetField(scan.FieldScanid, field.TypeString, value)
	}
	if value, ok := suo.mutation.Timestamp(); ok {
		_spec.SetField(scan.FieldTimestamp, field.TypeTime, value)
	}
	if suo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !suo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.IpaddressTable,
			Columns: []string{scan.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAsninfoIDs(); len(nodes) > 0 && !suo.mutation.AsninfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.AsninfoTable,
			Columns: []string{scan.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDnsentryIDs(); len(nodes) > 0 && !suo.mutation.DnsentryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DnsentryTable,
			Columns: []string{scan.DnsentryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !suo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.DomainTable,
			Columns: []string{scan.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPathsIDs(); len(nodes) > 0 && !suo.mutation.PathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.PathsTable,
			Columns: []string{scan.PathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(path.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !suo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.NameserverTable,
			Columns: []string{scan.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !suo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.RegistrarTable,
			Columns: []string{scan.RegistrarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedWhoisIDs(); len(nodes) > 0 && !suo.mutation.WhoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.WhoisTable,
			Columns: []string{scan.WhoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scan{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
