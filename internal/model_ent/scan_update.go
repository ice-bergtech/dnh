// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks    []Hook
	mutation *ScanMutation
}

// Where appends a list predicates to the ScanUpdate builder.
func (su *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetScanid sets the "scanid" field.
func (su *ScanUpdate) SetScanid(s string) *ScanUpdate {
	su.mutation.SetScanid(s)
	return su
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (su *ScanUpdate) SetNillableScanid(s *string) *ScanUpdate {
	if s != nil {
		su.SetScanid(*s)
	}
	return su
}

// SetInput sets the "input" field.
func (su *ScanUpdate) SetInput(s string) *ScanUpdate {
	su.mutation.SetInput(s)
	return su
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (su *ScanUpdate) SetNillableInput(s *string) *ScanUpdate {
	if s != nil {
		su.SetInput(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *ScanUpdate) SetType(s string) *ScanUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ScanUpdate) SetNillableType(s *string) *ScanUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetTimestamp sets the "timestamp" field.
func (su *ScanUpdate) SetTimestamp(t time.Time) *ScanUpdate {
	su.mutation.SetTimestamp(t)
	return su
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (su *ScanUpdate) SetNillableTimestamp(t *time.Time) *ScanUpdate {
	if t != nil {
		su.SetTimestamp(*t)
	}
	return su
}

// AddScanjobIDs adds the "scanjob" edge to the ScanJob entity by IDs.
func (su *ScanUpdate) AddScanjobIDs(ids ...int) *ScanUpdate {
	su.mutation.AddScanjobIDs(ids...)
	return su
}

// AddScanjob adds the "scanjob" edges to the ScanJob entity.
func (su *ScanUpdate) AddScanjob(s ...*ScanJob) *ScanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddScanjobIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (su *ScanUpdate) Mutation() *ScanMutation {
	return su.mutation
}

// ClearScanjob clears all "scanjob" edges to the ScanJob entity.
func (su *ScanUpdate) ClearScanjob() *ScanUpdate {
	su.mutation.ClearScanjob()
	return su
}

// RemoveScanjobIDs removes the "scanjob" edge to ScanJob entities by IDs.
func (su *ScanUpdate) RemoveScanjobIDs(ids ...int) *ScanUpdate {
	su.mutation.RemoveScanjobIDs(ids...)
	return su
}

// RemoveScanjob removes "scanjob" edges to ScanJob entities.
func (su *ScanUpdate) RemoveScanjob(s ...*ScanJob) *ScanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveScanjobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScanUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScanUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Scanid(); ok {
		_spec.SetField(scan.FieldScanid, field.TypeString, value)
	}
	if value, ok := su.mutation.Input(); ok {
		_spec.SetField(scan.FieldInput, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(scan.FieldType, field.TypeString, value)
	}
	if value, ok := su.mutation.Timestamp(); ok {
		_spec.SetField(scan.FieldTimestamp, field.TypeTime, value)
	}
	if su.mutation.ScanjobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedScanjobIDs(); len(nodes) > 0 && !su.mutation.ScanjobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScanjobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanMutation
}

// SetScanid sets the "scanid" field.
func (suo *ScanUpdateOne) SetScanid(s string) *ScanUpdateOne {
	suo.mutation.SetScanid(s)
	return suo
}

// SetNillableScanid sets the "scanid" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableScanid(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetScanid(*s)
	}
	return suo
}

// SetInput sets the "input" field.
func (suo *ScanUpdateOne) SetInput(s string) *ScanUpdateOne {
	suo.mutation.SetInput(s)
	return suo
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableInput(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetInput(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *ScanUpdateOne) SetType(s string) *ScanUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableType(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetTimestamp sets the "timestamp" field.
func (suo *ScanUpdateOne) SetTimestamp(t time.Time) *ScanUpdateOne {
	suo.mutation.SetTimestamp(t)
	return suo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableTimestamp(t *time.Time) *ScanUpdateOne {
	if t != nil {
		suo.SetTimestamp(*t)
	}
	return suo
}

// AddScanjobIDs adds the "scanjob" edge to the ScanJob entity by IDs.
func (suo *ScanUpdateOne) AddScanjobIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.AddScanjobIDs(ids...)
	return suo
}

// AddScanjob adds the "scanjob" edges to the ScanJob entity.
func (suo *ScanUpdateOne) AddScanjob(s ...*ScanJob) *ScanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddScanjobIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (suo *ScanUpdateOne) Mutation() *ScanMutation {
	return suo.mutation
}

// ClearScanjob clears all "scanjob" edges to the ScanJob entity.
func (suo *ScanUpdateOne) ClearScanjob() *ScanUpdateOne {
	suo.mutation.ClearScanjob()
	return suo
}

// RemoveScanjobIDs removes the "scanjob" edge to ScanJob entities by IDs.
func (suo *ScanUpdateOne) RemoveScanjobIDs(ids ...int) *ScanUpdateOne {
	suo.mutation.RemoveScanjobIDs(ids...)
	return suo
}

// RemoveScanjob removes "scanjob" edges to ScanJob entities.
func (suo *ScanUpdateOne) RemoveScanjob(s ...*ScanJob) *ScanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveScanjobIDs(ids...)
}

// Where appends a list predicates to the ScanUpdate builder.
func (suo *ScanUpdateOne) Where(ps ...predicate.Scan) *ScanUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scan entity.
func (suo *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Scanid(); ok {
		_spec.SetField(scan.FieldScanid, field.TypeString, value)
	}
	if value, ok := suo.mutation.Input(); ok {
		_spec.SetField(scan.FieldInput, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(scan.FieldType, field.TypeString, value)
	}
	if value, ok := suo.mutation.Timestamp(); ok {
		_spec.SetField(scan.FieldTimestamp, field.TypeTime, value)
	}
	if suo.mutation.ScanjobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedScanjobIDs(); len(nodes) > 0 && !suo.mutation.ScanjobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScanjobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ScanjobTable,
			Columns: scan.ScanjobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scan{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
