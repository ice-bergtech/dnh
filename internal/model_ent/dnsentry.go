// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
)

// DNSEntry is the model entity for the DNSEntry schema.
type DNSEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// TTL holds the value of the "ttl" field.
	TTL int `json:"ttl,omitempty"`
	// TimeFirst holds the value of the "time_first" field.
	TimeFirst time.Time `json:"time_first,omitempty"`
	// TimeLast holds the value of the "time_last" field.
	TimeLast time.Time `json:"time_last,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DNSEntryQuery when eager-loading is set.
	Edges            DNSEntryEdges `json:"edges"`
	example_dnsentry *string
	selectValues     sql.SelectValues
}

// DNSEntryEdges holds the relations/edges for other nodes in the graph.
type DNSEntryEdges struct {
	// Domain holds the value of the domain edge.
	Domain []*Domain `json:"domain,omitempty"`
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress []*IPAddress `json:"ipaddress,omitempty"`
	// Nameserver holds the value of the nameserver edge.
	Nameserver []*Nameserver `json:"nameserver,omitempty"`
	// Scan holds the value of the scan edge.
	Scan []*Scan `json:"scan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading.
func (e DNSEntryEdges) DomainOrErr() ([]*Domain, error) {
	if e.loadedTypes[0] {
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading.
func (e DNSEntryEdges) IpaddressOrErr() ([]*IPAddress, error) {
	if e.loadedTypes[1] {
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// NameserverOrErr returns the Nameserver value or an error if the edge
// was not loaded in eager-loading.
func (e DNSEntryEdges) NameserverOrErr() ([]*Nameserver, error) {
	if e.loadedTypes[2] {
		return e.Nameserver, nil
	}
	return nil, &NotLoadedError{edge: "nameserver"}
}

// ScanOrErr returns the Scan value or an error if the edge
// was not loaded in eager-loading.
func (e DNSEntryEdges) ScanOrErr() ([]*Scan, error) {
	if e.loadedTypes[3] {
		return e.Scan, nil
	}
	return nil, &NotLoadedError{edge: "scan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsentry.FieldID, dnsentry.FieldTTL:
			values[i] = new(sql.NullInt64)
		case dnsentry.FieldName, dnsentry.FieldType, dnsentry.FieldValue:
			values[i] = new(sql.NullString)
		case dnsentry.FieldTimeFirst, dnsentry.FieldTimeLast:
			values[i] = new(sql.NullTime)
		case dnsentry.ForeignKeys[0]: // example_dnsentry
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSEntry fields.
func (de *DNSEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			de.ID = int(value.Int64)
		case dnsentry.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				de.Name = value.String
			}
		case dnsentry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				de.Type = value.String
			}
		case dnsentry.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				de.Value = value.String
			}
		case dnsentry.FieldTTL:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ttl", values[i])
			} else if value.Valid {
				de.TTL = int(value.Int64)
			}
		case dnsentry.FieldTimeFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_first", values[i])
			} else if value.Valid {
				de.TimeFirst = value.Time
			}
		case dnsentry.FieldTimeLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_last", values[i])
			} else if value.Valid {
				de.TimeLast = value.Time
			}
		case dnsentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field example_dnsentry", values[i])
			} else if value.Valid {
				de.example_dnsentry = new(string)
				*de.example_dnsentry = value.String
			}
		default:
			de.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DNSEntry.
// This includes values selected through modifiers, order, etc.
func (de *DNSEntry) GetValue(name string) (ent.Value, error) {
	return de.selectValues.Get(name)
}

// QueryDomain queries the "domain" edge of the DNSEntry entity.
func (de *DNSEntry) QueryDomain() *DomainQuery {
	return NewDNSEntryClient(de.config).QueryDomain(de)
}

// QueryIpaddress queries the "ipaddress" edge of the DNSEntry entity.
func (de *DNSEntry) QueryIpaddress() *IPAddressQuery {
	return NewDNSEntryClient(de.config).QueryIpaddress(de)
}

// QueryNameserver queries the "nameserver" edge of the DNSEntry entity.
func (de *DNSEntry) QueryNameserver() *NameserverQuery {
	return NewDNSEntryClient(de.config).QueryNameserver(de)
}

// QueryScan queries the "scan" edge of the DNSEntry entity.
func (de *DNSEntry) QueryScan() *ScanQuery {
	return NewDNSEntryClient(de.config).QueryScan(de)
}

// Update returns a builder for updating this DNSEntry.
// Note that you need to call DNSEntry.Unwrap() before calling this method if this DNSEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (de *DNSEntry) Update() *DNSEntryUpdateOne {
	return NewDNSEntryClient(de.config).UpdateOne(de)
}

// Unwrap unwraps the DNSEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (de *DNSEntry) Unwrap() *DNSEntry {
	_tx, ok := de.config.driver.(*txDriver)
	if !ok {
		panic("model_ent: DNSEntry is not a transactional entity")
	}
	de.config.driver = _tx.drv
	return de
}

// String implements the fmt.Stringer.
func (de *DNSEntry) String() string {
	var builder strings.Builder
	builder.WriteString("DNSEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", de.ID))
	builder.WriteString("name=")
	builder.WriteString(de.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(de.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(de.Value)
	builder.WriteString(", ")
	builder.WriteString("ttl=")
	builder.WriteString(fmt.Sprintf("%v", de.TTL))
	builder.WriteString(", ")
	builder.WriteString("time_first=")
	builder.WriteString(de.TimeFirst.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time_last=")
	builder.WriteString(de.TimeLast.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DNSEntries is a parsable slice of DNSEntry.
type DNSEntries []*DNSEntry
