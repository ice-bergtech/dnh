// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/example"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/path"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// ExampleQuery is the builder for querying Example entities.
type ExampleQuery struct {
	config
	ctx            *QueryContext
	order          []example.OrderOption
	inters         []Interceptor
	predicates     []predicate.Example
	withIpaddress  *IPAddressQuery
	withNext       *ASNInfoQuery
	withDnsentry   *DNSEntryQuery
	withDomain     *DomainQuery
	withPaths      *PathQuery
	withNameserver *NameserverQuery
	withRegistrar  *RegistrarQuery
	withWhois      *WhoisQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExampleQuery builder.
func (eq *ExampleQuery) Where(ps ...predicate.Example) *ExampleQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *ExampleQuery) Limit(limit int) *ExampleQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *ExampleQuery) Offset(offset int) *ExampleQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *ExampleQuery) Unique(unique bool) *ExampleQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *ExampleQuery) Order(o ...example.OrderOption) *ExampleQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryIpaddress chains the current query on the "ipaddress" edge.
func (eq *ExampleQuery) QueryIpaddress() *IPAddressQuery {
	query := (&IPAddressClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(ipaddress.Table, ipaddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, example.IpaddressTable, example.IpaddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNext chains the current query on the "next" edge.
func (eq *ExampleQuery) QueryNext() *ASNInfoQuery {
	query := (&ASNInfoClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(asninfo.Table, asninfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.NextTable, example.NextColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDnsentry chains the current query on the "dnsentry" edge.
func (eq *ExampleQuery) QueryDnsentry() *DNSEntryQuery {
	query := (&DNSEntryClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(dnsentry.Table, dnsentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.DnsentryTable, example.DnsentryColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDomain chains the current query on the "domain" edge.
func (eq *ExampleQuery) QueryDomain() *DomainQuery {
	query := (&DomainClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(domain.Table, domain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.DomainTable, example.DomainColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaths chains the current query on the "paths" edge.
func (eq *ExampleQuery) QueryPaths() *PathQuery {
	query := (&PathClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(path.Table, path.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.PathsTable, example.PathsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNameserver chains the current query on the "nameserver" edge.
func (eq *ExampleQuery) QueryNameserver() *NameserverQuery {
	query := (&NameserverClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(nameserver.Table, nameserver.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.NameserverTable, example.NameserverColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegistrar chains the current query on the "registrar" edge.
func (eq *ExampleQuery) QueryRegistrar() *RegistrarQuery {
	query := (&RegistrarClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(registrar.Table, registrar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.RegistrarTable, example.RegistrarColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWhois chains the current query on the "whois" edge.
func (eq *ExampleQuery) QueryWhois() *WhoisQuery {
	query := (&WhoisClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(example.Table, example.FieldID, selector),
			sqlgraph.To(whois.Table, whois.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, example.WhoisTable, example.WhoisColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Example entity from the query.
// Returns a *NotFoundError when no Example was found.
func (eq *ExampleQuery) First(ctx context.Context) (*Example, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{example.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *ExampleQuery) FirstX(ctx context.Context) *Example {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Example ID from the query.
// Returns a *NotFoundError when no Example ID was found.
func (eq *ExampleQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{example.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *ExampleQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Example entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Example entity is found.
// Returns a *NotFoundError when no Example entities are found.
func (eq *ExampleQuery) Only(ctx context.Context) (*Example, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{example.Label}
	default:
		return nil, &NotSingularError{example.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *ExampleQuery) OnlyX(ctx context.Context) *Example {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Example ID in the query.
// Returns a *NotSingularError when more than one Example ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *ExampleQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{example.Label}
	default:
		err = &NotSingularError{example.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *ExampleQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Examples.
func (eq *ExampleQuery) All(ctx context.Context) ([]*Example, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Example, *ExampleQuery]()
	return withInterceptors[[]*Example](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *ExampleQuery) AllX(ctx context.Context) []*Example {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Example IDs.
func (eq *ExampleQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(example.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *ExampleQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *ExampleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*ExampleQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *ExampleQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *ExampleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model_ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *ExampleQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExampleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *ExampleQuery) Clone() *ExampleQuery {
	if eq == nil {
		return nil
	}
	return &ExampleQuery{
		config:         eq.config,
		ctx:            eq.ctx.Clone(),
		order:          append([]example.OrderOption{}, eq.order...),
		inters:         append([]Interceptor{}, eq.inters...),
		predicates:     append([]predicate.Example{}, eq.predicates...),
		withIpaddress:  eq.withIpaddress.Clone(),
		withNext:       eq.withNext.Clone(),
		withDnsentry:   eq.withDnsentry.Clone(),
		withDomain:     eq.withDomain.Clone(),
		withPaths:      eq.withPaths.Clone(),
		withNameserver: eq.withNameserver.Clone(),
		withRegistrar:  eq.withRegistrar.Clone(),
		withWhois:      eq.withWhois.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithIpaddress tells the query-builder to eager-load the nodes that are connected to
// the "ipaddress" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithIpaddress(opts ...func(*IPAddressQuery)) *ExampleQuery {
	query := (&IPAddressClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withIpaddress = query
	return eq
}

// WithNext tells the query-builder to eager-load the nodes that are connected to
// the "next" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithNext(opts ...func(*ASNInfoQuery)) *ExampleQuery {
	query := (&ASNInfoClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withNext = query
	return eq
}

// WithDnsentry tells the query-builder to eager-load the nodes that are connected to
// the "dnsentry" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithDnsentry(opts ...func(*DNSEntryQuery)) *ExampleQuery {
	query := (&DNSEntryClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withDnsentry = query
	return eq
}

// WithDomain tells the query-builder to eager-load the nodes that are connected to
// the "domain" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithDomain(opts ...func(*DomainQuery)) *ExampleQuery {
	query := (&DomainClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withDomain = query
	return eq
}

// WithPaths tells the query-builder to eager-load the nodes that are connected to
// the "paths" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithPaths(opts ...func(*PathQuery)) *ExampleQuery {
	query := (&PathClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPaths = query
	return eq
}

// WithNameserver tells the query-builder to eager-load the nodes that are connected to
// the "nameserver" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithNameserver(opts ...func(*NameserverQuery)) *ExampleQuery {
	query := (&NameserverClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withNameserver = query
	return eq
}

// WithRegistrar tells the query-builder to eager-load the nodes that are connected to
// the "registrar" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithRegistrar(opts ...func(*RegistrarQuery)) *ExampleQuery {
	query := (&RegistrarClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withRegistrar = query
	return eq
}

// WithWhois tells the query-builder to eager-load the nodes that are connected to
// the "whois" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExampleQuery) WithWhois(opts ...func(*WhoisQuery)) *ExampleQuery {
	query := (&WhoisClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withWhois = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Timestamp time.Time `json:"timestamp,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Example.Query().
//		GroupBy(example.FieldTimestamp).
//		Aggregate(model_ent.Count()).
//		Scan(ctx, &v)
func (eq *ExampleQuery) GroupBy(field string, fields ...string) *ExampleGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExampleGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = example.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Timestamp time.Time `json:"timestamp,omitempty"`
//	}
//
//	client.Example.Query().
//		Select(example.FieldTimestamp).
//		Scan(ctx, &v)
func (eq *ExampleQuery) Select(fields ...string) *ExampleSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &ExampleSelect{ExampleQuery: eq}
	sbuild.label = example.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExampleSelect configured with the given aggregations.
func (eq *ExampleQuery) Aggregate(fns ...AggregateFunc) *ExampleSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *ExampleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("model_ent: uninitialized interceptor (forgotten import model_ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !example.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *ExampleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Example, error) {
	var (
		nodes       = []*Example{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [8]bool{
			eq.withIpaddress != nil,
			eq.withNext != nil,
			eq.withDnsentry != nil,
			eq.withDomain != nil,
			eq.withPaths != nil,
			eq.withNameserver != nil,
			eq.withRegistrar != nil,
			eq.withWhois != nil,
		}
	)
	if eq.withIpaddress != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, example.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Example).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Example{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withIpaddress; query != nil {
		if err := eq.loadIpaddress(ctx, query, nodes, nil,
			func(n *Example, e *IPAddress) { n.Edges.Ipaddress = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withNext; query != nil {
		if err := eq.loadNext(ctx, query, nodes,
			func(n *Example) { n.Edges.Next = []*ASNInfo{} },
			func(n *Example, e *ASNInfo) { n.Edges.Next = append(n.Edges.Next, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withDnsentry; query != nil {
		if err := eq.loadDnsentry(ctx, query, nodes,
			func(n *Example) { n.Edges.Dnsentry = []*DNSEntry{} },
			func(n *Example, e *DNSEntry) { n.Edges.Dnsentry = append(n.Edges.Dnsentry, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withDomain; query != nil {
		if err := eq.loadDomain(ctx, query, nodes,
			func(n *Example) { n.Edges.Domain = []*Domain{} },
			func(n *Example, e *Domain) { n.Edges.Domain = append(n.Edges.Domain, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPaths; query != nil {
		if err := eq.loadPaths(ctx, query, nodes,
			func(n *Example) { n.Edges.Paths = []*Path{} },
			func(n *Example, e *Path) { n.Edges.Paths = append(n.Edges.Paths, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withNameserver; query != nil {
		if err := eq.loadNameserver(ctx, query, nodes,
			func(n *Example) { n.Edges.Nameserver = []*Nameserver{} },
			func(n *Example, e *Nameserver) { n.Edges.Nameserver = append(n.Edges.Nameserver, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withRegistrar; query != nil {
		if err := eq.loadRegistrar(ctx, query, nodes,
			func(n *Example) { n.Edges.Registrar = []*Registrar{} },
			func(n *Example, e *Registrar) { n.Edges.Registrar = append(n.Edges.Registrar, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withWhois; query != nil {
		if err := eq.loadWhois(ctx, query, nodes,
			func(n *Example) { n.Edges.Whois = []*Whois{} },
			func(n *Example, e *Whois) { n.Edges.Whois = append(n.Edges.Whois, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *ExampleQuery) loadIpaddress(ctx context.Context, query *IPAddressQuery, nodes []*Example, init func(*Example), assign func(*Example, *IPAddress)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Example)
	for i := range nodes {
		if nodes[i].example_ipaddress == nil {
			continue
		}
		fk := *nodes[i].example_ipaddress
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ipaddress.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "example_ipaddress" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *ExampleQuery) loadNext(ctx context.Context, query *ASNInfoQuery, nodes []*Example, init func(*Example), assign func(*Example, *ASNInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ASNInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.NextColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_next
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_next" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_next" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadDnsentry(ctx context.Context, query *DNSEntryQuery, nodes []*Example, init func(*Example), assign func(*Example, *DNSEntry)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DNSEntry(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.DnsentryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_dnsentry
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_dnsentry" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_dnsentry" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadDomain(ctx context.Context, query *DomainQuery, nodes []*Example, init func(*Example), assign func(*Example, *Domain)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.DomainColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_domain
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_domain" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_domain" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadPaths(ctx context.Context, query *PathQuery, nodes []*Example, init func(*Example), assign func(*Example, *Path)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Path(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.PathsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_paths
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_paths" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_paths" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadNameserver(ctx context.Context, query *NameserverQuery, nodes []*Example, init func(*Example), assign func(*Example, *Nameserver)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Nameserver(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.NameserverColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_nameserver
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_nameserver" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_nameserver" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadRegistrar(ctx context.Context, query *RegistrarQuery, nodes []*Example, init func(*Example), assign func(*Example, *Registrar)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Registrar(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.RegistrarColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_registrar
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_registrar" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_registrar" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExampleQuery) loadWhois(ctx context.Context, query *WhoisQuery, nodes []*Example, init func(*Example), assign func(*Example, *Whois)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Example)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Whois(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(example.WhoisColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.example_whois
		if fk == nil {
			return fmt.Errorf(`foreign-key "example_whois" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "example_whois" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *ExampleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *ExampleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, example.FieldID)
		for i := range fields {
			if fields[i] != example.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *ExampleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(example.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = example.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExampleGroupBy is the group-by builder for Example entities.
type ExampleGroupBy struct {
	selector
	build *ExampleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *ExampleGroupBy) Aggregate(fns ...AggregateFunc) *ExampleGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *ExampleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExampleQuery, *ExampleGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *ExampleGroupBy) sqlScan(ctx context.Context, root *ExampleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExampleSelect is the builder for selecting fields of Example entities.
type ExampleSelect struct {
	*ExampleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *ExampleSelect) Aggregate(fns ...AggregateFunc) *ExampleSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *ExampleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExampleQuery, *ExampleSelect](ctx, es.ExampleQuery, es, es.inters, v)
}

func (es *ExampleSelect) sqlScan(ctx context.Context, root *ExampleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
