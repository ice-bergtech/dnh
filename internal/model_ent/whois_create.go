// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// WhoisCreate is the builder for creating a Whois entity.
type WhoisCreate struct {
	config
	mutation *WhoisMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuery sets the "query" field.
func (wc *WhoisCreate) SetQuery(s string) *WhoisCreate {
	wc.mutation.SetQuery(s)
	return wc
}

// SetServer sets the "server" field.
func (wc *WhoisCreate) SetServer(s string) *WhoisCreate {
	wc.mutation.SetServer(s)
	return wc
}

// SetRaw sets the "raw" field.
func (wc *WhoisCreate) SetRaw(s string) *WhoisCreate {
	wc.mutation.SetRaw(s)
	return wc
}

// SetCountry sets the "country" field.
func (wc *WhoisCreate) SetCountry(s string) *WhoisCreate {
	wc.mutation.SetCountry(s)
	return wc
}

// SetCreated sets the "created" field.
func (wc *WhoisCreate) SetCreated(t time.Time) *WhoisCreate {
	wc.mutation.SetCreated(t)
	return wc
}

// SetUpdated sets the "updated" field.
func (wc *WhoisCreate) SetUpdated(t time.Time) *WhoisCreate {
	wc.mutation.SetUpdated(t)
	return wc
}

// SetTimeFirst sets the "time_first" field.
func (wc *WhoisCreate) SetTimeFirst(t time.Time) *WhoisCreate {
	wc.mutation.SetTimeFirst(t)
	return wc
}

// SetTimeLast sets the "time_last" field.
func (wc *WhoisCreate) SetTimeLast(t time.Time) *WhoisCreate {
	wc.mutation.SetTimeLast(t)
	return wc
}

// AddIprangeIDs adds the "iprange" edge to the IPAddress entity by IDs.
func (wc *WhoisCreate) AddIprangeIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddIprangeIDs(ids...)
	return wc
}

// AddIprange adds the "iprange" edges to the IPAddress entity.
func (wc *WhoisCreate) AddIprange(i ...*IPAddress) *WhoisCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wc.AddIprangeIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (wc *WhoisCreate) AddDomainIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddDomainIDs(ids...)
	return wc
}

// AddDomain adds the "domain" edges to the Domain entity.
func (wc *WhoisCreate) AddDomain(d ...*Domain) *WhoisCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wc.AddDomainIDs(ids...)
}

// AddAsnIDs adds the "asn" edge to the ASNInfo entity by IDs.
func (wc *WhoisCreate) AddAsnIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddAsnIDs(ids...)
	return wc
}

// AddAsn adds the "asn" edges to the ASNInfo entity.
func (wc *WhoisCreate) AddAsn(a ...*ASNInfo) *WhoisCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wc.AddAsnIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (wc *WhoisCreate) AddRegistrarIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddRegistrarIDs(ids...)
	return wc
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (wc *WhoisCreate) AddRegistrar(r ...*Registrar) *WhoisCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wc.AddRegistrarIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (wc *WhoisCreate) AddNameserverIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddNameserverIDs(ids...)
	return wc
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (wc *WhoisCreate) AddNameserver(n ...*Nameserver) *WhoisCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return wc.AddNameserverIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (wc *WhoisCreate) AddScanIDs(ids ...int) *WhoisCreate {
	wc.mutation.AddScanIDs(ids...)
	return wc
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (wc *WhoisCreate) AddScan(s ...*ScanJob) *WhoisCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wc.AddScanIDs(ids...)
}

// Mutation returns the WhoisMutation object of the builder.
func (wc *WhoisCreate) Mutation() *WhoisMutation {
	return wc.mutation
}

// Save creates the Whois in the database.
func (wc *WhoisCreate) Save(ctx context.Context) (*Whois, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WhoisCreate) SaveX(ctx context.Context) *Whois {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WhoisCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WhoisCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WhoisCreate) check() error {
	if _, ok := wc.mutation.Query(); !ok {
		return &ValidationError{Name: "query", err: errors.New(`model_ent: missing required field "Whois.query"`)}
	}
	if _, ok := wc.mutation.Server(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`model_ent: missing required field "Whois.server"`)}
	}
	if _, ok := wc.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`model_ent: missing required field "Whois.raw"`)}
	}
	if _, ok := wc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`model_ent: missing required field "Whois.country"`)}
	}
	if _, ok := wc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`model_ent: missing required field "Whois.created"`)}
	}
	if _, ok := wc.mutation.Updated(); !ok {
		return &ValidationError{Name: "updated", err: errors.New(`model_ent: missing required field "Whois.updated"`)}
	}
	if _, ok := wc.mutation.TimeFirst(); !ok {
		return &ValidationError{Name: "time_first", err: errors.New(`model_ent: missing required field "Whois.time_first"`)}
	}
	if _, ok := wc.mutation.TimeLast(); !ok {
		return &ValidationError{Name: "time_last", err: errors.New(`model_ent: missing required field "Whois.time_last"`)}
	}
	return nil
}

func (wc *WhoisCreate) sqlSave(ctx context.Context) (*Whois, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WhoisCreate) createSpec() (*Whois, *sqlgraph.CreateSpec) {
	var (
		_node = &Whois{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(whois.Table, sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.Query(); ok {
		_spec.SetField(whois.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := wc.mutation.Server(); ok {
		_spec.SetField(whois.FieldServer, field.TypeString, value)
		_node.Server = value
	}
	if value, ok := wc.mutation.Raw(); ok {
		_spec.SetField(whois.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	if value, ok := wc.mutation.Country(); ok {
		_spec.SetField(whois.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := wc.mutation.Created(); ok {
		_spec.SetField(whois.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := wc.mutation.Updated(); ok {
		_spec.SetField(whois.FieldUpdated, field.TypeTime, value)
		_node.Updated = value
	}
	if value, ok := wc.mutation.TimeFirst(); ok {
		_spec.SetField(whois.FieldTimeFirst, field.TypeTime, value)
		_node.TimeFirst = value
	}
	if value, ok := wc.mutation.TimeLast(); ok {
		_spec.SetField(whois.FieldTimeLast, field.TypeTime, value)
		_node.TimeLast = value
	}
	if nodes := wc.mutation.IprangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.AsnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Whois.Create().
//		SetQuery(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WhoisUpsert) {
//			SetQuery(v+v).
//		}).
//		Exec(ctx)
func (wc *WhoisCreate) OnConflict(opts ...sql.ConflictOption) *WhoisUpsertOne {
	wc.conflict = opts
	return &WhoisUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Whois.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WhoisCreate) OnConflictColumns(columns ...string) *WhoisUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WhoisUpsertOne{
		create: wc,
	}
}

type (
	// WhoisUpsertOne is the builder for "upsert"-ing
	//  one Whois node.
	WhoisUpsertOne struct {
		create *WhoisCreate
	}

	// WhoisUpsert is the "OnConflict" setter.
	WhoisUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuery sets the "query" field.
func (u *WhoisUpsert) SetQuery(v string) *WhoisUpsert {
	u.Set(whois.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateQuery() *WhoisUpsert {
	u.SetExcluded(whois.FieldQuery)
	return u
}

// SetServer sets the "server" field.
func (u *WhoisUpsert) SetServer(v string) *WhoisUpsert {
	u.Set(whois.FieldServer, v)
	return u
}

// UpdateServer sets the "server" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateServer() *WhoisUpsert {
	u.SetExcluded(whois.FieldServer)
	return u
}

// SetRaw sets the "raw" field.
func (u *WhoisUpsert) SetRaw(v string) *WhoisUpsert {
	u.Set(whois.FieldRaw, v)
	return u
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateRaw() *WhoisUpsert {
	u.SetExcluded(whois.FieldRaw)
	return u
}

// SetCountry sets the "country" field.
func (u *WhoisUpsert) SetCountry(v string) *WhoisUpsert {
	u.Set(whois.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateCountry() *WhoisUpsert {
	u.SetExcluded(whois.FieldCountry)
	return u
}

// SetCreated sets the "created" field.
func (u *WhoisUpsert) SetCreated(v time.Time) *WhoisUpsert {
	u.Set(whois.FieldCreated, v)
	return u
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateCreated() *WhoisUpsert {
	u.SetExcluded(whois.FieldCreated)
	return u
}

// SetUpdated sets the "updated" field.
func (u *WhoisUpsert) SetUpdated(v time.Time) *WhoisUpsert {
	u.Set(whois.FieldUpdated, v)
	return u
}

// UpdateUpdated sets the "updated" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateUpdated() *WhoisUpsert {
	u.SetExcluded(whois.FieldUpdated)
	return u
}

// SetTimeFirst sets the "time_first" field.
func (u *WhoisUpsert) SetTimeFirst(v time.Time) *WhoisUpsert {
	u.Set(whois.FieldTimeFirst, v)
	return u
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateTimeFirst() *WhoisUpsert {
	u.SetExcluded(whois.FieldTimeFirst)
	return u
}

// SetTimeLast sets the "time_last" field.
func (u *WhoisUpsert) SetTimeLast(v time.Time) *WhoisUpsert {
	u.Set(whois.FieldTimeLast, v)
	return u
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *WhoisUpsert) UpdateTimeLast() *WhoisUpsert {
	u.SetExcluded(whois.FieldTimeLast)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Whois.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WhoisUpsertOne) UpdateNewValues() *WhoisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Whois.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WhoisUpsertOne) Ignore() *WhoisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WhoisUpsertOne) DoNothing() *WhoisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WhoisCreate.OnConflict
// documentation for more info.
func (u *WhoisUpsertOne) Update(set func(*WhoisUpsert)) *WhoisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WhoisUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuery sets the "query" field.
func (u *WhoisUpsertOne) SetQuery(v string) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateQuery() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateQuery()
	})
}

// SetServer sets the "server" field.
func (u *WhoisUpsertOne) SetServer(v string) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetServer(v)
	})
}

// UpdateServer sets the "server" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateServer() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateServer()
	})
}

// SetRaw sets the "raw" field.
func (u *WhoisUpsertOne) SetRaw(v string) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateRaw() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateRaw()
	})
}

// SetCountry sets the "country" field.
func (u *WhoisUpsertOne) SetCountry(v string) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateCountry() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateCountry()
	})
}

// SetCreated sets the "created" field.
func (u *WhoisUpsertOne) SetCreated(v time.Time) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateCreated() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateCreated()
	})
}

// SetUpdated sets the "updated" field.
func (u *WhoisUpsertOne) SetUpdated(v time.Time) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetUpdated(v)
	})
}

// UpdateUpdated sets the "updated" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateUpdated() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateUpdated()
	})
}

// SetTimeFirst sets the "time_first" field.
func (u *WhoisUpsertOne) SetTimeFirst(v time.Time) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetTimeFirst(v)
	})
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateTimeFirst() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateTimeFirst()
	})
}

// SetTimeLast sets the "time_last" field.
func (u *WhoisUpsertOne) SetTimeLast(v time.Time) *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.SetTimeLast(v)
	})
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *WhoisUpsertOne) UpdateTimeLast() *WhoisUpsertOne {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateTimeLast()
	})
}

// Exec executes the query.
func (u *WhoisUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for WhoisCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WhoisUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WhoisUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WhoisUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WhoisCreateBulk is the builder for creating many Whois entities in bulk.
type WhoisCreateBulk struct {
	config
	err      error
	builders []*WhoisCreate
	conflict []sql.ConflictOption
}

// Save creates the Whois entities in the database.
func (wcb *WhoisCreateBulk) Save(ctx context.Context) ([]*Whois, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Whois, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WhoisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WhoisCreateBulk) SaveX(ctx context.Context) []*Whois {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WhoisCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WhoisCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Whois.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WhoisUpsert) {
//			SetQuery(v+v).
//		}).
//		Exec(ctx)
func (wcb *WhoisCreateBulk) OnConflict(opts ...sql.ConflictOption) *WhoisUpsertBulk {
	wcb.conflict = opts
	return &WhoisUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Whois.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WhoisCreateBulk) OnConflictColumns(columns ...string) *WhoisUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WhoisUpsertBulk{
		create: wcb,
	}
}

// WhoisUpsertBulk is the builder for "upsert"-ing
// a bulk of Whois nodes.
type WhoisUpsertBulk struct {
	create *WhoisCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Whois.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WhoisUpsertBulk) UpdateNewValues() *WhoisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Whois.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WhoisUpsertBulk) Ignore() *WhoisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WhoisUpsertBulk) DoNothing() *WhoisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WhoisCreateBulk.OnConflict
// documentation for more info.
func (u *WhoisUpsertBulk) Update(set func(*WhoisUpsert)) *WhoisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WhoisUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuery sets the "query" field.
func (u *WhoisUpsertBulk) SetQuery(v string) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateQuery() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateQuery()
	})
}

// SetServer sets the "server" field.
func (u *WhoisUpsertBulk) SetServer(v string) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetServer(v)
	})
}

// UpdateServer sets the "server" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateServer() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateServer()
	})
}

// SetRaw sets the "raw" field.
func (u *WhoisUpsertBulk) SetRaw(v string) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateRaw() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateRaw()
	})
}

// SetCountry sets the "country" field.
func (u *WhoisUpsertBulk) SetCountry(v string) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateCountry() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateCountry()
	})
}

// SetCreated sets the "created" field.
func (u *WhoisUpsertBulk) SetCreated(v time.Time) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateCreated() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateCreated()
	})
}

// SetUpdated sets the "updated" field.
func (u *WhoisUpsertBulk) SetUpdated(v time.Time) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetUpdated(v)
	})
}

// UpdateUpdated sets the "updated" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateUpdated() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateUpdated()
	})
}

// SetTimeFirst sets the "time_first" field.
func (u *WhoisUpsertBulk) SetTimeFirst(v time.Time) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetTimeFirst(v)
	})
}

// UpdateTimeFirst sets the "time_first" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateTimeFirst() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateTimeFirst()
	})
}

// SetTimeLast sets the "time_last" field.
func (u *WhoisUpsertBulk) SetTimeLast(v time.Time) *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.SetTimeLast(v)
	})
}

// UpdateTimeLast sets the "time_last" field to the value that was provided on create.
func (u *WhoisUpsertBulk) UpdateTimeLast() *WhoisUpsertBulk {
	return u.Update(func(s *WhoisUpsert) {
		s.UpdateTimeLast()
	})
}

// Exec executes the query.
func (u *WhoisUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model_ent: OnConflict was set for builder %d. Set it on the WhoisCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for WhoisCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WhoisUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
