// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scan"
)

// DNSEntryUpdate is the builder for updating DNSEntry entities.
type DNSEntryUpdate struct {
	config
	hooks    []Hook
	mutation *DNSEntryMutation
}

// Where appends a list predicates to the DNSEntryUpdate builder.
func (deu *DNSEntryUpdate) Where(ps ...predicate.DNSEntry) *DNSEntryUpdate {
	deu.mutation.Where(ps...)
	return deu
}

// SetName sets the "name" field.
func (deu *DNSEntryUpdate) SetName(s string) *DNSEntryUpdate {
	deu.mutation.SetName(s)
	return deu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableName(s *string) *DNSEntryUpdate {
	if s != nil {
		deu.SetName(*s)
	}
	return deu
}

// SetType sets the "type" field.
func (deu *DNSEntryUpdate) SetType(s string) *DNSEntryUpdate {
	deu.mutation.SetType(s)
	return deu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableType(s *string) *DNSEntryUpdate {
	if s != nil {
		deu.SetType(*s)
	}
	return deu
}

// SetValue sets the "value" field.
func (deu *DNSEntryUpdate) SetValue(s string) *DNSEntryUpdate {
	deu.mutation.SetValue(s)
	return deu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableValue(s *string) *DNSEntryUpdate {
	if s != nil {
		deu.SetValue(*s)
	}
	return deu
}

// SetTTL sets the "ttl" field.
func (deu *DNSEntryUpdate) SetTTL(i int) *DNSEntryUpdate {
	deu.mutation.ResetTTL()
	deu.mutation.SetTTL(i)
	return deu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableTTL(i *int) *DNSEntryUpdate {
	if i != nil {
		deu.SetTTL(*i)
	}
	return deu
}

// AddTTL adds i to the "ttl" field.
func (deu *DNSEntryUpdate) AddTTL(i int) *DNSEntryUpdate {
	deu.mutation.AddTTL(i)
	return deu
}

// SetTimeFirst sets the "time_first" field.
func (deu *DNSEntryUpdate) SetTimeFirst(t time.Time) *DNSEntryUpdate {
	deu.mutation.SetTimeFirst(t)
	return deu
}

// SetNillableTimeFirst sets the "time_first" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableTimeFirst(t *time.Time) *DNSEntryUpdate {
	if t != nil {
		deu.SetTimeFirst(*t)
	}
	return deu
}

// SetTimeLast sets the "time_last" field.
func (deu *DNSEntryUpdate) SetTimeLast(t time.Time) *DNSEntryUpdate {
	deu.mutation.SetTimeLast(t)
	return deu
}

// SetNillableTimeLast sets the "time_last" field if the given value is not nil.
func (deu *DNSEntryUpdate) SetNillableTimeLast(t *time.Time) *DNSEntryUpdate {
	if t != nil {
		deu.SetTimeLast(*t)
	}
	return deu
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (deu *DNSEntryUpdate) AddDomainIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.AddDomainIDs(ids...)
	return deu
}

// AddDomain adds the "domain" edges to the Domain entity.
func (deu *DNSEntryUpdate) AddDomain(d ...*Domain) *DNSEntryUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return deu.AddDomainIDs(ids...)
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (deu *DNSEntryUpdate) AddIpaddresIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.AddIpaddresIDs(ids...)
	return deu
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (deu *DNSEntryUpdate) AddIpaddress(i ...*IPAddress) *DNSEntryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return deu.AddIpaddresIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (deu *DNSEntryUpdate) AddNameserverIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.AddNameserverIDs(ids...)
	return deu
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (deu *DNSEntryUpdate) AddNameserver(n ...*Nameserver) *DNSEntryUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return deu.AddNameserverIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (deu *DNSEntryUpdate) AddScanIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.AddScanIDs(ids...)
	return deu
}

// AddScan adds the "scan" edges to the Scan entity.
func (deu *DNSEntryUpdate) AddScan(s ...*Scan) *DNSEntryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return deu.AddScanIDs(ids...)
}

// Mutation returns the DNSEntryMutation object of the builder.
func (deu *DNSEntryUpdate) Mutation() *DNSEntryMutation {
	return deu.mutation
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (deu *DNSEntryUpdate) ClearDomain() *DNSEntryUpdate {
	deu.mutation.ClearDomain()
	return deu
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (deu *DNSEntryUpdate) RemoveDomainIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.RemoveDomainIDs(ids...)
	return deu
}

// RemoveDomain removes "domain" edges to Domain entities.
func (deu *DNSEntryUpdate) RemoveDomain(d ...*Domain) *DNSEntryUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return deu.RemoveDomainIDs(ids...)
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (deu *DNSEntryUpdate) ClearIpaddress() *DNSEntryUpdate {
	deu.mutation.ClearIpaddress()
	return deu
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (deu *DNSEntryUpdate) RemoveIpaddresIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.RemoveIpaddresIDs(ids...)
	return deu
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (deu *DNSEntryUpdate) RemoveIpaddress(i ...*IPAddress) *DNSEntryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return deu.RemoveIpaddresIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (deu *DNSEntryUpdate) ClearNameserver() *DNSEntryUpdate {
	deu.mutation.ClearNameserver()
	return deu
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (deu *DNSEntryUpdate) RemoveNameserverIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.RemoveNameserverIDs(ids...)
	return deu
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (deu *DNSEntryUpdate) RemoveNameserver(n ...*Nameserver) *DNSEntryUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return deu.RemoveNameserverIDs(ids...)
}

// ClearScan clears all "scan" edges to the Scan entity.
func (deu *DNSEntryUpdate) ClearScan() *DNSEntryUpdate {
	deu.mutation.ClearScan()
	return deu
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (deu *DNSEntryUpdate) RemoveScanIDs(ids ...int) *DNSEntryUpdate {
	deu.mutation.RemoveScanIDs(ids...)
	return deu
}

// RemoveScan removes "scan" edges to Scan entities.
func (deu *DNSEntryUpdate) RemoveScan(s ...*Scan) *DNSEntryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return deu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (deu *DNSEntryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, deu.sqlSave, deu.mutation, deu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DNSEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DNSEntryUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DNSEntryUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deu *DNSEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsentry.Table, dnsentry.Columns, sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt))
	if ps := deu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.Name(); ok {
		_spec.SetField(dnsentry.FieldName, field.TypeString, value)
	}
	if value, ok := deu.mutation.GetType(); ok {
		_spec.SetField(dnsentry.FieldType, field.TypeString, value)
	}
	if value, ok := deu.mutation.Value(); ok {
		_spec.SetField(dnsentry.FieldValue, field.TypeString, value)
	}
	if value, ok := deu.mutation.TTL(); ok {
		_spec.SetField(dnsentry.FieldTTL, field.TypeInt, value)
	}
	if value, ok := deu.mutation.AddedTTL(); ok {
		_spec.AddField(dnsentry.FieldTTL, field.TypeInt, value)
	}
	if value, ok := deu.mutation.TimeFirst(); ok {
		_spec.SetField(dnsentry.FieldTimeFirst, field.TypeTime, value)
	}
	if value, ok := deu.mutation.TimeLast(); ok {
		_spec.SetField(dnsentry.FieldTimeLast, field.TypeTime, value)
	}
	if deu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.RemovedDomainIDs(); len(nodes) > 0 && !deu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !deu.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !deu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.RemovedScanIDs(); len(nodes) > 0 && !deu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	deu.mutation.done = true
	return n, nil
}

// DNSEntryUpdateOne is the builder for updating a single DNSEntry entity.
type DNSEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DNSEntryMutation
}

// SetName sets the "name" field.
func (deuo *DNSEntryUpdateOne) SetName(s string) *DNSEntryUpdateOne {
	deuo.mutation.SetName(s)
	return deuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableName(s *string) *DNSEntryUpdateOne {
	if s != nil {
		deuo.SetName(*s)
	}
	return deuo
}

// SetType sets the "type" field.
func (deuo *DNSEntryUpdateOne) SetType(s string) *DNSEntryUpdateOne {
	deuo.mutation.SetType(s)
	return deuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableType(s *string) *DNSEntryUpdateOne {
	if s != nil {
		deuo.SetType(*s)
	}
	return deuo
}

// SetValue sets the "value" field.
func (deuo *DNSEntryUpdateOne) SetValue(s string) *DNSEntryUpdateOne {
	deuo.mutation.SetValue(s)
	return deuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableValue(s *string) *DNSEntryUpdateOne {
	if s != nil {
		deuo.SetValue(*s)
	}
	return deuo
}

// SetTTL sets the "ttl" field.
func (deuo *DNSEntryUpdateOne) SetTTL(i int) *DNSEntryUpdateOne {
	deuo.mutation.ResetTTL()
	deuo.mutation.SetTTL(i)
	return deuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableTTL(i *int) *DNSEntryUpdateOne {
	if i != nil {
		deuo.SetTTL(*i)
	}
	return deuo
}

// AddTTL adds i to the "ttl" field.
func (deuo *DNSEntryUpdateOne) AddTTL(i int) *DNSEntryUpdateOne {
	deuo.mutation.AddTTL(i)
	return deuo
}

// SetTimeFirst sets the "time_first" field.
func (deuo *DNSEntryUpdateOne) SetTimeFirst(t time.Time) *DNSEntryUpdateOne {
	deuo.mutation.SetTimeFirst(t)
	return deuo
}

// SetNillableTimeFirst sets the "time_first" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableTimeFirst(t *time.Time) *DNSEntryUpdateOne {
	if t != nil {
		deuo.SetTimeFirst(*t)
	}
	return deuo
}

// SetTimeLast sets the "time_last" field.
func (deuo *DNSEntryUpdateOne) SetTimeLast(t time.Time) *DNSEntryUpdateOne {
	deuo.mutation.SetTimeLast(t)
	return deuo
}

// SetNillableTimeLast sets the "time_last" field if the given value is not nil.
func (deuo *DNSEntryUpdateOne) SetNillableTimeLast(t *time.Time) *DNSEntryUpdateOne {
	if t != nil {
		deuo.SetTimeLast(*t)
	}
	return deuo
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (deuo *DNSEntryUpdateOne) AddDomainIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.AddDomainIDs(ids...)
	return deuo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (deuo *DNSEntryUpdateOne) AddDomain(d ...*Domain) *DNSEntryUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return deuo.AddDomainIDs(ids...)
}

// AddIpaddresIDs adds the "ipaddress" edge to the IPAddress entity by IDs.
func (deuo *DNSEntryUpdateOne) AddIpaddresIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.AddIpaddresIDs(ids...)
	return deuo
}

// AddIpaddress adds the "ipaddress" edges to the IPAddress entity.
func (deuo *DNSEntryUpdateOne) AddIpaddress(i ...*IPAddress) *DNSEntryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return deuo.AddIpaddresIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (deuo *DNSEntryUpdateOne) AddNameserverIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.AddNameserverIDs(ids...)
	return deuo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (deuo *DNSEntryUpdateOne) AddNameserver(n ...*Nameserver) *DNSEntryUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return deuo.AddNameserverIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the Scan entity by IDs.
func (deuo *DNSEntryUpdateOne) AddScanIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.AddScanIDs(ids...)
	return deuo
}

// AddScan adds the "scan" edges to the Scan entity.
func (deuo *DNSEntryUpdateOne) AddScan(s ...*Scan) *DNSEntryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return deuo.AddScanIDs(ids...)
}

// Mutation returns the DNSEntryMutation object of the builder.
func (deuo *DNSEntryUpdateOne) Mutation() *DNSEntryMutation {
	return deuo.mutation
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (deuo *DNSEntryUpdateOne) ClearDomain() *DNSEntryUpdateOne {
	deuo.mutation.ClearDomain()
	return deuo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (deuo *DNSEntryUpdateOne) RemoveDomainIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.RemoveDomainIDs(ids...)
	return deuo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (deuo *DNSEntryUpdateOne) RemoveDomain(d ...*Domain) *DNSEntryUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return deuo.RemoveDomainIDs(ids...)
}

// ClearIpaddress clears all "ipaddress" edges to the IPAddress entity.
func (deuo *DNSEntryUpdateOne) ClearIpaddress() *DNSEntryUpdateOne {
	deuo.mutation.ClearIpaddress()
	return deuo
}

// RemoveIpaddresIDs removes the "ipaddress" edge to IPAddress entities by IDs.
func (deuo *DNSEntryUpdateOne) RemoveIpaddresIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.RemoveIpaddresIDs(ids...)
	return deuo
}

// RemoveIpaddress removes "ipaddress" edges to IPAddress entities.
func (deuo *DNSEntryUpdateOne) RemoveIpaddress(i ...*IPAddress) *DNSEntryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return deuo.RemoveIpaddresIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (deuo *DNSEntryUpdateOne) ClearNameserver() *DNSEntryUpdateOne {
	deuo.mutation.ClearNameserver()
	return deuo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (deuo *DNSEntryUpdateOne) RemoveNameserverIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.RemoveNameserverIDs(ids...)
	return deuo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (deuo *DNSEntryUpdateOne) RemoveNameserver(n ...*Nameserver) *DNSEntryUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return deuo.RemoveNameserverIDs(ids...)
}

// ClearScan clears all "scan" edges to the Scan entity.
func (deuo *DNSEntryUpdateOne) ClearScan() *DNSEntryUpdateOne {
	deuo.mutation.ClearScan()
	return deuo
}

// RemoveScanIDs removes the "scan" edge to Scan entities by IDs.
func (deuo *DNSEntryUpdateOne) RemoveScanIDs(ids ...int) *DNSEntryUpdateOne {
	deuo.mutation.RemoveScanIDs(ids...)
	return deuo
}

// RemoveScan removes "scan" edges to Scan entities.
func (deuo *DNSEntryUpdateOne) RemoveScan(s ...*Scan) *DNSEntryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return deuo.RemoveScanIDs(ids...)
}

// Where appends a list predicates to the DNSEntryUpdate builder.
func (deuo *DNSEntryUpdateOne) Where(ps ...predicate.DNSEntry) *DNSEntryUpdateOne {
	deuo.mutation.Where(ps...)
	return deuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (deuo *DNSEntryUpdateOne) Select(field string, fields ...string) *DNSEntryUpdateOne {
	deuo.fields = append([]string{field}, fields...)
	return deuo
}

// Save executes the query and returns the updated DNSEntry entity.
func (deuo *DNSEntryUpdateOne) Save(ctx context.Context) (*DNSEntry, error) {
	return withHooks(ctx, deuo.sqlSave, deuo.mutation, deuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DNSEntryUpdateOne) SaveX(ctx context.Context) *DNSEntry {
	node, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (deuo *DNSEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DNSEntryUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deuo *DNSEntryUpdateOne) sqlSave(ctx context.Context) (_node *DNSEntry, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsentry.Table, dnsentry.Columns, sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt))
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "DNSEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := deuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsentry.FieldID)
		for _, f := range fields {
			if !dnsentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != dnsentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := deuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deuo.mutation.Name(); ok {
		_spec.SetField(dnsentry.FieldName, field.TypeString, value)
	}
	if value, ok := deuo.mutation.GetType(); ok {
		_spec.SetField(dnsentry.FieldType, field.TypeString, value)
	}
	if value, ok := deuo.mutation.Value(); ok {
		_spec.SetField(dnsentry.FieldValue, field.TypeString, value)
	}
	if value, ok := deuo.mutation.TTL(); ok {
		_spec.SetField(dnsentry.FieldTTL, field.TypeInt, value)
	}
	if value, ok := deuo.mutation.AddedTTL(); ok {
		_spec.AddField(dnsentry.FieldTTL, field.TypeInt, value)
	}
	if value, ok := deuo.mutation.TimeFirst(); ok {
		_spec.SetField(dnsentry.FieldTimeFirst, field.TypeTime, value)
	}
	if value, ok := deuo.mutation.TimeLast(); ok {
		_spec.SetField(dnsentry.FieldTimeLast, field.TypeTime, value)
	}
	if deuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !deuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.DomainTable,
			Columns: []string{dnsentry.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.RemovedIpaddressIDs(); len(nodes) > 0 && !deuo.mutation.IpaddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.IpaddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.IpaddressTable,
			Columns: []string{dnsentry.IpaddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !deuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsentry.NameserverTable,
			Columns: []string{dnsentry.NameserverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.RemovedScanIDs(); len(nodes) > 0 && !deuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dnsentry.ScanTable,
			Columns: dnsentry.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DNSEntry{config: deuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	deuo.mutation.done = true
	return _node, nil
}
