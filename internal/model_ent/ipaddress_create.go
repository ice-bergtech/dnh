// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/dnsentry"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// IPAddressCreate is the builder for creating a IPAddress entity.
type IPAddressCreate struct {
	config
	mutation *IPAddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIP sets the "ip" field.
func (iac *IPAddressCreate) SetIP(s string) *IPAddressCreate {
	iac.mutation.SetIP(s)
	return iac
}

// SetMask sets the "mask" field.
func (iac *IPAddressCreate) SetMask(s string) *IPAddressCreate {
	iac.mutation.SetMask(s)
	return iac
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (iac *IPAddressCreate) AddAsninfoIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddAsninfoIDs(ids...)
	return iac
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (iac *IPAddressCreate) AddAsninfo(a ...*ASNInfo) *IPAddressCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iac.AddAsninfoIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (iac *IPAddressCreate) AddScanIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddScanIDs(ids...)
	return iac
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (iac *IPAddressCreate) AddScan(s ...*ScanJob) *IPAddressCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iac.AddScanIDs(ids...)
}

// AddDnsentryIDs adds the "dnsentry" edge to the DNSEntry entity by IDs.
func (iac *IPAddressCreate) AddDnsentryIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddDnsentryIDs(ids...)
	return iac
}

// AddDnsentry adds the "dnsentry" edges to the DNSEntry entity.
func (iac *IPAddressCreate) AddDnsentry(d ...*DNSEntry) *IPAddressCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iac.AddDnsentryIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (iac *IPAddressCreate) AddDomainIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddDomainIDs(ids...)
	return iac
}

// AddDomain adds the "domain" edges to the Domain entity.
func (iac *IPAddressCreate) AddDomain(d ...*Domain) *IPAddressCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return iac.AddDomainIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (iac *IPAddressCreate) AddNameserverIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddNameserverIDs(ids...)
	return iac
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (iac *IPAddressCreate) AddNameserver(n ...*Nameserver) *IPAddressCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return iac.AddNameserverIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (iac *IPAddressCreate) AddRegistrarIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddRegistrarIDs(ids...)
	return iac
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (iac *IPAddressCreate) AddRegistrar(r ...*Registrar) *IPAddressCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iac.AddRegistrarIDs(ids...)
}

// AddWhoiIDs adds the "whois" edge to the Whois entity by IDs.
func (iac *IPAddressCreate) AddWhoiIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddWhoiIDs(ids...)
	return iac
}

// AddWhois adds the "whois" edges to the Whois entity.
func (iac *IPAddressCreate) AddWhois(w ...*Whois) *IPAddressCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iac.AddWhoiIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iac *IPAddressCreate) Mutation() *IPAddressMutation {
	return iac.mutation
}

// Save creates the IPAddress in the database.
func (iac *IPAddressCreate) Save(ctx context.Context) (*IPAddress, error) {
	return withHooks(ctx, iac.sqlSave, iac.mutation, iac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iac *IPAddressCreate) SaveX(ctx context.Context) *IPAddress {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *IPAddressCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *IPAddressCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *IPAddressCreate) check() error {
	if _, ok := iac.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`model_ent: missing required field "IPAddress.ip"`)}
	}
	if _, ok := iac.mutation.Mask(); !ok {
		return &ValidationError{Name: "mask", err: errors.New(`model_ent: missing required field "IPAddress.mask"`)}
	}
	return nil
}

func (iac *IPAddressCreate) sqlSave(ctx context.Context) (*IPAddress, error) {
	if err := iac.check(); err != nil {
		return nil, err
	}
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iac.mutation.id = &_node.ID
	iac.mutation.done = true
	return _node, nil
}

func (iac *IPAddressCreate) createSpec() (*IPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddress{config: iac.config}
		_spec = sqlgraph.NewCreateSpec(ipaddress.Table, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	)
	_spec.OnConflict = iac.conflict
	if value, ok := iac.mutation.IP(); ok {
		_spec.SetField(ipaddress.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := iac.mutation.Mask(); ok {
		_spec.SetField(ipaddress.FieldMask, field.TypeString, value)
		_node.Mask = value
	}
	if nodes := iac.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: ipaddress.AsninfoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.ScanTable,
			Columns: ipaddress.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.DnsentryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DnsentryTable,
			Columns: ipaddress.DnsentryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.DomainTable,
			Columns: ipaddress.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.NameserverTable,
			Columns: ipaddress.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.RegistrarTable,
			Columns: ipaddress.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.WhoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ipaddress.WhoisTable,
			Columns: ipaddress.WhoisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPAddress.Create().
//		SetIP(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPAddressUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
func (iac *IPAddressCreate) OnConflict(opts ...sql.ConflictOption) *IPAddressUpsertOne {
	iac.conflict = opts
	return &IPAddressUpsertOne{
		create: iac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iac *IPAddressCreate) OnConflictColumns(columns ...string) *IPAddressUpsertOne {
	iac.conflict = append(iac.conflict, sql.ConflictColumns(columns...))
	return &IPAddressUpsertOne{
		create: iac,
	}
}

type (
	// IPAddressUpsertOne is the builder for "upsert"-ing
	//  one IPAddress node.
	IPAddressUpsertOne struct {
		create *IPAddressCreate
	}

	// IPAddressUpsert is the "OnConflict" setter.
	IPAddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetIP sets the "ip" field.
func (u *IPAddressUpsert) SetIP(v string) *IPAddressUpsert {
	u.Set(ipaddress.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPAddressUpsert) UpdateIP() *IPAddressUpsert {
	u.SetExcluded(ipaddress.FieldIP)
	return u
}

// SetMask sets the "mask" field.
func (u *IPAddressUpsert) SetMask(v string) *IPAddressUpsert {
	u.Set(ipaddress.FieldMask, v)
	return u
}

// UpdateMask sets the "mask" field to the value that was provided on create.
func (u *IPAddressUpsert) UpdateMask() *IPAddressUpsert {
	u.SetExcluded(ipaddress.FieldMask)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IPAddressUpsertOne) UpdateNewValues() *IPAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IPAddressUpsertOne) Ignore() *IPAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPAddressUpsertOne) DoNothing() *IPAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPAddressCreate.OnConflict
// documentation for more info.
func (u *IPAddressUpsertOne) Update(set func(*IPAddressUpsert)) *IPAddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPAddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *IPAddressUpsertOne) SetIP(v string) *IPAddressUpsertOne {
	return u.Update(func(s *IPAddressUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPAddressUpsertOne) UpdateIP() *IPAddressUpsertOne {
	return u.Update(func(s *IPAddressUpsert) {
		s.UpdateIP()
	})
}

// SetMask sets the "mask" field.
func (u *IPAddressUpsertOne) SetMask(v string) *IPAddressUpsertOne {
	return u.Update(func(s *IPAddressUpsert) {
		s.SetMask(v)
	})
}

// UpdateMask sets the "mask" field to the value that was provided on create.
func (u *IPAddressUpsertOne) UpdateMask() *IPAddressUpsertOne {
	return u.Update(func(s *IPAddressUpsert) {
		s.UpdateMask()
	})
}

// Exec executes the query.
func (u *IPAddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for IPAddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPAddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IPAddressUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IPAddressUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IPAddressCreateBulk is the builder for creating many IPAddress entities in bulk.
type IPAddressCreateBulk struct {
	config
	err      error
	builders []*IPAddressCreate
	conflict []sql.ConflictOption
}

// Save creates the IPAddress entities in the database.
func (iacb *IPAddressCreateBulk) Save(ctx context.Context) ([]*IPAddress, error) {
	if iacb.err != nil {
		return nil, iacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*IPAddress, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) SaveX(ctx context.Context) []*IPAddress {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *IPAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPAddress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPAddressUpsert) {
//			SetIP(v+v).
//		}).
//		Exec(ctx)
func (iacb *IPAddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *IPAddressUpsertBulk {
	iacb.conflict = opts
	return &IPAddressUpsertBulk{
		create: iacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iacb *IPAddressCreateBulk) OnConflictColumns(columns ...string) *IPAddressUpsertBulk {
	iacb.conflict = append(iacb.conflict, sql.ConflictColumns(columns...))
	return &IPAddressUpsertBulk{
		create: iacb,
	}
}

// IPAddressUpsertBulk is the builder for "upsert"-ing
// a bulk of IPAddress nodes.
type IPAddressUpsertBulk struct {
	create *IPAddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IPAddressUpsertBulk) UpdateNewValues() *IPAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPAddress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IPAddressUpsertBulk) Ignore() *IPAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPAddressUpsertBulk) DoNothing() *IPAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPAddressCreateBulk.OnConflict
// documentation for more info.
func (u *IPAddressUpsertBulk) Update(set func(*IPAddressUpsert)) *IPAddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPAddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *IPAddressUpsertBulk) SetIP(v string) *IPAddressUpsertBulk {
	return u.Update(func(s *IPAddressUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *IPAddressUpsertBulk) UpdateIP() *IPAddressUpsertBulk {
	return u.Update(func(s *IPAddressUpsert) {
		s.UpdateIP()
	})
}

// SetMask sets the "mask" field.
func (u *IPAddressUpsertBulk) SetMask(v string) *IPAddressUpsertBulk {
	return u.Update(func(s *IPAddressUpsert) {
		s.SetMask(v)
	})
}

// UpdateMask sets the "mask" field to the value that was provided on create.
func (u *IPAddressUpsertBulk) UpdateMask() *IPAddressUpsertBulk {
	return u.Update(func(s *IPAddressUpsert) {
		s.UpdateMask()
	})
}

// Exec executes the query.
func (u *IPAddressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model_ent: OnConflict was set for builder %d. Set it on the IPAddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model_ent: missing options for IPAddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPAddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
