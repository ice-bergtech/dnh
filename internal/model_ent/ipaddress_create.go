// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
)

// IPAddressCreate is the builder for creating a IPAddress entity.
type IPAddressCreate struct {
	config
	mutation *IPAddressMutation
	hooks    []Hook
}

// SetIP sets the "ip" field.
func (iac *IPAddressCreate) SetIP(s string) *IPAddressCreate {
	iac.mutation.SetIP(s)
	return iac
}

// SetMask sets the "mask" field.
func (iac *IPAddressCreate) SetMask(s string) *IPAddressCreate {
	iac.mutation.SetMask(s)
	return iac
}

// AddAsninfoIDs adds the "asninfo" edge to the ASNInfo entity by IDs.
func (iac *IPAddressCreate) AddAsninfoIDs(ids ...int) *IPAddressCreate {
	iac.mutation.AddAsninfoIDs(ids...)
	return iac
}

// AddAsninfo adds the "asninfo" edges to the ASNInfo entity.
func (iac *IPAddressCreate) AddAsninfo(a ...*ASNInfo) *IPAddressCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iac.AddAsninfoIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iac *IPAddressCreate) Mutation() *IPAddressMutation {
	return iac.mutation
}

// Save creates the IPAddress in the database.
func (iac *IPAddressCreate) Save(ctx context.Context) (*IPAddress, error) {
	return withHooks(ctx, iac.sqlSave, iac.mutation, iac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iac *IPAddressCreate) SaveX(ctx context.Context) *IPAddress {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *IPAddressCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *IPAddressCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *IPAddressCreate) check() error {
	if _, ok := iac.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`model_ent: missing required field "IPAddress.ip"`)}
	}
	if _, ok := iac.mutation.Mask(); !ok {
		return &ValidationError{Name: "mask", err: errors.New(`model_ent: missing required field "IPAddress.mask"`)}
	}
	return nil
}

func (iac *IPAddressCreate) sqlSave(ctx context.Context) (*IPAddress, error) {
	if err := iac.check(); err != nil {
		return nil, err
	}
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iac.mutation.id = &_node.ID
	iac.mutation.done = true
	return _node, nil
}

func (iac *IPAddressCreate) createSpec() (*IPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddress{config: iac.config}
		_spec = sqlgraph.NewCreateSpec(ipaddress.Table, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	)
	if value, ok := iac.mutation.IP(); ok {
		_spec.SetField(ipaddress.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := iac.mutation.Mask(); ok {
		_spec.SetField(ipaddress.FieldMask, field.TypeString, value)
		_node.Mask = value
	}
	if nodes := iac.mutation.AsninfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.AsninfoTable,
			Columns: []string{ipaddress.AsninfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPAddressCreateBulk is the builder for creating many IPAddress entities in bulk.
type IPAddressCreateBulk struct {
	config
	err      error
	builders []*IPAddressCreate
}

// Save creates the IPAddress entities in the database.
func (iacb *IPAddressCreateBulk) Save(ctx context.Context) ([]*IPAddress, error) {
	if iacb.err != nil {
		return nil, iacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*IPAddress, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) SaveX(ctx context.Context) []*IPAddress {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *IPAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}
