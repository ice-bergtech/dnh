// Code generated by ent, DO NOT EDIT.

package asninfo

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the asninfo type in the database.
	Label = "asn_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAsn holds the string denoting the asn field in the database.
	FieldAsn = "asn"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldRegistry holds the string denoting the registry field in the database.
	FieldRegistry = "registry"
	// Table holds the table name of the asninfo in the database.
	Table = "asn_infos"
)

// Columns holds all SQL columns for asninfo fields.
var Columns = []string{
	FieldID,
	FieldAsn,
	FieldCountry,
	FieldRegistry,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "asn_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ip_address_asninfo",
	"scan_asninfo",
	"whois_asn",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ASNInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAsn orders the results by the asn field.
func ByAsn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAsn, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByRegistry orders the results by the registry field.
func ByRegistry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistry, opts...).ToFunc()
}
