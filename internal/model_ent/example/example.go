// Code generated by ent, DO NOT EDIT.

package example

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the example type in the database.
	Label = "example"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// EdgeIpaddress holds the string denoting the ipaddress edge name in mutations.
	EdgeIpaddress = "ipaddress"
	// EdgeNext holds the string denoting the next edge name in mutations.
	EdgeNext = "next"
	// EdgeDnsentry holds the string denoting the dnsentry edge name in mutations.
	EdgeDnsentry = "dnsentry"
	// EdgeDomain holds the string denoting the domain edge name in mutations.
	EdgeDomain = "domain"
	// EdgePaths holds the string denoting the paths edge name in mutations.
	EdgePaths = "paths"
	// EdgeNameserver holds the string denoting the nameserver edge name in mutations.
	EdgeNameserver = "nameserver"
	// EdgeRegistrar holds the string denoting the registrar edge name in mutations.
	EdgeRegistrar = "registrar"
	// EdgeWhois holds the string denoting the whois edge name in mutations.
	EdgeWhois = "whois"
	// Table holds the table name of the example in the database.
	Table = "examples"
	// IpaddressTable is the table that holds the ipaddress relation/edge.
	IpaddressTable = "examples"
	// IpaddressInverseTable is the table name for the IPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "ipaddress" package.
	IpaddressInverseTable = "ip_addresses"
	// IpaddressColumn is the table column denoting the ipaddress relation/edge.
	IpaddressColumn = "example_ipaddress"
	// NextTable is the table that holds the next relation/edge.
	NextTable = "asn_infos"
	// NextInverseTable is the table name for the ASNInfo entity.
	// It exists in this package in order to avoid circular dependency with the "asninfo" package.
	NextInverseTable = "asn_infos"
	// NextColumn is the table column denoting the next relation/edge.
	NextColumn = "example_next"
	// DnsentryTable is the table that holds the dnsentry relation/edge.
	DnsentryTable = "dns_entries"
	// DnsentryInverseTable is the table name for the DNSEntry entity.
	// It exists in this package in order to avoid circular dependency with the "dnsentry" package.
	DnsentryInverseTable = "dns_entries"
	// DnsentryColumn is the table column denoting the dnsentry relation/edge.
	DnsentryColumn = "example_dnsentry"
	// DomainTable is the table that holds the domain relation/edge.
	DomainTable = "domains"
	// DomainInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "domain" package.
	DomainInverseTable = "domains"
	// DomainColumn is the table column denoting the domain relation/edge.
	DomainColumn = "example_domain"
	// PathsTable is the table that holds the paths relation/edge.
	PathsTable = "paths"
	// PathsInverseTable is the table name for the Path entity.
	// It exists in this package in order to avoid circular dependency with the "path" package.
	PathsInverseTable = "paths"
	// PathsColumn is the table column denoting the paths relation/edge.
	PathsColumn = "example_paths"
	// NameserverTable is the table that holds the nameserver relation/edge.
	NameserverTable = "nameservers"
	// NameserverInverseTable is the table name for the Nameserver entity.
	// It exists in this package in order to avoid circular dependency with the "nameserver" package.
	NameserverInverseTable = "nameservers"
	// NameserverColumn is the table column denoting the nameserver relation/edge.
	NameserverColumn = "example_nameserver"
	// RegistrarTable is the table that holds the registrar relation/edge.
	RegistrarTable = "registrars"
	// RegistrarInverseTable is the table name for the Registrar entity.
	// It exists in this package in order to avoid circular dependency with the "registrar" package.
	RegistrarInverseTable = "registrars"
	// RegistrarColumn is the table column denoting the registrar relation/edge.
	RegistrarColumn = "example_registrar"
	// WhoisTable is the table that holds the whois relation/edge.
	WhoisTable = "whois"
	// WhoisInverseTable is the table name for the Whois entity.
	// It exists in this package in order to avoid circular dependency with the "whois" package.
	WhoisInverseTable = "whois"
	// WhoisColumn is the table column denoting the whois relation/edge.
	WhoisColumn = "example_whois"
)

// Columns holds all SQL columns for example fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "examples"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"example_ipaddress",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Example queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByIpaddressField orders the results by ipaddress field.
func ByIpaddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIpaddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByNextCount orders the results by next count.
func ByNextCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextStep(), opts...)
	}
}

// ByNext orders the results by next terms.
func ByNext(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDnsentryCount orders the results by dnsentry count.
func ByDnsentryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDnsentryStep(), opts...)
	}
}

// ByDnsentry orders the results by dnsentry terms.
func ByDnsentry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDnsentryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDomainCount orders the results by domain count.
func ByDomainCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDomainStep(), opts...)
	}
}

// ByDomain orders the results by domain terms.
func ByDomain(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDomainStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPathsCount orders the results by paths count.
func ByPathsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPathsStep(), opts...)
	}
}

// ByPaths orders the results by paths terms.
func ByPaths(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPathsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNameserverCount orders the results by nameserver count.
func ByNameserverCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNameserverStep(), opts...)
	}
}

// ByNameserver orders the results by nameserver terms.
func ByNameserver(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNameserverStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRegistrarCount orders the results by registrar count.
func ByRegistrarCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRegistrarStep(), opts...)
	}
}

// ByRegistrar orders the results by registrar terms.
func ByRegistrar(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegistrarStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWhoisCount orders the results by whois count.
func ByWhoisCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWhoisStep(), opts...)
	}
}

// ByWhois orders the results by whois terms.
func ByWhois(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWhoisStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIpaddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IpaddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IpaddressTable, IpaddressColumn),
	)
}
func newNextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NextTable, NextColumn),
	)
}
func newDnsentryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DnsentryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DnsentryTable, DnsentryColumn),
	)
}
func newDomainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DomainInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DomainTable, DomainColumn),
	)
}
func newPathsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PathsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PathsTable, PathsColumn),
	)
}
func newNameserverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NameserverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NameserverTable, NameserverColumn),
	)
}
func newRegistrarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegistrarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RegistrarTable, RegistrarColumn),
	)
}
func newWhoisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WhoisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WhoisTable, WhoisColumn),
	)
}
