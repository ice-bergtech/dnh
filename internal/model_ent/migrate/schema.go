// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AsnInfosColumns holds the columns for the "asn_infos" table.
	AsnInfosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "asn", Type: field.TypeInt},
		{Name: "country", Type: field.TypeString},
		{Name: "registry", Type: field.TypeString},
		{Name: "ip_address_asninfo", Type: field.TypeInt, Nullable: true},
		{Name: "scan_asninfo", Type: field.TypeInt, Nullable: true},
		{Name: "whois_asn", Type: field.TypeInt, Nullable: true},
	}
	// AsnInfosTable holds the schema information for the "asn_infos" table.
	AsnInfosTable = &schema.Table{
		Name:       "asn_infos",
		Columns:    AsnInfosColumns,
		PrimaryKey: []*schema.Column{AsnInfosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "asn_infos_ip_addresses_asninfo",
				Columns:    []*schema.Column{AsnInfosColumns[4]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "asn_infos_scans_asninfo",
				Columns:    []*schema.Column{AsnInfosColumns[5]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "asn_infos_whois_asn",
				Columns:    []*schema.Column{AsnInfosColumns[6]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DNSEntriesColumns holds the columns for the "dns_entries" table.
	DNSEntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "ttl", Type: field.TypeInt},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "domain_dnsentry", Type: field.TypeInt, Nullable: true},
		{Name: "scan_dnsentry", Type: field.TypeInt, Nullable: true},
	}
	// DNSEntriesTable holds the schema information for the "dns_entries" table.
	DNSEntriesTable = &schema.Table{
		Name:       "dns_entries",
		Columns:    DNSEntriesColumns,
		PrimaryKey: []*schema.Column{DNSEntriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_entries_domains_dnsentry",
				Columns:    []*schema.Column{DNSEntriesColumns[7]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "dns_entries_scans_dnsentry",
				Columns:    []*schema.Column{DNSEntriesColumns[8]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DomainsColumns holds the columns for the "domains" table.
	DomainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "scan_domain", Type: field.TypeInt, Nullable: true},
		{Name: "whois_domain", Type: field.TypeInt, Nullable: true},
	}
	// DomainsTable holds the schema information for the "domains" table.
	DomainsTable = &schema.Table{
		Name:       "domains",
		Columns:    DomainsColumns,
		PrimaryKey: []*schema.Column{DomainsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domains_scans_domain",
				Columns:    []*schema.Column{DomainsColumns[4]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "domains_whois_domain",
				Columns:    []*schema.Column{DomainsColumns[5]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IPAddressesColumns holds the columns for the "ip_addresses" table.
	IPAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "mask", Type: field.TypeString},
		{Name: "domain_ipaddress", Type: field.TypeInt, Nullable: true},
		{Name: "nameserver_ipaddress", Type: field.TypeInt, Nullable: true},
		{Name: "scan_ipaddress", Type: field.TypeInt, Nullable: true},
		{Name: "whois_iprange", Type: field.TypeInt, Nullable: true},
	}
	// IPAddressesTable holds the schema information for the "ip_addresses" table.
	IPAddressesTable = &schema.Table{
		Name:       "ip_addresses",
		Columns:    IPAddressesColumns,
		PrimaryKey: []*schema.Column{IPAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ip_addresses_domains_ipaddress",
				Columns:    []*schema.Column{IPAddressesColumns[3]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ip_addresses_nameservers_ipaddress",
				Columns:    []*schema.Column{IPAddressesColumns[4]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ip_addresses_scans_ipaddress",
				Columns:    []*schema.Column{IPAddressesColumns[5]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ip_addresses_whois_iprange",
				Columns:    []*schema.Column{IPAddressesColumns[6]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NameserversColumns holds the columns for the "nameservers" table.
	NameserversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "domain_nameserver", Type: field.TypeInt, Nullable: true},
		{Name: "scan_nameserver", Type: field.TypeInt, Nullable: true},
		{Name: "whois_nameservers", Type: field.TypeInt, Nullable: true},
	}
	// NameserversTable holds the schema information for the "nameservers" table.
	NameserversTable = &schema.Table{
		Name:       "nameservers",
		Columns:    NameserversColumns,
		PrimaryKey: []*schema.Column{NameserversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nameservers_domains_nameserver",
				Columns:    []*schema.Column{NameserversColumns[4]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "nameservers_scans_nameserver",
				Columns:    []*schema.Column{NameserversColumns[5]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "nameservers_whois_nameservers",
				Columns:    []*schema.Column{NameserversColumns[6]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PathsColumns holds the columns for the "paths" table.
	PathsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "domain_path", Type: field.TypeInt, Nullable: true},
		{Name: "scan_paths", Type: field.TypeInt, Nullable: true},
	}
	// PathsTable holds the schema information for the "paths" table.
	PathsTable = &schema.Table{
		Name:       "paths",
		Columns:    PathsColumns,
		PrimaryKey: []*schema.Column{PathsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "paths_domains_path",
				Columns:    []*schema.Column{PathsColumns[2]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "paths_scans_paths",
				Columns:    []*schema.Column{PathsColumns[3]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RegistrarsColumns holds the columns for the "registrars" table.
	RegistrarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "country_code", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "fax", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "scan_registrar", Type: field.TypeInt, Nullable: true},
		{Name: "whois_registrar", Type: field.TypeInt, Nullable: true},
	}
	// RegistrarsTable holds the schema information for the "registrars" table.
	RegistrarsTable = &schema.Table{
		Name:       "registrars",
		Columns:    RegistrarsColumns,
		PrimaryKey: []*schema.Column{RegistrarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registrars_scans_registrar",
				Columns:    []*schema.Column{RegistrarsColumns[9]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "registrars_whois_registrar",
				Columns:    []*schema.Column{RegistrarsColumns[10]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ScansColumns holds the columns for the "scans" table.
	ScansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "scanid", Type: field.TypeString, Unique: true},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// ScansTable holds the schema information for the "scans" table.
	ScansTable = &schema.Table{
		Name:       "scans",
		Columns:    ScansColumns,
		PrimaryKey: []*schema.Column{ScansColumns[0]},
	}
	// WhoisColumns holds the columns for the "whois" table.
	WhoisColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "query", Type: field.TypeString},
		{Name: "server", Type: field.TypeString},
		{Name: "raw", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
		{Name: "created", Type: field.TypeTime},
		{Name: "updated", Type: field.TypeTime},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "scan_whois", Type: field.TypeInt, Nullable: true},
	}
	// WhoisTable holds the schema information for the "whois" table.
	WhoisTable = &schema.Table{
		Name:       "whois",
		Columns:    WhoisColumns,
		PrimaryKey: []*schema.Column{WhoisColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_scans_whois",
				Columns:    []*schema.Column{WhoisColumns[9]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DomainDomainColumns holds the columns for the "domain_domain" table.
	DomainDomainColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeInt},
		{Name: "domain_id", Type: field.TypeInt},
	}
	// DomainDomainTable holds the schema information for the "domain_domain" table.
	DomainDomainTable = &schema.Table{
		Name:       "domain_domain",
		Columns:    DomainDomainColumns,
		PrimaryKey: []*schema.Column{DomainDomainColumns[0], DomainDomainColumns[1], DomainDomainColumns[0], DomainDomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domain_domain_domain_id",
				Columns:    []*schema.Column{DomainDomainColumns[0], DomainDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "domain_domain_domain_id",
				Columns:    []*schema.Column{DomainDomainColumns[0], DomainDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AsnInfosTable,
		DNSEntriesTable,
		DomainsTable,
		IPAddressesTable,
		NameserversTable,
		PathsTable,
		RegistrarsTable,
		ScansTable,
		WhoisTable,
		DomainDomainTable,
	}
)

func init() {
	AsnInfosTable.ForeignKeys[0].RefTable = IPAddressesTable
	AsnInfosTable.ForeignKeys[1].RefTable = ScansTable
	AsnInfosTable.ForeignKeys[2].RefTable = WhoisTable
	DNSEntriesTable.ForeignKeys[0].RefTable = DomainsTable
	DNSEntriesTable.ForeignKeys[1].RefTable = ScansTable
	DomainsTable.ForeignKeys[0].RefTable = ScansTable
	DomainsTable.ForeignKeys[1].RefTable = WhoisTable
	IPAddressesTable.ForeignKeys[0].RefTable = DomainsTable
	IPAddressesTable.ForeignKeys[1].RefTable = NameserversTable
	IPAddressesTable.ForeignKeys[2].RefTable = ScansTable
	IPAddressesTable.ForeignKeys[3].RefTable = WhoisTable
	NameserversTable.ForeignKeys[0].RefTable = DomainsTable
	NameserversTable.ForeignKeys[1].RefTable = ScansTable
	NameserversTable.ForeignKeys[2].RefTable = WhoisTable
	PathsTable.ForeignKeys[0].RefTable = DomainsTable
	PathsTable.ForeignKeys[1].RefTable = ScansTable
	RegistrarsTable.ForeignKeys[0].RefTable = ScansTable
	RegistrarsTable.ForeignKeys[1].RefTable = WhoisTable
	WhoisTable.ForeignKeys[0].RefTable = ScansTable
	DomainDomainTable.ForeignKeys[0].RefTable = DomainsTable
	DomainDomainTable.ForeignKeys[1].RefTable = DomainsTable
}
