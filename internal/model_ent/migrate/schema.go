// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AsnInfosColumns holds the columns for the "asn_infos" table.
	AsnInfosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "asn", Type: field.TypeInt},
		{Name: "country", Type: field.TypeString},
		{Name: "registry", Type: field.TypeString},
		{Name: "example_next", Type: field.TypeString, Nullable: true},
	}
	// AsnInfosTable holds the schema information for the "asn_infos" table.
	AsnInfosTable = &schema.Table{
		Name:       "asn_infos",
		Columns:    AsnInfosColumns,
		PrimaryKey: []*schema.Column{AsnInfosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "asn_infos_examples_next",
				Columns:    []*schema.Column{AsnInfosColumns[4]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DNSEntriesColumns holds the columns for the "dns_entries" table.
	DNSEntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "ttl", Type: field.TypeInt},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "example_dnsentry", Type: field.TypeString, Nullable: true},
	}
	// DNSEntriesTable holds the schema information for the "dns_entries" table.
	DNSEntriesTable = &schema.Table{
		Name:       "dns_entries",
		Columns:    DNSEntriesColumns,
		PrimaryKey: []*schema.Column{DNSEntriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_entries_examples_dnsentry",
				Columns:    []*schema.Column{DNSEntriesColumns[7]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DomainsColumns holds the columns for the "domains" table.
	DomainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "ports", Type: field.TypeJSON},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "example_domain", Type: field.TypeString, Nullable: true},
	}
	// DomainsTable holds the schema information for the "domains" table.
	DomainsTable = &schema.Table{
		Name:       "domains",
		Columns:    DomainsColumns,
		PrimaryKey: []*schema.Column{DomainsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domains_examples_domain",
				Columns:    []*schema.Column{DomainsColumns[5]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ExamplesColumns holds the columns for the "examples" table.
	ExamplesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "example_ipaddress", Type: field.TypeInt, Nullable: true},
	}
	// ExamplesTable holds the schema information for the "examples" table.
	ExamplesTable = &schema.Table{
		Name:       "examples",
		Columns:    ExamplesColumns,
		PrimaryKey: []*schema.Column{ExamplesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "examples_ip_addresses_ipaddress",
				Columns:    []*schema.Column{ExamplesColumns[2]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IPAddressesColumns holds the columns for the "ip_addresses" table.
	IPAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "mask", Type: field.TypeString},
	}
	// IPAddressesTable holds the schema information for the "ip_addresses" table.
	IPAddressesTable = &schema.Table{
		Name:       "ip_addresses",
		Columns:    IPAddressesColumns,
		PrimaryKey: []*schema.Column{IPAddressesColumns[0]},
	}
	// NameserversColumns holds the columns for the "nameservers" table.
	NameserversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "example_nameserver", Type: field.TypeString, Nullable: true},
	}
	// NameserversTable holds the schema information for the "nameservers" table.
	NameserversTable = &schema.Table{
		Name:       "nameservers",
		Columns:    NameserversColumns,
		PrimaryKey: []*schema.Column{NameserversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nameservers_examples_nameserver",
				Columns:    []*schema.Column{NameserversColumns[4]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PathsColumns holds the columns for the "paths" table.
	PathsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "example_paths", Type: field.TypeString, Nullable: true},
	}
	// PathsTable holds the schema information for the "paths" table.
	PathsTable = &schema.Table{
		Name:       "paths",
		Columns:    PathsColumns,
		PrimaryKey: []*schema.Column{PathsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "paths_examples_paths",
				Columns:    []*schema.Column{PathsColumns[2]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RegistrarsColumns holds the columns for the "registrars" table.
	RegistrarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "country_code", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "fax", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "example_registrar", Type: field.TypeString, Nullable: true},
	}
	// RegistrarsTable holds the schema information for the "registrars" table.
	RegistrarsTable = &schema.Table{
		Name:       "registrars",
		Columns:    RegistrarsColumns,
		PrimaryKey: []*schema.Column{RegistrarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registrars_examples_registrar",
				Columns:    []*schema.Column{RegistrarsColumns[10]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ScansColumns holds the columns for the "scans" table.
	ScansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "scanid", Type: field.TypeString, Unique: true},
		{Name: "input", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// ScansTable holds the schema information for the "scans" table.
	ScansTable = &schema.Table{
		Name:       "scans",
		Columns:    ScansColumns,
		PrimaryKey: []*schema.Column{ScansColumns[0]},
	}
	// ScanJobsColumns holds the columns for the "scan_jobs" table.
	ScanJobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "scanid", Type: field.TypeString},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed"}},
		{Name: "input", Type: field.TypeString},
		{Name: "output", Type: field.TypeString},
		{Name: "command", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// ScanJobsTable holds the schema information for the "scan_jobs" table.
	ScanJobsTable = &schema.Table{
		Name:       "scan_jobs",
		Columns:    ScanJobsColumns,
		PrimaryKey: []*schema.Column{ScanJobsColumns[0]},
	}
	// WhoisColumns holds the columns for the "whois" table.
	WhoisColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "query", Type: field.TypeString},
		{Name: "server", Type: field.TypeString},
		{Name: "raw", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
		{Name: "created", Type: field.TypeTime},
		{Name: "updated", Type: field.TypeTime},
		{Name: "time_first", Type: field.TypeTime},
		{Name: "time_last", Type: field.TypeTime},
		{Name: "example_whois", Type: field.TypeString, Nullable: true},
	}
	// WhoisTable holds the schema information for the "whois" table.
	WhoisTable = &schema.Table{
		Name:       "whois",
		Columns:    WhoisColumns,
		PrimaryKey: []*schema.Column{WhoisColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_examples_whois",
				Columns:    []*schema.Column{WhoisColumns[9]},
				RefColumns: []*schema.Column{ExamplesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DNSEntryDomainColumns holds the columns for the "dns_entry_domain" table.
	DNSEntryDomainColumns = []*schema.Column{
		{Name: "dns_entry_id", Type: field.TypeInt},
		{Name: "domain_id", Type: field.TypeInt},
	}
	// DNSEntryDomainTable holds the schema information for the "dns_entry_domain" table.
	DNSEntryDomainTable = &schema.Table{
		Name:       "dns_entry_domain",
		Columns:    DNSEntryDomainColumns,
		PrimaryKey: []*schema.Column{DNSEntryDomainColumns[0], DNSEntryDomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_entry_domain_dns_entry_id",
				Columns:    []*schema.Column{DNSEntryDomainColumns[0]},
				RefColumns: []*schema.Column{DNSEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dns_entry_domain_domain_id",
				Columns:    []*schema.Column{DNSEntryDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DNSEntryIpaddressColumns holds the columns for the "dns_entry_ipaddress" table.
	DNSEntryIpaddressColumns = []*schema.Column{
		{Name: "dns_entry_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// DNSEntryIpaddressTable holds the schema information for the "dns_entry_ipaddress" table.
	DNSEntryIpaddressTable = &schema.Table{
		Name:       "dns_entry_ipaddress",
		Columns:    DNSEntryIpaddressColumns,
		PrimaryKey: []*schema.Column{DNSEntryIpaddressColumns[0], DNSEntryIpaddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_entry_ipaddress_dns_entry_id",
				Columns:    []*schema.Column{DNSEntryIpaddressColumns[0]},
				RefColumns: []*schema.Column{DNSEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dns_entry_ipaddress_ip_address_id",
				Columns:    []*schema.Column{DNSEntryIpaddressColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DNSEntryNameserverColumns holds the columns for the "dns_entry_nameserver" table.
	DNSEntryNameserverColumns = []*schema.Column{
		{Name: "dns_entry_id", Type: field.TypeInt},
		{Name: "nameserver_id", Type: field.TypeInt},
	}
	// DNSEntryNameserverTable holds the schema information for the "dns_entry_nameserver" table.
	DNSEntryNameserverTable = &schema.Table{
		Name:       "dns_entry_nameserver",
		Columns:    DNSEntryNameserverColumns,
		PrimaryKey: []*schema.Column{DNSEntryNameserverColumns[0], DNSEntryNameserverColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_entry_nameserver_dns_entry_id",
				Columns:    []*schema.Column{DNSEntryNameserverColumns[0]},
				RefColumns: []*schema.Column{DNSEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "dns_entry_nameserver_nameserver_id",
				Columns:    []*schema.Column{DNSEntryNameserverColumns[1]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DomainNameserverColumns holds the columns for the "domain_nameserver" table.
	DomainNameserverColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeInt},
		{Name: "nameserver_id", Type: field.TypeInt},
	}
	// DomainNameserverTable holds the schema information for the "domain_nameserver" table.
	DomainNameserverTable = &schema.Table{
		Name:       "domain_nameserver",
		Columns:    DomainNameserverColumns,
		PrimaryKey: []*schema.Column{DomainNameserverColumns[0], DomainNameserverColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domain_nameserver_domain_id",
				Columns:    []*schema.Column{DomainNameserverColumns[0]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "domain_nameserver_nameserver_id",
				Columns:    []*schema.Column{DomainNameserverColumns[1]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DomainSubdomainColumns holds the columns for the "domain_subdomain" table.
	DomainSubdomainColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeInt},
		{Name: "subdomain_id", Type: field.TypeInt},
	}
	// DomainSubdomainTable holds the schema information for the "domain_subdomain" table.
	DomainSubdomainTable = &schema.Table{
		Name:       "domain_subdomain",
		Columns:    DomainSubdomainColumns,
		PrimaryKey: []*schema.Column{DomainSubdomainColumns[0], DomainSubdomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domain_subdomain_domain_id",
				Columns:    []*schema.Column{DomainSubdomainColumns[0]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "domain_subdomain_subdomain_id",
				Columns:    []*schema.Column{DomainSubdomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DomainIpaddressColumns holds the columns for the "domain_ipaddress" table.
	DomainIpaddressColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// DomainIpaddressTable holds the schema information for the "domain_ipaddress" table.
	DomainIpaddressTable = &schema.Table{
		Name:       "domain_ipaddress",
		Columns:    DomainIpaddressColumns,
		PrimaryKey: []*schema.Column{DomainIpaddressColumns[0], DomainIpaddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domain_ipaddress_domain_id",
				Columns:    []*schema.Column{DomainIpaddressColumns[0]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "domain_ipaddress_ip_address_id",
				Columns:    []*schema.Column{DomainIpaddressColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DomainPathColumns holds the columns for the "domain_path" table.
	DomainPathColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeInt},
		{Name: "path_id", Type: field.TypeInt},
	}
	// DomainPathTable holds the schema information for the "domain_path" table.
	DomainPathTable = &schema.Table{
		Name:       "domain_path",
		Columns:    DomainPathColumns,
		PrimaryKey: []*schema.Column{DomainPathColumns[0], DomainPathColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "domain_path_domain_id",
				Columns:    []*schema.Column{DomainPathColumns[0]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "domain_path_path_id",
				Columns:    []*schema.Column{DomainPathColumns[1]},
				RefColumns: []*schema.Column{PathsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IPAddressAsninfoColumns holds the columns for the "ip_address_asninfo" table.
	IPAddressAsninfoColumns = []*schema.Column{
		{Name: "ip_address_id", Type: field.TypeInt},
		{Name: "asn_info_id", Type: field.TypeInt},
	}
	// IPAddressAsninfoTable holds the schema information for the "ip_address_asninfo" table.
	IPAddressAsninfoTable = &schema.Table{
		Name:       "ip_address_asninfo",
		Columns:    IPAddressAsninfoColumns,
		PrimaryKey: []*schema.Column{IPAddressAsninfoColumns[0], IPAddressAsninfoColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ip_address_asninfo_ip_address_id",
				Columns:    []*schema.Column{IPAddressAsninfoColumns[0]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "ip_address_asninfo_asn_info_id",
				Columns:    []*schema.Column{IPAddressAsninfoColumns[1]},
				RefColumns: []*schema.Column{AsnInfosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NameserverIpaddressColumns holds the columns for the "nameserver_ipaddress" table.
	NameserverIpaddressColumns = []*schema.Column{
		{Name: "nameserver_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// NameserverIpaddressTable holds the schema information for the "nameserver_ipaddress" table.
	NameserverIpaddressTable = &schema.Table{
		Name:       "nameserver_ipaddress",
		Columns:    NameserverIpaddressColumns,
		PrimaryKey: []*schema.Column{NameserverIpaddressColumns[0], NameserverIpaddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nameserver_ipaddress_nameserver_id",
				Columns:    []*schema.Column{NameserverIpaddressColumns[0]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "nameserver_ipaddress_ip_address_id",
				Columns:    []*schema.Column{NameserverIpaddressColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RegistrarIpaddressColumns holds the columns for the "registrar_ipaddress" table.
	RegistrarIpaddressColumns = []*schema.Column{
		{Name: "registrar_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// RegistrarIpaddressTable holds the schema information for the "registrar_ipaddress" table.
	RegistrarIpaddressTable = &schema.Table{
		Name:       "registrar_ipaddress",
		Columns:    RegistrarIpaddressColumns,
		PrimaryKey: []*schema.Column{RegistrarIpaddressColumns[0], RegistrarIpaddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registrar_ipaddress_registrar_id",
				Columns:    []*schema.Column{RegistrarIpaddressColumns[0]},
				RefColumns: []*schema.Column{RegistrarsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "registrar_ipaddress_ip_address_id",
				Columns:    []*schema.Column{RegistrarIpaddressColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RegistrarDomainColumns holds the columns for the "registrar_domain" table.
	RegistrarDomainColumns = []*schema.Column{
		{Name: "registrar_id", Type: field.TypeInt},
		{Name: "domain_id", Type: field.TypeInt},
	}
	// RegistrarDomainTable holds the schema information for the "registrar_domain" table.
	RegistrarDomainTable = &schema.Table{
		Name:       "registrar_domain",
		Columns:    RegistrarDomainColumns,
		PrimaryKey: []*schema.Column{RegistrarDomainColumns[0], RegistrarDomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registrar_domain_registrar_id",
				Columns:    []*schema.Column{RegistrarDomainColumns[0]},
				RefColumns: []*schema.Column{RegistrarsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "registrar_domain_domain_id",
				Columns:    []*schema.Column{RegistrarDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RegistrarAsninfoColumns holds the columns for the "registrar_asninfo" table.
	RegistrarAsninfoColumns = []*schema.Column{
		{Name: "registrar_id", Type: field.TypeInt},
		{Name: "asn_info_id", Type: field.TypeInt},
	}
	// RegistrarAsninfoTable holds the schema information for the "registrar_asninfo" table.
	RegistrarAsninfoTable = &schema.Table{
		Name:       "registrar_asninfo",
		Columns:    RegistrarAsninfoColumns,
		PrimaryKey: []*schema.Column{RegistrarAsninfoColumns[0], RegistrarAsninfoColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registrar_asninfo_registrar_id",
				Columns:    []*schema.Column{RegistrarAsninfoColumns[0]},
				RefColumns: []*schema.Column{RegistrarsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "registrar_asninfo_asn_info_id",
				Columns:    []*schema.Column{RegistrarAsninfoColumns[1]},
				RefColumns: []*schema.Column{AsnInfosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanScanjobColumns holds the columns for the "scan_scanjob" table.
	ScanScanjobColumns = []*schema.Column{
		{Name: "scan_id", Type: field.TypeInt},
		{Name: "scan_job_id", Type: field.TypeInt},
	}
	// ScanScanjobTable holds the schema information for the "scan_scanjob" table.
	ScanScanjobTable = &schema.Table{
		Name:       "scan_scanjob",
		Columns:    ScanScanjobColumns,
		PrimaryKey: []*schema.Column{ScanScanjobColumns[0], ScanScanjobColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_scanjob_scan_id",
				Columns:    []*schema.Column{ScanScanjobColumns[0]},
				RefColumns: []*schema.Column{ScansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_scanjob_scan_job_id",
				Columns:    []*schema.Column{ScanScanjobColumns[1]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobIpaddressColumns holds the columns for the "scan_job_ipaddress" table.
	ScanJobIpaddressColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// ScanJobIpaddressTable holds the schema information for the "scan_job_ipaddress" table.
	ScanJobIpaddressTable = &schema.Table{
		Name:       "scan_job_ipaddress",
		Columns:    ScanJobIpaddressColumns,
		PrimaryKey: []*schema.Column{ScanJobIpaddressColumns[0], ScanJobIpaddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_ipaddress_scan_job_id",
				Columns:    []*schema.Column{ScanJobIpaddressColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_ipaddress_ip_address_id",
				Columns:    []*schema.Column{ScanJobIpaddressColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobAsninfoColumns holds the columns for the "scan_job_asninfo" table.
	ScanJobAsninfoColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "asn_info_id", Type: field.TypeInt},
	}
	// ScanJobAsninfoTable holds the schema information for the "scan_job_asninfo" table.
	ScanJobAsninfoTable = &schema.Table{
		Name:       "scan_job_asninfo",
		Columns:    ScanJobAsninfoColumns,
		PrimaryKey: []*schema.Column{ScanJobAsninfoColumns[0], ScanJobAsninfoColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_asninfo_scan_job_id",
				Columns:    []*schema.Column{ScanJobAsninfoColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_asninfo_asn_info_id",
				Columns:    []*schema.Column{ScanJobAsninfoColumns[1]},
				RefColumns: []*schema.Column{AsnInfosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobDnsentryColumns holds the columns for the "scan_job_dnsentry" table.
	ScanJobDnsentryColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "dns_entry_id", Type: field.TypeInt},
	}
	// ScanJobDnsentryTable holds the schema information for the "scan_job_dnsentry" table.
	ScanJobDnsentryTable = &schema.Table{
		Name:       "scan_job_dnsentry",
		Columns:    ScanJobDnsentryColumns,
		PrimaryKey: []*schema.Column{ScanJobDnsentryColumns[0], ScanJobDnsentryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_dnsentry_scan_job_id",
				Columns:    []*schema.Column{ScanJobDnsentryColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_dnsentry_dns_entry_id",
				Columns:    []*schema.Column{ScanJobDnsentryColumns[1]},
				RefColumns: []*schema.Column{DNSEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobDomainColumns holds the columns for the "scan_job_domain" table.
	ScanJobDomainColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "domain_id", Type: field.TypeInt},
	}
	// ScanJobDomainTable holds the schema information for the "scan_job_domain" table.
	ScanJobDomainTable = &schema.Table{
		Name:       "scan_job_domain",
		Columns:    ScanJobDomainColumns,
		PrimaryKey: []*schema.Column{ScanJobDomainColumns[0], ScanJobDomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_domain_scan_job_id",
				Columns:    []*schema.Column{ScanJobDomainColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_domain_domain_id",
				Columns:    []*schema.Column{ScanJobDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobPathColumns holds the columns for the "scan_job_path" table.
	ScanJobPathColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "path_id", Type: field.TypeInt},
	}
	// ScanJobPathTable holds the schema information for the "scan_job_path" table.
	ScanJobPathTable = &schema.Table{
		Name:       "scan_job_path",
		Columns:    ScanJobPathColumns,
		PrimaryKey: []*schema.Column{ScanJobPathColumns[0], ScanJobPathColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_path_scan_job_id",
				Columns:    []*schema.Column{ScanJobPathColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_path_path_id",
				Columns:    []*schema.Column{ScanJobPathColumns[1]},
				RefColumns: []*schema.Column{PathsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobNameserverColumns holds the columns for the "scan_job_nameserver" table.
	ScanJobNameserverColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "nameserver_id", Type: field.TypeInt},
	}
	// ScanJobNameserverTable holds the schema information for the "scan_job_nameserver" table.
	ScanJobNameserverTable = &schema.Table{
		Name:       "scan_job_nameserver",
		Columns:    ScanJobNameserverColumns,
		PrimaryKey: []*schema.Column{ScanJobNameserverColumns[0], ScanJobNameserverColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_nameserver_scan_job_id",
				Columns:    []*schema.Column{ScanJobNameserverColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_nameserver_nameserver_id",
				Columns:    []*schema.Column{ScanJobNameserverColumns[1]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobRegistrarColumns holds the columns for the "scan_job_registrar" table.
	ScanJobRegistrarColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "registrar_id", Type: field.TypeInt},
	}
	// ScanJobRegistrarTable holds the schema information for the "scan_job_registrar" table.
	ScanJobRegistrarTable = &schema.Table{
		Name:       "scan_job_registrar",
		Columns:    ScanJobRegistrarColumns,
		PrimaryKey: []*schema.Column{ScanJobRegistrarColumns[0], ScanJobRegistrarColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_registrar_scan_job_id",
				Columns:    []*schema.Column{ScanJobRegistrarColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_registrar_registrar_id",
				Columns:    []*schema.Column{ScanJobRegistrarColumns[1]},
				RefColumns: []*schema.Column{RegistrarsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScanJobWhoisColumns holds the columns for the "scan_job_whois" table.
	ScanJobWhoisColumns = []*schema.Column{
		{Name: "scan_job_id", Type: field.TypeInt},
		{Name: "whois_id", Type: field.TypeInt},
	}
	// ScanJobWhoisTable holds the schema information for the "scan_job_whois" table.
	ScanJobWhoisTable = &schema.Table{
		Name:       "scan_job_whois",
		Columns:    ScanJobWhoisColumns,
		PrimaryKey: []*schema.Column{ScanJobWhoisColumns[0], ScanJobWhoisColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scan_job_whois_scan_job_id",
				Columns:    []*schema.Column{ScanJobWhoisColumns[0]},
				RefColumns: []*schema.Column{ScanJobsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scan_job_whois_whois_id",
				Columns:    []*schema.Column{ScanJobWhoisColumns[1]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WhoisIprangeColumns holds the columns for the "whois_iprange" table.
	WhoisIprangeColumns = []*schema.Column{
		{Name: "whois_id", Type: field.TypeInt},
		{Name: "ip_address_id", Type: field.TypeInt},
	}
	// WhoisIprangeTable holds the schema information for the "whois_iprange" table.
	WhoisIprangeTable = &schema.Table{
		Name:       "whois_iprange",
		Columns:    WhoisIprangeColumns,
		PrimaryKey: []*schema.Column{WhoisIprangeColumns[0], WhoisIprangeColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_iprange_whois_id",
				Columns:    []*schema.Column{WhoisIprangeColumns[0]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "whois_iprange_ip_address_id",
				Columns:    []*schema.Column{WhoisIprangeColumns[1]},
				RefColumns: []*schema.Column{IPAddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WhoisDomainColumns holds the columns for the "whois_domain" table.
	WhoisDomainColumns = []*schema.Column{
		{Name: "whois_id", Type: field.TypeInt},
		{Name: "domain_id", Type: field.TypeInt},
	}
	// WhoisDomainTable holds the schema information for the "whois_domain" table.
	WhoisDomainTable = &schema.Table{
		Name:       "whois_domain",
		Columns:    WhoisDomainColumns,
		PrimaryKey: []*schema.Column{WhoisDomainColumns[0], WhoisDomainColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_domain_whois_id",
				Columns:    []*schema.Column{WhoisDomainColumns[0]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "whois_domain_domain_id",
				Columns:    []*schema.Column{WhoisDomainColumns[1]},
				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WhoisAsnColumns holds the columns for the "whois_asn" table.
	WhoisAsnColumns = []*schema.Column{
		{Name: "whois_id", Type: field.TypeInt},
		{Name: "asn_info_id", Type: field.TypeInt},
	}
	// WhoisAsnTable holds the schema information for the "whois_asn" table.
	WhoisAsnTable = &schema.Table{
		Name:       "whois_asn",
		Columns:    WhoisAsnColumns,
		PrimaryKey: []*schema.Column{WhoisAsnColumns[0], WhoisAsnColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_asn_whois_id",
				Columns:    []*schema.Column{WhoisAsnColumns[0]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "whois_asn_asn_info_id",
				Columns:    []*schema.Column{WhoisAsnColumns[1]},
				RefColumns: []*schema.Column{AsnInfosColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WhoisRegistrarColumns holds the columns for the "whois_registrar" table.
	WhoisRegistrarColumns = []*schema.Column{
		{Name: "whois_id", Type: field.TypeInt},
		{Name: "registrar_id", Type: field.TypeInt},
	}
	// WhoisRegistrarTable holds the schema information for the "whois_registrar" table.
	WhoisRegistrarTable = &schema.Table{
		Name:       "whois_registrar",
		Columns:    WhoisRegistrarColumns,
		PrimaryKey: []*schema.Column{WhoisRegistrarColumns[0], WhoisRegistrarColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_registrar_whois_id",
				Columns:    []*schema.Column{WhoisRegistrarColumns[0]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "whois_registrar_registrar_id",
				Columns:    []*schema.Column{WhoisRegistrarColumns[1]},
				RefColumns: []*schema.Column{RegistrarsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WhoisNameserverColumns holds the columns for the "whois_nameserver" table.
	WhoisNameserverColumns = []*schema.Column{
		{Name: "whois_id", Type: field.TypeInt},
		{Name: "nameserver_id", Type: field.TypeInt},
	}
	// WhoisNameserverTable holds the schema information for the "whois_nameserver" table.
	WhoisNameserverTable = &schema.Table{
		Name:       "whois_nameserver",
		Columns:    WhoisNameserverColumns,
		PrimaryKey: []*schema.Column{WhoisNameserverColumns[0], WhoisNameserverColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "whois_nameserver_whois_id",
				Columns:    []*schema.Column{WhoisNameserverColumns[0]},
				RefColumns: []*schema.Column{WhoisColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "whois_nameserver_nameserver_id",
				Columns:    []*schema.Column{WhoisNameserverColumns[1]},
				RefColumns: []*schema.Column{NameserversColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AsnInfosTable,
		DNSEntriesTable,
		DomainsTable,
		ExamplesTable,
		IPAddressesTable,
		NameserversTable,
		PathsTable,
		RegistrarsTable,
		ScansTable,
		ScanJobsTable,
		WhoisTable,
		DNSEntryDomainTable,
		DNSEntryIpaddressTable,
		DNSEntryNameserverTable,
		DomainNameserverTable,
		DomainSubdomainTable,
		DomainIpaddressTable,
		DomainPathTable,
		IPAddressAsninfoTable,
		NameserverIpaddressTable,
		RegistrarIpaddressTable,
		RegistrarDomainTable,
		RegistrarAsninfoTable,
		ScanScanjobTable,
		ScanJobIpaddressTable,
		ScanJobAsninfoTable,
		ScanJobDnsentryTable,
		ScanJobDomainTable,
		ScanJobPathTable,
		ScanJobNameserverTable,
		ScanJobRegistrarTable,
		ScanJobWhoisTable,
		WhoisIprangeTable,
		WhoisDomainTable,
		WhoisAsnTable,
		WhoisRegistrarTable,
		WhoisNameserverTable,
	}
)

func init() {
	AsnInfosTable.ForeignKeys[0].RefTable = ExamplesTable
	DNSEntriesTable.ForeignKeys[0].RefTable = ExamplesTable
	DomainsTable.ForeignKeys[0].RefTable = ExamplesTable
	ExamplesTable.ForeignKeys[0].RefTable = IPAddressesTable
	NameserversTable.ForeignKeys[0].RefTable = ExamplesTable
	PathsTable.ForeignKeys[0].RefTable = ExamplesTable
	RegistrarsTable.ForeignKeys[0].RefTable = ExamplesTable
	WhoisTable.ForeignKeys[0].RefTable = ExamplesTable
	DNSEntryDomainTable.ForeignKeys[0].RefTable = DNSEntriesTable
	DNSEntryDomainTable.ForeignKeys[1].RefTable = DomainsTable
	DNSEntryIpaddressTable.ForeignKeys[0].RefTable = DNSEntriesTable
	DNSEntryIpaddressTable.ForeignKeys[1].RefTable = IPAddressesTable
	DNSEntryNameserverTable.ForeignKeys[0].RefTable = DNSEntriesTable
	DNSEntryNameserverTable.ForeignKeys[1].RefTable = NameserversTable
	DomainNameserverTable.ForeignKeys[0].RefTable = DomainsTable
	DomainNameserverTable.ForeignKeys[1].RefTable = NameserversTable
	DomainSubdomainTable.ForeignKeys[0].RefTable = DomainsTable
	DomainSubdomainTable.ForeignKeys[1].RefTable = DomainsTable
	DomainIpaddressTable.ForeignKeys[0].RefTable = DomainsTable
	DomainIpaddressTable.ForeignKeys[1].RefTable = IPAddressesTable
	DomainPathTable.ForeignKeys[0].RefTable = DomainsTable
	DomainPathTable.ForeignKeys[1].RefTable = PathsTable
	IPAddressAsninfoTable.ForeignKeys[0].RefTable = IPAddressesTable
	IPAddressAsninfoTable.ForeignKeys[1].RefTable = AsnInfosTable
	NameserverIpaddressTable.ForeignKeys[0].RefTable = NameserversTable
	NameserverIpaddressTable.ForeignKeys[1].RefTable = IPAddressesTable
	RegistrarIpaddressTable.ForeignKeys[0].RefTable = RegistrarsTable
	RegistrarIpaddressTable.ForeignKeys[1].RefTable = IPAddressesTable
	RegistrarDomainTable.ForeignKeys[0].RefTable = RegistrarsTable
	RegistrarDomainTable.ForeignKeys[1].RefTable = DomainsTable
	RegistrarAsninfoTable.ForeignKeys[0].RefTable = RegistrarsTable
	RegistrarAsninfoTable.ForeignKeys[1].RefTable = AsnInfosTable
	ScanScanjobTable.ForeignKeys[0].RefTable = ScansTable
	ScanScanjobTable.ForeignKeys[1].RefTable = ScanJobsTable
	ScanJobIpaddressTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobIpaddressTable.ForeignKeys[1].RefTable = IPAddressesTable
	ScanJobAsninfoTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobAsninfoTable.ForeignKeys[1].RefTable = AsnInfosTable
	ScanJobDnsentryTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobDnsentryTable.ForeignKeys[1].RefTable = DNSEntriesTable
	ScanJobDomainTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobDomainTable.ForeignKeys[1].RefTable = DomainsTable
	ScanJobPathTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobPathTable.ForeignKeys[1].RefTable = PathsTable
	ScanJobNameserverTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobNameserverTable.ForeignKeys[1].RefTable = NameserversTable
	ScanJobRegistrarTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobRegistrarTable.ForeignKeys[1].RefTable = RegistrarsTable
	ScanJobWhoisTable.ForeignKeys[0].RefTable = ScanJobsTable
	ScanJobWhoisTable.ForeignKeys[1].RefTable = WhoisTable
	WhoisIprangeTable.ForeignKeys[0].RefTable = WhoisTable
	WhoisIprangeTable.ForeignKeys[1].RefTable = IPAddressesTable
	WhoisDomainTable.ForeignKeys[0].RefTable = WhoisTable
	WhoisDomainTable.ForeignKeys[1].RefTable = DomainsTable
	WhoisAsnTable.ForeignKeys[0].RefTable = WhoisTable
	WhoisAsnTable.ForeignKeys[1].RefTable = AsnInfosTable
	WhoisRegistrarTable.ForeignKeys[0].RefTable = WhoisTable
	WhoisRegistrarTable.ForeignKeys[1].RefTable = RegistrarsTable
	WhoisNameserverTable.ForeignKeys[0].RefTable = WhoisTable
	WhoisNameserverTable.ForeignKeys[1].RefTable = NameserversTable
}
