// Code generated by ent, DO NOT EDIT.

package ipaddress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ipaddress type in the database.
	Label = "ip_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldMask holds the string denoting the mask field in the database.
	FieldMask = "mask"
	// EdgeAsninfo holds the string denoting the asninfo edge name in mutations.
	EdgeAsninfo = "asninfo"
	// Table holds the table name of the ipaddress in the database.
	Table = "ip_addresses"
	// AsninfoTable is the table that holds the asninfo relation/edge.
	AsninfoTable = "asn_infos"
	// AsninfoInverseTable is the table name for the ASNInfo entity.
	// It exists in this package in order to avoid circular dependency with the "asninfo" package.
	AsninfoInverseTable = "asn_infos"
	// AsninfoColumn is the table column denoting the asninfo relation/edge.
	AsninfoColumn = "ip_address_asninfo"
)

// Columns holds all SQL columns for ipaddress fields.
var Columns = []string{
	FieldID,
	FieldIP,
	FieldMask,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ip_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"domain_ipaddress",
	"nameserver_ipaddress",
	"scan_ipaddress",
	"whois_iprange",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IPAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByMask orders the results by the mask field.
func ByMask(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMask, opts...).ToFunc()
}

// ByAsninfoCount orders the results by asninfo count.
func ByAsninfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAsninfoStep(), opts...)
	}
}

// ByAsninfo orders the results by asninfo terms.
func ByAsninfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAsninfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAsninfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AsninfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AsninfoTable, AsninfoColumn),
	)
}
