// Code generated by ent, DO NOT EDIT.

package model_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/asninfo"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/domain"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/ipaddress"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/nameserver"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/registrar"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/scanjob"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/whois"
)

// WhoisUpdate is the builder for updating Whois entities.
type WhoisUpdate struct {
	config
	hooks    []Hook
	mutation *WhoisMutation
}

// Where appends a list predicates to the WhoisUpdate builder.
func (wu *WhoisUpdate) Where(ps ...predicate.Whois) *WhoisUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetQuery sets the "query" field.
func (wu *WhoisUpdate) SetQuery(s string) *WhoisUpdate {
	wu.mutation.SetQuery(s)
	return wu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableQuery(s *string) *WhoisUpdate {
	if s != nil {
		wu.SetQuery(*s)
	}
	return wu
}

// SetServer sets the "server" field.
func (wu *WhoisUpdate) SetServer(s string) *WhoisUpdate {
	wu.mutation.SetServer(s)
	return wu
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableServer(s *string) *WhoisUpdate {
	if s != nil {
		wu.SetServer(*s)
	}
	return wu
}

// SetRaw sets the "raw" field.
func (wu *WhoisUpdate) SetRaw(s string) *WhoisUpdate {
	wu.mutation.SetRaw(s)
	return wu
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableRaw(s *string) *WhoisUpdate {
	if s != nil {
		wu.SetRaw(*s)
	}
	return wu
}

// SetCountry sets the "country" field.
func (wu *WhoisUpdate) SetCountry(s string) *WhoisUpdate {
	wu.mutation.SetCountry(s)
	return wu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableCountry(s *string) *WhoisUpdate {
	if s != nil {
		wu.SetCountry(*s)
	}
	return wu
}

// SetCreated sets the "created" field.
func (wu *WhoisUpdate) SetCreated(t time.Time) *WhoisUpdate {
	wu.mutation.SetCreated(t)
	return wu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableCreated(t *time.Time) *WhoisUpdate {
	if t != nil {
		wu.SetCreated(*t)
	}
	return wu
}

// SetUpdated sets the "updated" field.
func (wu *WhoisUpdate) SetUpdated(t time.Time) *WhoisUpdate {
	wu.mutation.SetUpdated(t)
	return wu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableUpdated(t *time.Time) *WhoisUpdate {
	if t != nil {
		wu.SetUpdated(*t)
	}
	return wu
}

// SetTimeFirst sets the "time_first" field.
func (wu *WhoisUpdate) SetTimeFirst(t time.Time) *WhoisUpdate {
	wu.mutation.SetTimeFirst(t)
	return wu
}

// SetNillableTimeFirst sets the "time_first" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableTimeFirst(t *time.Time) *WhoisUpdate {
	if t != nil {
		wu.SetTimeFirst(*t)
	}
	return wu
}

// SetTimeLast sets the "time_last" field.
func (wu *WhoisUpdate) SetTimeLast(t time.Time) *WhoisUpdate {
	wu.mutation.SetTimeLast(t)
	return wu
}

// SetNillableTimeLast sets the "time_last" field if the given value is not nil.
func (wu *WhoisUpdate) SetNillableTimeLast(t *time.Time) *WhoisUpdate {
	if t != nil {
		wu.SetTimeLast(*t)
	}
	return wu
}

// AddIprangeIDs adds the "iprange" edge to the IPAddress entity by IDs.
func (wu *WhoisUpdate) AddIprangeIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddIprangeIDs(ids...)
	return wu
}

// AddIprange adds the "iprange" edges to the IPAddress entity.
func (wu *WhoisUpdate) AddIprange(i ...*IPAddress) *WhoisUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.AddIprangeIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (wu *WhoisUpdate) AddDomainIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddDomainIDs(ids...)
	return wu
}

// AddDomain adds the "domain" edges to the Domain entity.
func (wu *WhoisUpdate) AddDomain(d ...*Domain) *WhoisUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wu.AddDomainIDs(ids...)
}

// AddAsnIDs adds the "asn" edge to the ASNInfo entity by IDs.
func (wu *WhoisUpdate) AddAsnIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddAsnIDs(ids...)
	return wu
}

// AddAsn adds the "asn" edges to the ASNInfo entity.
func (wu *WhoisUpdate) AddAsn(a ...*ASNInfo) *WhoisUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.AddAsnIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (wu *WhoisUpdate) AddRegistrarIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddRegistrarIDs(ids...)
	return wu
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (wu *WhoisUpdate) AddRegistrar(r ...*Registrar) *WhoisUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.AddRegistrarIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (wu *WhoisUpdate) AddNameserverIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddNameserverIDs(ids...)
	return wu
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (wu *WhoisUpdate) AddNameserver(n ...*Nameserver) *WhoisUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return wu.AddNameserverIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (wu *WhoisUpdate) AddScanIDs(ids ...int) *WhoisUpdate {
	wu.mutation.AddScanIDs(ids...)
	return wu
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (wu *WhoisUpdate) AddScan(s ...*ScanJob) *WhoisUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wu.AddScanIDs(ids...)
}

// Mutation returns the WhoisMutation object of the builder.
func (wu *WhoisUpdate) Mutation() *WhoisMutation {
	return wu.mutation
}

// ClearIprange clears all "iprange" edges to the IPAddress entity.
func (wu *WhoisUpdate) ClearIprange() *WhoisUpdate {
	wu.mutation.ClearIprange()
	return wu
}

// RemoveIprangeIDs removes the "iprange" edge to IPAddress entities by IDs.
func (wu *WhoisUpdate) RemoveIprangeIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveIprangeIDs(ids...)
	return wu
}

// RemoveIprange removes "iprange" edges to IPAddress entities.
func (wu *WhoisUpdate) RemoveIprange(i ...*IPAddress) *WhoisUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.RemoveIprangeIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (wu *WhoisUpdate) ClearDomain() *WhoisUpdate {
	wu.mutation.ClearDomain()
	return wu
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (wu *WhoisUpdate) RemoveDomainIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveDomainIDs(ids...)
	return wu
}

// RemoveDomain removes "domain" edges to Domain entities.
func (wu *WhoisUpdate) RemoveDomain(d ...*Domain) *WhoisUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wu.RemoveDomainIDs(ids...)
}

// ClearAsn clears all "asn" edges to the ASNInfo entity.
func (wu *WhoisUpdate) ClearAsn() *WhoisUpdate {
	wu.mutation.ClearAsn()
	return wu
}

// RemoveAsnIDs removes the "asn" edge to ASNInfo entities by IDs.
func (wu *WhoisUpdate) RemoveAsnIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveAsnIDs(ids...)
	return wu
}

// RemoveAsn removes "asn" edges to ASNInfo entities.
func (wu *WhoisUpdate) RemoveAsn(a ...*ASNInfo) *WhoisUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.RemoveAsnIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (wu *WhoisUpdate) ClearRegistrar() *WhoisUpdate {
	wu.mutation.ClearRegistrar()
	return wu
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (wu *WhoisUpdate) RemoveRegistrarIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveRegistrarIDs(ids...)
	return wu
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (wu *WhoisUpdate) RemoveRegistrar(r ...*Registrar) *WhoisUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.RemoveRegistrarIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (wu *WhoisUpdate) ClearNameserver() *WhoisUpdate {
	wu.mutation.ClearNameserver()
	return wu
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (wu *WhoisUpdate) RemoveNameserverIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveNameserverIDs(ids...)
	return wu
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (wu *WhoisUpdate) RemoveNameserver(n ...*Nameserver) *WhoisUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return wu.RemoveNameserverIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (wu *WhoisUpdate) ClearScan() *WhoisUpdate {
	wu.mutation.ClearScan()
	return wu
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (wu *WhoisUpdate) RemoveScanIDs(ids ...int) *WhoisUpdate {
	wu.mutation.RemoveScanIDs(ids...)
	return wu
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (wu *WhoisUpdate) RemoveScan(s ...*ScanJob) *WhoisUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WhoisUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WhoisUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WhoisUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WhoisUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WhoisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(whois.Table, whois.Columns, sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Query(); ok {
		_spec.SetField(whois.FieldQuery, field.TypeString, value)
	}
	if value, ok := wu.mutation.Server(); ok {
		_spec.SetField(whois.FieldServer, field.TypeString, value)
	}
	if value, ok := wu.mutation.Raw(); ok {
		_spec.SetField(whois.FieldRaw, field.TypeString, value)
	}
	if value, ok := wu.mutation.Country(); ok {
		_spec.SetField(whois.FieldCountry, field.TypeString, value)
	}
	if value, ok := wu.mutation.Created(); ok {
		_spec.SetField(whois.FieldCreated, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Updated(); ok {
		_spec.SetField(whois.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := wu.mutation.TimeFirst(); ok {
		_spec.SetField(whois.FieldTimeFirst, field.TypeTime, value)
	}
	if value, ok := wu.mutation.TimeLast(); ok {
		_spec.SetField(whois.FieldTimeLast, field.TypeTime, value)
	}
	if wu.mutation.IprangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedIprangeIDs(); len(nodes) > 0 && !wu.mutation.IprangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.IprangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedDomainIDs(); len(nodes) > 0 && !wu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.AsnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedAsnIDs(); len(nodes) > 0 && !wu.mutation.AsnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AsnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !wu.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !wu.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedScanIDs(); len(nodes) > 0 && !wu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{whois.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WhoisUpdateOne is the builder for updating a single Whois entity.
type WhoisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WhoisMutation
}

// SetQuery sets the "query" field.
func (wuo *WhoisUpdateOne) SetQuery(s string) *WhoisUpdateOne {
	wuo.mutation.SetQuery(s)
	return wuo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableQuery(s *string) *WhoisUpdateOne {
	if s != nil {
		wuo.SetQuery(*s)
	}
	return wuo
}

// SetServer sets the "server" field.
func (wuo *WhoisUpdateOne) SetServer(s string) *WhoisUpdateOne {
	wuo.mutation.SetServer(s)
	return wuo
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableServer(s *string) *WhoisUpdateOne {
	if s != nil {
		wuo.SetServer(*s)
	}
	return wuo
}

// SetRaw sets the "raw" field.
func (wuo *WhoisUpdateOne) SetRaw(s string) *WhoisUpdateOne {
	wuo.mutation.SetRaw(s)
	return wuo
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableRaw(s *string) *WhoisUpdateOne {
	if s != nil {
		wuo.SetRaw(*s)
	}
	return wuo
}

// SetCountry sets the "country" field.
func (wuo *WhoisUpdateOne) SetCountry(s string) *WhoisUpdateOne {
	wuo.mutation.SetCountry(s)
	return wuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableCountry(s *string) *WhoisUpdateOne {
	if s != nil {
		wuo.SetCountry(*s)
	}
	return wuo
}

// SetCreated sets the "created" field.
func (wuo *WhoisUpdateOne) SetCreated(t time.Time) *WhoisUpdateOne {
	wuo.mutation.SetCreated(t)
	return wuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableCreated(t *time.Time) *WhoisUpdateOne {
	if t != nil {
		wuo.SetCreated(*t)
	}
	return wuo
}

// SetUpdated sets the "updated" field.
func (wuo *WhoisUpdateOne) SetUpdated(t time.Time) *WhoisUpdateOne {
	wuo.mutation.SetUpdated(t)
	return wuo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableUpdated(t *time.Time) *WhoisUpdateOne {
	if t != nil {
		wuo.SetUpdated(*t)
	}
	return wuo
}

// SetTimeFirst sets the "time_first" field.
func (wuo *WhoisUpdateOne) SetTimeFirst(t time.Time) *WhoisUpdateOne {
	wuo.mutation.SetTimeFirst(t)
	return wuo
}

// SetNillableTimeFirst sets the "time_first" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableTimeFirst(t *time.Time) *WhoisUpdateOne {
	if t != nil {
		wuo.SetTimeFirst(*t)
	}
	return wuo
}

// SetTimeLast sets the "time_last" field.
func (wuo *WhoisUpdateOne) SetTimeLast(t time.Time) *WhoisUpdateOne {
	wuo.mutation.SetTimeLast(t)
	return wuo
}

// SetNillableTimeLast sets the "time_last" field if the given value is not nil.
func (wuo *WhoisUpdateOne) SetNillableTimeLast(t *time.Time) *WhoisUpdateOne {
	if t != nil {
		wuo.SetTimeLast(*t)
	}
	return wuo
}

// AddIprangeIDs adds the "iprange" edge to the IPAddress entity by IDs.
func (wuo *WhoisUpdateOne) AddIprangeIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddIprangeIDs(ids...)
	return wuo
}

// AddIprange adds the "iprange" edges to the IPAddress entity.
func (wuo *WhoisUpdateOne) AddIprange(i ...*IPAddress) *WhoisUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.AddIprangeIDs(ids...)
}

// AddDomainIDs adds the "domain" edge to the Domain entity by IDs.
func (wuo *WhoisUpdateOne) AddDomainIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddDomainIDs(ids...)
	return wuo
}

// AddDomain adds the "domain" edges to the Domain entity.
func (wuo *WhoisUpdateOne) AddDomain(d ...*Domain) *WhoisUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wuo.AddDomainIDs(ids...)
}

// AddAsnIDs adds the "asn" edge to the ASNInfo entity by IDs.
func (wuo *WhoisUpdateOne) AddAsnIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddAsnIDs(ids...)
	return wuo
}

// AddAsn adds the "asn" edges to the ASNInfo entity.
func (wuo *WhoisUpdateOne) AddAsn(a ...*ASNInfo) *WhoisUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.AddAsnIDs(ids...)
}

// AddRegistrarIDs adds the "registrar" edge to the Registrar entity by IDs.
func (wuo *WhoisUpdateOne) AddRegistrarIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddRegistrarIDs(ids...)
	return wuo
}

// AddRegistrar adds the "registrar" edges to the Registrar entity.
func (wuo *WhoisUpdateOne) AddRegistrar(r ...*Registrar) *WhoisUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.AddRegistrarIDs(ids...)
}

// AddNameserverIDs adds the "nameserver" edge to the Nameserver entity by IDs.
func (wuo *WhoisUpdateOne) AddNameserverIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddNameserverIDs(ids...)
	return wuo
}

// AddNameserver adds the "nameserver" edges to the Nameserver entity.
func (wuo *WhoisUpdateOne) AddNameserver(n ...*Nameserver) *WhoisUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return wuo.AddNameserverIDs(ids...)
}

// AddScanIDs adds the "scan" edge to the ScanJob entity by IDs.
func (wuo *WhoisUpdateOne) AddScanIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.AddScanIDs(ids...)
	return wuo
}

// AddScan adds the "scan" edges to the ScanJob entity.
func (wuo *WhoisUpdateOne) AddScan(s ...*ScanJob) *WhoisUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wuo.AddScanIDs(ids...)
}

// Mutation returns the WhoisMutation object of the builder.
func (wuo *WhoisUpdateOne) Mutation() *WhoisMutation {
	return wuo.mutation
}

// ClearIprange clears all "iprange" edges to the IPAddress entity.
func (wuo *WhoisUpdateOne) ClearIprange() *WhoisUpdateOne {
	wuo.mutation.ClearIprange()
	return wuo
}

// RemoveIprangeIDs removes the "iprange" edge to IPAddress entities by IDs.
func (wuo *WhoisUpdateOne) RemoveIprangeIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveIprangeIDs(ids...)
	return wuo
}

// RemoveIprange removes "iprange" edges to IPAddress entities.
func (wuo *WhoisUpdateOne) RemoveIprange(i ...*IPAddress) *WhoisUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.RemoveIprangeIDs(ids...)
}

// ClearDomain clears all "domain" edges to the Domain entity.
func (wuo *WhoisUpdateOne) ClearDomain() *WhoisUpdateOne {
	wuo.mutation.ClearDomain()
	return wuo
}

// RemoveDomainIDs removes the "domain" edge to Domain entities by IDs.
func (wuo *WhoisUpdateOne) RemoveDomainIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveDomainIDs(ids...)
	return wuo
}

// RemoveDomain removes "domain" edges to Domain entities.
func (wuo *WhoisUpdateOne) RemoveDomain(d ...*Domain) *WhoisUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wuo.RemoveDomainIDs(ids...)
}

// ClearAsn clears all "asn" edges to the ASNInfo entity.
func (wuo *WhoisUpdateOne) ClearAsn() *WhoisUpdateOne {
	wuo.mutation.ClearAsn()
	return wuo
}

// RemoveAsnIDs removes the "asn" edge to ASNInfo entities by IDs.
func (wuo *WhoisUpdateOne) RemoveAsnIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveAsnIDs(ids...)
	return wuo
}

// RemoveAsn removes "asn" edges to ASNInfo entities.
func (wuo *WhoisUpdateOne) RemoveAsn(a ...*ASNInfo) *WhoisUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.RemoveAsnIDs(ids...)
}

// ClearRegistrar clears all "registrar" edges to the Registrar entity.
func (wuo *WhoisUpdateOne) ClearRegistrar() *WhoisUpdateOne {
	wuo.mutation.ClearRegistrar()
	return wuo
}

// RemoveRegistrarIDs removes the "registrar" edge to Registrar entities by IDs.
func (wuo *WhoisUpdateOne) RemoveRegistrarIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveRegistrarIDs(ids...)
	return wuo
}

// RemoveRegistrar removes "registrar" edges to Registrar entities.
func (wuo *WhoisUpdateOne) RemoveRegistrar(r ...*Registrar) *WhoisUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.RemoveRegistrarIDs(ids...)
}

// ClearNameserver clears all "nameserver" edges to the Nameserver entity.
func (wuo *WhoisUpdateOne) ClearNameserver() *WhoisUpdateOne {
	wuo.mutation.ClearNameserver()
	return wuo
}

// RemoveNameserverIDs removes the "nameserver" edge to Nameserver entities by IDs.
func (wuo *WhoisUpdateOne) RemoveNameserverIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveNameserverIDs(ids...)
	return wuo
}

// RemoveNameserver removes "nameserver" edges to Nameserver entities.
func (wuo *WhoisUpdateOne) RemoveNameserver(n ...*Nameserver) *WhoisUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return wuo.RemoveNameserverIDs(ids...)
}

// ClearScan clears all "scan" edges to the ScanJob entity.
func (wuo *WhoisUpdateOne) ClearScan() *WhoisUpdateOne {
	wuo.mutation.ClearScan()
	return wuo
}

// RemoveScanIDs removes the "scan" edge to ScanJob entities by IDs.
func (wuo *WhoisUpdateOne) RemoveScanIDs(ids ...int) *WhoisUpdateOne {
	wuo.mutation.RemoveScanIDs(ids...)
	return wuo
}

// RemoveScan removes "scan" edges to ScanJob entities.
func (wuo *WhoisUpdateOne) RemoveScan(s ...*ScanJob) *WhoisUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wuo.RemoveScanIDs(ids...)
}

// Where appends a list predicates to the WhoisUpdate builder.
func (wuo *WhoisUpdateOne) Where(ps ...predicate.Whois) *WhoisUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WhoisUpdateOne) Select(field string, fields ...string) *WhoisUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Whois entity.
func (wuo *WhoisUpdateOne) Save(ctx context.Context) (*Whois, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WhoisUpdateOne) SaveX(ctx context.Context) *Whois {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WhoisUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WhoisUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WhoisUpdateOne) sqlSave(ctx context.Context) (_node *Whois, err error) {
	_spec := sqlgraph.NewUpdateSpec(whois.Table, whois.Columns, sqlgraph.NewFieldSpec(whois.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model_ent: missing "Whois.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, whois.FieldID)
		for _, f := range fields {
			if !whois.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model_ent: invalid field %q for query", f)}
			}
			if f != whois.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Query(); ok {
		_spec.SetField(whois.FieldQuery, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Server(); ok {
		_spec.SetField(whois.FieldServer, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Raw(); ok {
		_spec.SetField(whois.FieldRaw, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Country(); ok {
		_spec.SetField(whois.FieldCountry, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Created(); ok {
		_spec.SetField(whois.FieldCreated, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Updated(); ok {
		_spec.SetField(whois.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.TimeFirst(); ok {
		_spec.SetField(whois.FieldTimeFirst, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.TimeLast(); ok {
		_spec.SetField(whois.FieldTimeLast, field.TypeTime, value)
	}
	if wuo.mutation.IprangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedIprangeIDs(); len(nodes) > 0 && !wuo.mutation.IprangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.IprangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.IprangeTable,
			Columns: whois.IprangePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedDomainIDs(); len(nodes) > 0 && !wuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.DomainTable,
			Columns: whois.DomainPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.AsnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedAsnIDs(); len(nodes) > 0 && !wuo.mutation.AsnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AsnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.AsnTable,
			Columns: whois.AsnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asninfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRegistrarIDs(); len(nodes) > 0 && !wuo.mutation.RegistrarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RegistrarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.RegistrarTable,
			Columns: whois.RegistrarPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registrar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedNameserverIDs(); len(nodes) > 0 && !wuo.mutation.NameserverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.NameserverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   whois.NameserverTable,
			Columns: whois.NameserverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nameserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedScanIDs(); len(nodes) > 0 && !wuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   whois.ScanTable,
			Columns: whois.ScanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Whois{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{whois.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
