// Code generated by ent, DO NOT EDIT.

package scan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ice-bergtech/dnh/src/internal/model_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Scan {
	return predicate.Scan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Scan {
	return predicate.Scan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Scan {
	return predicate.Scan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Scan {
	return predicate.Scan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Scan {
	return predicate.Scan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Scan {
	return predicate.Scan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Scan {
	return predicate.Scan(sql.FieldLTE(FieldID, id))
}

// Scanid applies equality check predicate on the "scanid" field. It's identical to ScanidEQ.
func Scanid(v string) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldScanid, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldTimestamp, v))
}

// ScanidEQ applies the EQ predicate on the "scanid" field.
func ScanidEQ(v string) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldScanid, v))
}

// ScanidNEQ applies the NEQ predicate on the "scanid" field.
func ScanidNEQ(v string) predicate.Scan {
	return predicate.Scan(sql.FieldNEQ(FieldScanid, v))
}

// ScanidIn applies the In predicate on the "scanid" field.
func ScanidIn(vs ...string) predicate.Scan {
	return predicate.Scan(sql.FieldIn(FieldScanid, vs...))
}

// ScanidNotIn applies the NotIn predicate on the "scanid" field.
func ScanidNotIn(vs ...string) predicate.Scan {
	return predicate.Scan(sql.FieldNotIn(FieldScanid, vs...))
}

// ScanidGT applies the GT predicate on the "scanid" field.
func ScanidGT(v string) predicate.Scan {
	return predicate.Scan(sql.FieldGT(FieldScanid, v))
}

// ScanidGTE applies the GTE predicate on the "scanid" field.
func ScanidGTE(v string) predicate.Scan {
	return predicate.Scan(sql.FieldGTE(FieldScanid, v))
}

// ScanidLT applies the LT predicate on the "scanid" field.
func ScanidLT(v string) predicate.Scan {
	return predicate.Scan(sql.FieldLT(FieldScanid, v))
}

// ScanidLTE applies the LTE predicate on the "scanid" field.
func ScanidLTE(v string) predicate.Scan {
	return predicate.Scan(sql.FieldLTE(FieldScanid, v))
}

// ScanidContains applies the Contains predicate on the "scanid" field.
func ScanidContains(v string) predicate.Scan {
	return predicate.Scan(sql.FieldContains(FieldScanid, v))
}

// ScanidHasPrefix applies the HasPrefix predicate on the "scanid" field.
func ScanidHasPrefix(v string) predicate.Scan {
	return predicate.Scan(sql.FieldHasPrefix(FieldScanid, v))
}

// ScanidHasSuffix applies the HasSuffix predicate on the "scanid" field.
func ScanidHasSuffix(v string) predicate.Scan {
	return predicate.Scan(sql.FieldHasSuffix(FieldScanid, v))
}

// ScanidEqualFold applies the EqualFold predicate on the "scanid" field.
func ScanidEqualFold(v string) predicate.Scan {
	return predicate.Scan(sql.FieldEqualFold(FieldScanid, v))
}

// ScanidContainsFold applies the ContainsFold predicate on the "scanid" field.
func ScanidContainsFold(v string) predicate.Scan {
	return predicate.Scan(sql.FieldContainsFold(FieldScanid, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Scan {
	return predicate.Scan(sql.FieldLTE(FieldTimestamp, v))
}

// HasIpaddress applies the HasEdge predicate on the "ipaddress" edge.
func HasIpaddress() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IpaddressTable, IpaddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIpaddressWith applies the HasEdge predicate on the "ipaddress" edge with a given conditions (other predicates).
func HasIpaddressWith(preds ...predicate.IPAddress) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newIpaddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsninfo applies the HasEdge predicate on the "asninfo" edge.
func HasAsninfo() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AsninfoTable, AsninfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAsninfoWith applies the HasEdge predicate on the "asninfo" edge with a given conditions (other predicates).
func HasAsninfoWith(preds ...predicate.ASNInfo) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newAsninfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDnsentry applies the HasEdge predicate on the "dnsentry" edge.
func HasDnsentry() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DnsentryTable, DnsentryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDnsentryWith applies the HasEdge predicate on the "dnsentry" edge with a given conditions (other predicates).
func HasDnsentryWith(preds ...predicate.DNSEntry) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newDnsentryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DomainTable, DomainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.Domain) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newDomainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaths applies the HasEdge predicate on the "paths" edge.
func HasPaths() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PathsTable, PathsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPathsWith applies the HasEdge predicate on the "paths" edge with a given conditions (other predicates).
func HasPathsWith(preds ...predicate.Path) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newPathsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNameserver applies the HasEdge predicate on the "nameserver" edge.
func HasNameserver() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NameserverTable, NameserverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNameserverWith applies the HasEdge predicate on the "nameserver" edge with a given conditions (other predicates).
func HasNameserverWith(preds ...predicate.Nameserver) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newNameserverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistrar applies the HasEdge predicate on the "registrar" edge.
func HasRegistrar() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistrarTable, RegistrarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistrarWith applies the HasEdge predicate on the "registrar" edge with a given conditions (other predicates).
func HasRegistrarWith(preds ...predicate.Registrar) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newRegistrarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWhois applies the HasEdge predicate on the "whois" edge.
func HasWhois() predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhoisTable, WhoisColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhoisWith applies the HasEdge predicate on the "whois" edge with a given conditions (other predicates).
func HasWhoisWith(preds ...predicate.Whois) predicate.Scan {
	return predicate.Scan(func(s *sql.Selector) {
		step := newWhoisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Scan) predicate.Scan {
	return predicate.Scan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Scan) predicate.Scan {
	return predicate.Scan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scan) predicate.Scan {
	return predicate.Scan(sql.NotPredicates(p))
}
