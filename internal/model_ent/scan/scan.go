// Code generated by ent, DO NOT EDIT.

package scan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scan type in the database.
	Label = "scan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScanid holds the string denoting the scanid field in the database.
	FieldScanid = "scanid"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// EdgeScanjob holds the string denoting the scanjob edge name in mutations.
	EdgeScanjob = "scanjob"
	// Table holds the table name of the scan in the database.
	Table = "scans"
	// ScanjobTable is the table that holds the scanjob relation/edge. The primary key declared below.
	ScanjobTable = "scan_scanjob"
	// ScanjobInverseTable is the table name for the ScanJob entity.
	// It exists in this package in order to avoid circular dependency with the "scanjob" package.
	ScanjobInverseTable = "scan_jobs"
)

// Columns holds all SQL columns for scan fields.
var Columns = []string{
	FieldID,
	FieldScanid,
	FieldInput,
	FieldType,
	FieldTimestamp,
}

var (
	// ScanjobPrimaryKey and ScanjobColumn2 are the table columns denoting the
	// primary key for the scanjob relation (M2M).
	ScanjobPrimaryKey = []string{"scan_id", "scan_job_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Scan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScanid orders the results by the scanid field.
func ByScanid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScanid, opts...).ToFunc()
}

// ByInput orders the results by the input field.
func ByInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInput, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByScanjobCount orders the results by scanjob count.
func ByScanjobCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScanjobStep(), opts...)
	}
}

// ByScanjob orders the results by scanjob terms.
func ByScanjob(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScanjobStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newScanjobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScanjobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ScanjobTable, ScanjobPrimaryKey...),
	)
}
